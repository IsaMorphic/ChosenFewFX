<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenGL.Net.Objects</name>
    </assembly>
    <members>
        <member name="T:OpenGL.Objects.AlignedMemoryBuffer">
            <summary>
            Aligned memory buffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.AlignedMemoryBuffer.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct an AlignedMemoryBuffer.
            </summary>
            <param name="size">
            A <see cref="T:System.UInt32"/> that specify the aligned buffer size, in basic machine units (bytes).
            </param>
            <param name="alignment">
            A <see cref="T:System.UInt32"/> that specify the aligned buffer alignment.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="size"/> is 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="alignment"/> is not 4, 8, 16 and 32.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory to satisfy the request of allocated memory.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.AlignedMemoryBuffer.AlignedBuffer">
            <summary>
            The aligned memory buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Exception thrown in the case the AlignedMemoryBuffer instance aws disposed.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.AlignedMemoryBuffer.ResetAlignment">
            <summary>
            Recompute <see cref="F:OpenGL.Objects.AlignedMemoryBuffer._AlignedBuffer"/> in order to respect alignment.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.AlignedMemoryBuffer.Size">
            <summary>
            The size of the buffer, is basic machine units (bytes).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.AlignedMemoryBuffer.Realloc(System.UInt32)">
            <summary>
            Reallocate the memory size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:OpenGL.Objects.AlignedMemoryBuffer.Alignment">
            <summary>
            The <see cref="P:OpenGL.Objects.AlignedMemoryBuffer.AlignedBuffer"/> alignment.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.AlignedMemoryBuffer._UnmanagedBuffer">
            <summary>
            Unmanaged buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.AlignedMemoryBuffer._AlignedBuffer">
            <summary>
            Point to 'mUnmanagedBuffer' in a way it is aligned.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.AlignedMemoryBuffer._Alignment">
            <summary>
            The 'mAlignedBuffer' pointer alignment.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.AlignedMemoryBuffer._Size">
            <summary>
            The size of the buffer, is basic machine units (bytes).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.AlignedMemoryBuffer.ResetBuffer">
            <summary>
            Reset the content of this AlignmentMemoryBuffer to zero.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.AlignedMemoryBuffer.CopyBuffer(OpenGL.Objects.AlignedMemoryBuffer,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Copy data from another AlignedMemoryBuffer. 
            </summary>
            <param name="otherMemoryBuffer">
            A <see cref="T:OpenGL.Objects.AlignedMemoryBuffer"/> which has allocated the data to be copied.
            </param>
            <param name="otherOffset">
            A <see cref="T:System.UInt64"/> which specify an additional offset (in bytes) to apply to <paramref name="otherMemoryBuffer"/>.
            </param>
            <param name="thisOffset">
            A <see cref="T:System.UInt64"/> which specify an additional offset (in bytes) to apply to this AlignedMemoryBuffer.
            </param>
            <param name="bytesCopied">
            A <see cref="T:System.UInt64"/> which specify the number of bytes to be copied.
            </param>
        </member>
        <member name="M:OpenGL.Objects.AlignedMemoryBuffer.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.AlignedMemoryBuffer.IsDisposed">
            <summary>
            Get whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.AlignedMemoryBuffer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            </param>
        </member>
        <member name="M:OpenGL.Objects.AlignedMemoryBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.AlignedMemoryBuffer._Disposed">
            <summary>
            Flag indicating that this instance has been disposed.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ArrayBufferItem">
            <summary>
            Class describing a vertex array buffer item.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.#ctor(OpenGL.Objects.VertexBaseType,System.UInt32)">
            <summary>
            Construct an ArrayBufferItem specifying the vertex base type and the array item length.
            </summary>
            <param name="vertexBaseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> that specify the basic type of the array item.
            </param>
            <param name="vertexLength">
            A <see cref="T:System.UInt32"/> that specify the number of components of the array item.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception thrown if <paramref name="vertexLength"/> is outside the valid range (greater than 0,
            less than or equal to 4).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.#ctor(OpenGL.Objects.VertexBaseType,System.UInt32,System.UInt32)">
            <summary>
            Construct an ArrayBufferItem specifying the vertex base type and the array item length and rank.
            </summary>
            <param name="vertexBaseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> that specify the basic type of the array item.
            </param>
            <param name="vertexLength">
            A <see cref="T:System.UInt32"/> that specify the number of components of the array item.
            </param>
            <param name="vertexRank">
            A <see cref="T:System.UInt32"/> that specify the rank of the array item (matrix columns count).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception thrown if <paramref name="vertexLength"/> or <paramref name="vertexRank"/> are outside
            the valid range (greater than 0, less than or equal to 4).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.#ctor(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Construct an ArrayBufferItem from a <see cref="T:OpenGL.Objects.ArrayBufferItemType"/>.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that synthetize all informations about a vertex array buffer item.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.#ctor(OpenGL.Objects.ArrayBufferItemAttribute)">
            <summary>
            Construct an ArrayBufferItem from a <see cref="T:OpenGL.Objects.ArrayBufferItemAttribute"/>.
            </summary>
            <param name="attribute">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemAttribute"/> describing the vertex array buffer item.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="attribute"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItem.ArrayType">
            <summary>
            The vertex array item type.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferItem.BaseType">
            <summary>
            The vertex array item base type.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferItem.ArrayLength">
            <summary>
            The number of components of the vertex array buffer item.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferItem.IsFloat">
            <summary>
            Determine whether the base type is a floating-point value.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferItem.Normalized">
            <summary>
            Determine whether the integer values shall be considered normalized floating-point.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.IsDataSupported(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexBaseType)">
            <summary>
            Check whether a <see cref="T:OpenGL.Objects.VertexBaseType"/> is supported by current OpenGL implementation.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that specify the OpenGL implementation.
            </param>
            <param name="baseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> to test for support.
            </param>
            <returns>
            It returns a boolean value indicating whether vertex attributes data can be specified with vertices having
            the base type <paramref name="baseType"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.IsDataSupported(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Check whether a <see cref="T:OpenGL.Objects.VertexBaseType"/> is supported by current OpenGL implementation.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that specify the OpenGL implementation.
            </param>
            <param name="arrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> to test for support.
            </param>
            <returns>
            It returns a boolean value indicating whether vertex attributes data can be specified with vertices having
            the base type <paramref name="arrayType"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.GetArrayType(System.Type)">
            <summary>
            Get the corresponding <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> from a <see cref="F:OpenGL.Objects.ArrayBufferItem.ArrayType"/>.
            </summary>
            <param name="type">
            A <see cref="F:OpenGL.Objects.ArrayBufferItem.ArrayType"/> indicating the structure describing the vertex array buffer item.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> corresponding to <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.GetArrayBaseType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.GetArrayBaseType(OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Get the array components base type of the vertex array attribute item type.
            </summary>
            <param name="shaderAttributeType">
            A <see cref="T:OpenGL.Objects.ShaderAttributeType"/> that describe the vertex array attribute item type.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating  the type of the components of
            the vertex array buffer item.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.op_Equality(OpenGL.Objects.ArrayBufferItem,OpenGL.Objects.ArrayBufferItem)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">
            A <see cref="T:OpenGL.Objects.ArrayBufferItem"/> to compare with <paramref name="right"/>.
            </param>
            <param name="right">
            A <see cref="T:OpenGL.Objects.ArrayBufferItem"/> to compare with <paramref name="left"/>.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="left"/> equals <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.op_Inequality(OpenGL.Objects.ArrayBufferItem,OpenGL.Objects.ArrayBufferItem)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">
            A <see cref="T:OpenGL.Objects.ArrayBufferItem"/> to compare with <paramref name="right"/>.
            </param>
            <param name="right">
            A <see cref="T:OpenGL.Objects.ArrayBufferItem"/> to compare with <paramref name="left"/>.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="left"/> doesn't equals <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.Equals(OpenGL.Objects.ArrayBufferItem)">
            <summary>
            Indicates whether the this Matrix is equal to another Matrix.
            </summary>
            <param name="other">
            A Matrix to compare with this object.
            </param>
            <returns>
            It returns true if the this Matrix is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.ArrayBuffer">
            <summary>
            Single array buffer object.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.#ctor(OpenGL.Objects.VertexBaseType,System.UInt32,OpenGL.BufferUsage)">
            <summary>
            Construct a mutable ArrayBuffer specifying its item layout on CPU side.
            </summary>
            <param name="vertexBaseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> describing the item components base type on CPU side.
            </param>
            <param name="vertexLength">
            A <see cref="T:System.UInt32"/> that specify how many components have the array item.
            </param>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.#ctor(OpenGL.Objects.VertexBaseType,System.UInt32,System.UInt32,OpenGL.BufferUsage)">
            <summary>
            Construct a mutable ArrayBuffer specifying its item layout on CPU side.
            </summary>
            <param name="vertexBaseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> describing the item components base type on CPU side.
            </param>
            <param name="vertexLength">
            A <see cref="T:System.UInt32"/> that specify how many components have the array item.
            </param>
            <param name="vertexRank">
            A <see cref="T:System.UInt32"/> that specify how many columns have the array item of matrix type.
            </param>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.#ctor(OpenGL.Objects.ArrayBufferItemType,OpenGL.BufferUsage)">
            <summary>
            Construct a mutable ArrayBuffer specifying its item layout on GPU side.
            </summary>
            <param name="format">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> describing the item base type on GPU side.
            </param>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.#ctor(OpenGL.Objects.VertexBaseType,System.UInt32,OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an immutable ArrayBuffer specifying its item layout on CPU side.
            </summary>
            <param name="vertexBaseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> describing the item components base type on CPU side.
            </param>
            <param name="vertexLength">
            A <see cref="T:System.UInt32"/> that specify how many components have the array item.
            </param>
            <param name="usageMask">
            A <see cref="T:OpenGL.MapBufferUsageMask"/> that specifies the data buffer usage mask.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.#ctor(OpenGL.Objects.VertexBaseType,System.UInt32,System.UInt32,OpenGL.MapBufferUsageMask)">
            <summary>
            Construct a immutable ArrayBuffer specifying its item layout on CPU side.
            </summary>
            <param name="vertexBaseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> describing the item components base type on CPU side.
            </param>
            <param name="vertexLength">
            A <see cref="T:System.UInt32"/> that specify how many components have the array item.
            </param>
            <param name="vertexRank">
            A <see cref="T:System.UInt32"/> that specify how many columns have the array item of matrix type.
            </param>
            <param name="usageMask">
            A <see cref="T:OpenGL.MapBufferUsageMask"/> that specifies the data buffer usage mask.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.#ctor(OpenGL.Objects.ArrayBufferItemType,OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an immutable ArrayBuffer specifying its item layout on GPU side.
            </summary>
            <param name="format">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> describing the item base type on GPU side.
            </param>
            <param name="usageMask">
            A <see cref="T:OpenGL.MapBufferUsageMask"/> that specifies the data buffer usage mask.
            </param>
        </member>
        <member name="P:OpenGL.Objects.ArrayBuffer.ArrayType">
            <summary>
            The array buffer object element type, on CPU side.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBuffer._ArrayType">
            <summary>
            The array buffer object element type.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.SetElement``1(``0,System.UInt32)">
            <summary>
            Set an element to this mapped ArrayBufferObjectBase.
            </summary>
            <typeparam name="T">
            A structure representing this ArrayBufferObjectBase element.
            </typeparam>
            <param name="value">
            A <typeparamref name="T"/> that specify the mapped BufferObject element.
            </param>
            <param name="index">
            A <see cref="T:System.UInt32"/> that specify the index of the element to set.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.GetElement``1(System.UInt32)">
            <summary>
            Get an element from this mapped BufferObject.
            </summary>
            <typeparam name="T">
            A structure representing this BufferObject element.
            </typeparam>
            <param name="index">
            A <see cref="T:System.UInt32"/> that specify the index of the element to get.
            </param>
            <returns>
            It returns a structure of type <typeparamref name="T"/>, read from the mapped BufferObject
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.ToArray``1">
            <summary>
            Convert this array buffer object in a strongly-typed array.
            </summary>
            <typeparam name="T">
            The type of elements of the returned array.
            </typeparam>
            <returns>
            It returns an array having all items stored by this ArrayBuffer.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.ToArray``1(System.UInt32)">
            <summary>
            Convert this array buffer object in a strongly-typed array.
            </summary>
            <typeparam name="T">
            An arbitrary structure defining the returned array item. It doesn't need to be correlated with the ArrayBuffer
            layout.
            </typeparam>
            <param name="arrayLength">
            A <see cref="T:System.UInt32"/> that specify the number of elements of the returned array.
            </param>
            <returns>
            It returns an array having all items stored by this ArrayBuffer.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.Copy(OpenGL.Objects.ArrayBuffer,System.UInt32[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy from an ArrayBuffer with an indirection defined by an index.
            </summary>
            <param name="buffer">
            An <see cref="T:OpenGL.Objects.ArrayBuffer"/> that specify the source data buffer to copy.
            </param>
            <param name="indices">
            An array of indices indicating the order of the vertices copied from <paramref name="buffer"/>.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specify how many elements to copy from <paramref name="buffer"/>.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specify the first index considered from <paramref name="indices"/>. A
            value of 0 indicates that the indices are considered from the first one.
            </param>
            <param name="stride">
            A <see cref="T:System.UInt32"/> that specify the offset between two indexes considered for the copy operations
            from <paramref name="indices"/>. A value of 1 indicates that all considered indices are contiguos.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="buffer"/> or <paramref name="indices"/> are null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="count"/> or <paramref name="stride"/> equals to 0.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the combination of <paramref name="count"/>, <paramref name="offset"/> and
            <paramref name="stride"/> will cause a <paramref name="indices"/> array access out of its bounds.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this <see cref="T:OpenGL.Objects.ArrayBuffer"/> have a complex data layout, of it has a vertex
            base type different from <paramref name="buffer"/>.
            </exception>
            <remarks>
            <para>
            After a successfull copy operation, the previous buffer is discarded replaced by the copied buffer from
            <paramref name="buffer"/>.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.Copy(OpenGL.Objects.ArrayBuffer,System.UInt32[],System.UInt32[],System.UInt32,System.UInt32)">
            <summary>
            Copy from an ArrayBuffer with an indirection defined by an index (polygon tessellation).
            </summary>
            <param name="buffer">
            An <see cref="T:OpenGL.Objects.ArrayBuffer"/> that specify the source data buffer to copy.
            </param>
            <param name="vcount">
            An array of integers indicating the number of the vertices of the polygon copied from <paramref name="buffer"/>. This parameter
            indicated how many polygons to copy (the array length). Each item specify the number of vertices composing the polygon.
            </param>
            <param name="indices">
            An array of indices indicating the order of the vertices copied from <paramref name="buffer"/>.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specify the first index considered from <paramref name="indices"/>. A
            value of 0 indicates that the indices are considered from the first one.
            </param>
            <param name="stride">
            A <see cref="T:System.UInt32"/> that specify the offset between two indexes considered for the copy operations
            from <paramref name="indices"/>. A value of 1 indicates that all considered indices are contiguos.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="buffer"/>, <paramref name="indices"/> or <paramref name="vcount"/> are null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this <see cref="T:OpenGL.Objects.ArrayBuffer"/> have a complex data layout, of it has a vertex
            base type different from <paramref name="buffer"/>.
            </exception>
            <remarks>
            <para>
            After a successfull copy operation, the previous buffer is discarded replaced by the copied buffer from
            <paramref name="buffer"/>.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.Copy(OpenGL.Objects.ArrayBuffer,OpenGL.Objects.ElementBuffer,System.UInt32)">
            <summary>
            Copy from an ArrayBuffer with an indirection defined by an index (polygon tessellation).
            </summary>
            <param name="buffer"></param>
            <param name="indices"></param>
            <param name="count"></param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.Copy(OpenGL.Objects.ArrayBuffer,OpenGL.Objects.ElementBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy from an ArrayBuffer with an indirection defined by an index (polygon tessellation).
            </summary>
            <param name="buffer"></param>
            <param name="indices"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <param name="stride"></param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.ConvertItemType``1">
            <summary>
            Copy this array buffer object to another one (strongly typed), but having a different array item type.
            </summary>
            <typeparam name="T">
            A structure type used to determine the array items layout of the converted ArrayBuffer.
            </typeparam>
            <returns>
            It returns a copy of this ArrayBuffer, but having a different array item. The returned instance is actually
            a <see cref="T:OpenGL.Objects.ArrayBuffer"/>; if it is desiderable a strongly typed <see cref="T:OpenGL.Objects.ArrayBuffer"/>, use
            <see cref="M:OpenGL.Objects.ArrayBuffer.ConvertItemType(OpenGL.Objects.ArrayBufferItemType)"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            Exception thrown if the array base type of this ArrayBuffer (<see cref="P:OpenGL.Objects.ArrayBuffer.ArrayType"/>) is different to the one
            derived from <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the number of base components of this ArrayBuffer cannot be mapped into the base components
            count derived from <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.ConvertItemType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Copy this array buffer object to another one, but having a different array item type.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that specify the returned <see cref="T:OpenGL.Objects.ArrayBuffer"/> item type.
            </param>
            <returns>
            It returns a copy of this ArrayBuffer, but having a different array item. The returned instance is actually
            a <see cref="T:OpenGL.Objects.ArrayBuffer"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            Exception thrown if the array base type of this ArrayBuffer (<see cref="P:OpenGL.Objects.ArrayBuffer.ArrayType"/>) is different to the one
            derived from <paramref name="vertexArrayType"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the number of base components of this ArrayBuffer cannot be mapped into the base components
            count derived from <paramref name="vertexArrayType"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.CreateArrayObject(OpenGL.Objects.ArrayBufferItemType,OpenGL.BufferUsage)">
            <summary>
            Create an array buffer object, using the generic class <see cref="T:OpenGL.Objects.ArrayBuffer`1"/>, depending on a <see cref="T:OpenGL.Objects.ArrayBufferItemType"/>.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that determine the generic argument of the created array buffer object.
            </param>
            <param name="hint">
            A <see cref="T:OpenGL.BufferUsage"/> required for creating a <see cref="T:OpenGL.Objects.ArrayBuffer"/>.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="P:OpenGL.Objects.ArrayBuffer.ArraySectionsCount">
            <summary>
            Get the count of the array sections aggregated in this ArrayBufferObjectBase.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.GetArraySection(System.UInt32)">
            <summary>
            Get the specified section information.
            </summary>
            <param name="index">
            The <see cref="T:System.UInt32"/> that specify the array section index.
            </param>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.ArrayBufferBase.IArraySection"/> defining the array section.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.ToArray">
            <summary>
            Convert the client buffer in a strongly-typed array.
            </summary>
            <returns>
            It returns an <see cref="T:System.Array"/> having all items stored by this ArrayBufferObjectBase.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer.ToArray(OpenGL.Objects.GraphicsContext)">
            <summary>
            Convert the GPU buffer in a strongly-typed array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that has created this ArrayBuffer.
            </param>
            <returns>
            It returns an <see cref="T:System.Array"/> having all items stored by this ArrayBufferObjectBase.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this ArrayBuffer does not exist for <paramref name="ctx"/>.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.ArrayBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#ItemType">
            <summary>
            The type of the elements of the array section.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#Normalized">
            <summary>
            Get whether the array elements should be meant normalized (fixed point precision values).
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#Pointer">
            <summary>
            Get the actual array buffer pointer. It could be <see cref="F:System.IntPtr.Zero"/> indicating an actual GPU
            buffer reference.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#Offset">
            <summary>
            Offset of the first element of the array section, in bytes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#Stride">
            <summary>
            Offset between two element of the array section, in bytes.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ArrayBuffer`1">
            <summary>
            Generic array buffer object.
            </summary>
            <typeparam name="T">
            A structure that holds the array item data.
            </typeparam>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer`1.#ctor">
            <summary>
            Construct an immutable ArrayBuffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer`1.#ctor(OpenGL.BufferUsage)">
            <summary>
            Construct a mutable ArrayBuffer.
            </summary>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer`1.#ctor(OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an immutable ArrayBuffer.
            </summary>
            <param name="usageMask">
            A <see cref="T:OpenGL.MapBufferUsageMask"/> that specifies the data buffer usage mask.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer`1.Min">
            <summary>
            Get the minimum of the values
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer`1.Max">
            <summary>
            Get the maximum of the values
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer`1.MinMax(`0@,`0@)">
            <summary>
            Get the minimum and the maximum of the values.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBuffer`1.ToArray">
            <summary>
            Convert this array buffer object in a strongly-typed array.
            </summary>
            <returns>
            It returns an array having all items stored by this ArrayBuffer.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.ArrayBufferBase">
            <summary>
            Array buffer object base class. This class is a <see cref="T:OpenGL.Objects.Buffer"/> specialized for storing data to be issued to a shader program execution.
            </summary>
            <remarks>
            Implements array buffer, indeed a an array of elements. Implements:
            - Buffer description: element size and count
            - Element access (getter and setter)
            - Creation (CPU, empty, CPU array, GPU empty, GPU array)
            - Copy-write (CPU array)
            - Copy-read (CPU array)
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.#ctor(OpenGL.BufferTarget,System.UInt32,OpenGL.BufferUsage)">
            <summary>
            Construct an ArrayBufferObjectBase.
            </summary>
            <param name="bufferTarget">
            A <see cref="T:OpenGL.BufferTarget"/> that specifies the buffer target.
            </param>
            <param name="itemSize">
            A <see cref="T:System.UInt32"/> that specifies the size of a single item, in bytes.
            </param>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.#ctor(OpenGL.BufferTarget,System.UInt32,OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an ArrayBufferObjectBase.
            </summary>
            <param name="bufferTarget">
            A <see cref="T:OpenGL.BufferTarget"/> that specify the buffer target.
            </param>
            <param name="itemSize">
            A <see cref="T:System.UInt32"/> that specifies the size of a single item, in bytes.
            </param>
            <param name="usageMask">
            A <see cref="T:OpenGL.MapBufferUsageMask"/> that specifies the data buffer usage mask.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferBase.ItemSize">
            <summary>
            Get the size of the item of this array buffer object, in bytes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferBase.ItemsCount">
            <summary>
            Get the GPU items count.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.SetElementCore``1(``0,System.UInt32,System.UInt32)">
            <summary>
            Set an element to this mapped ArrayBufferObjectBase.
            </summary>
            <typeparam name="T">
            A structure representing this ArrayBufferObjectBase element.
            </typeparam>
            <param name="value">
            A <typeparamref name="T"/> that specify the mapped BufferObject element.
            </param>
            <param name="index">
            A <see cref="T:System.UInt32"/> that specify the index of the element to set.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specifies the array section index for supporting packed/interleaved arrays.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.GetElementCore``1(System.UInt32,System.UInt32)">
            <summary>
            Get an element from this mapped BufferObject.
            </summary>
            <typeparam name="T">
            A structure representing this BufferObject element.
            </typeparam>
            <param name="index">
            A <see cref="T:System.UInt32"/> that specify the index of the element to get.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specifies the array section index for supporting packed/interleaved arrays.
            </param>
            <returns>
            It returns a structure of type <typeparamref name="T"/>, read from the mapped BufferObject
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="T:OpenGL.Objects.ArrayBufferBase.IArraySection">
            <summary>
            Interface abstracting an array section.
            </summary>
            <remarks>
            The properties defined in this interface are meant to be used with the actual Gl.VertexAttribPointer call.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferBase.IArraySection.ItemType">
            <summary>
            The type of the elements of the array section.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferBase.IArraySection.Normalized">
            <summary>
            Get whether the array elements should be meant normalized (fixed point precision values).
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferBase.IArraySection.Pointer">
            <summary>
            Get the actual array buffer pointer. It could be <see cref="F:System.IntPtr.Zero"/> indicating an actual GPU
            buffer reference.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferBase.IArraySection.Offset">
            <summary>
            Offset of the first element of the array section, in bytes.
            </summary>
            <remarks>
            It should NOT take into account the client buffer address, even if the GL_ARB_vertex_buffer_object extension
            is not supported by current implementation. It indicates an actual offset, in bytes.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferBase.IArraySection.Stride">
            <summary>
            Offset between two element of the array section, in bytes. If it is <see cref="F:System.IntPtr.Zero"/> it means that
            items are tighly packed.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferBase.ArraySectionsCount">
            <summary>
            Get the count of the array sections aggregated in this ArrayBufferObjectBase.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.GetArraySection(System.UInt32)">
            <summary>
            Get the specified section information.
            </summary>
            <param name="index">
            The <see cref="T:System.UInt32"/> that specify the array section index.
            </param>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.ArrayBufferBase.IArraySection"/> defining the array section.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.Create(System.UInt32)">
            <summary>
            Create this ArrayBufferObject by specifing only the number of items.
            </summary>
            <param name="itemsCount">
            A <see cref="T:System.UInt32"/> that specify the number of elements hold by this ArrayBufferObject.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="itemsCount"/> is zero.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.Create(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Create this ArrayBufferObject by specifing only the number of items.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used to define this ArrayBufferObject.
            </param>
            <param name="itemsCount">
            A <see cref="T:System.UInt32"/> that specify the number of elements hold by this ArrayBufferObject.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="itemsCount"/> is zero.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.Create(System.Array)">
            <summary>
            Create this ArrayBufferObject by specifing only the number of items.
            </summary>
            <param name="array">
            A <see cref="T:System.Array"/> that specifies the (new) content of this <see cref="T:OpenGL.Objects.ArrayBufferBase"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="array"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.Create(OpenGL.Objects.GraphicsContext,System.Array)">
            <summary>
            Create this ArrayBufferObject by specifing only the number of items.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used to define this ArrayBufferObject.
            </param>
            <param name="array">
            A <see cref="T:System.Array"/> that specifies the (new) content of this <see cref="T:OpenGL.Objects.ArrayBufferBase"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="array"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.CopyArray(System.IntPtr,System.UInt32,System.Array,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy to pinned memory the items defined by an array, item by item, respecting item strides and offsets.
            </summary>
            <param name="dst">
            The <see cref="T:System.IntPtr"/> that specify the destination memory address.
            </param>
            <param name="dstItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements in the destination memory.
            </param>
            <param name="src">
            The <see cref="T:System.Array"/> that specify the source data to be copied.
            </param>
            <param name="srcItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements of <paramref name="src"/>.
            </param>
            <param name="srcIndex">
            A <see cref="T:System.UInt32"/> that specify the array offset (in elements) where the copy starts.
            </param>
            <param name="srcCount">
            A <see cref="T:System.UInt32"/> that specify the number of elements of <paramref name="src"/> must be copied.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.CopyArray(System.IntPtr,System.IntPtr,System.UInt32,System.Array,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy to pinned memory the items defined by an array, item by item, respecting item strides and offsets.
            </summary>
            <param name="dst">
            The <see cref="T:System.IntPtr"/> that specify the destination memory address.
            </param>
            <param name="dstStride">
            A <see cref="T:System.IntPtr"/> that specify the number of bytes between two consecutive elements in the destination memory.
            </param>
            <param name="dstItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements in the destination memory.
            </param>
            <param name="src">
            The <see cref="T:System.Array"/> that specify the source data to be copied.
            </param>
            <param name="srcStride">
            A <see cref="T:System.IntPtr"/> that specify the number of bytes between two consecutive elements in the source memory.
            </param>
            <param name="srcItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements of <paramref name="src"/>.
            </param>
            <param name="srcIndex">
            A <see cref="T:System.UInt32"/> that specify the array offset (in elements) where the copy starts.
            </param>
            <param name="srcCount">
            A <see cref="T:System.UInt32"/> that specify the number of elements of <paramref name="src"/> must be copied.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.CopyArray(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.Array,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy to pinned memory the items defined by an array, item by item, respecting item strides and offsets.
            </summary>
            <param name="dst">
            The <see cref="T:System.IntPtr"/> that specify the destination memory address.
            </param>
            <param name="dstOffset">
            A <see cref="T:System.IntPtr"/> that specify the offset of the actual destination memory address respect <paramref name="dst"/>, in bytes.
            </param>
            <param name="dstStride">
            A <see cref="T:System.IntPtr"/> that specify the number of bytes between two consecutive elements in the destination memory.
            </param>
            <param name="dstItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements in the destination memory.
            </param>
            <param name="src">
            The <see cref="T:System.Array"/> that specify the source data to be copied.
            </param>
            <param name="srcOffset">
            A <see cref="T:System.IntPtr"/> that specify the offset of the actual source memory address respect <paramref name="src"/>, in bytes.
            </param>
            <param name="srcStride">
            A <see cref="T:System.IntPtr"/> that specify the number of bytes between two consecutive elements in the source memory.
            </param>
            <param name="srcItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements of <paramref name="src"/>.
            </param>
            <param name="srcIndex">
            A <see cref="T:System.UInt32"/> that specify the array offset (in elements) where the copy starts.
            </param>
            <param name="srcCount">
            A <see cref="T:System.UInt32"/> that specify the number of elements of <paramref name="src"/> must be copied.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.CopyArray(System.Array,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy from pinned memory the items defined by an array, item by item, respecting item strides.
            </summary>
            <param name="dst">
            The <see cref="T:System.Array"/> that specify the destination memory where copy to.
            </param>
            <param name="dstItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements in the destination memory.
            </param>
            <param name="src">
            The <see cref="T:System.IntPtr"/> that specify the source data to be copied.
            </param>
            <param name="srcItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements of <paramref name="dst"/>.
            </param>
            <param name="dstIndex">
            A <see cref="T:System.UInt32"/> that specify the array offset (in elements) where the copy starts.
            </param>
            <param name="dstCount">
            A <see cref="T:System.UInt32"/> that specify the number of elements of <paramref name="dst"/> must be copied.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.CopyArray(System.Array,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy from pinned memory the items defined by an array, item by item, respecting item strides.
            </summary>
            <param name="dst">
            The <see cref="T:System.Array"/> that specify the destination memory where copy to.
            </param>
            <param name="dstStride">
            A <see cref="T:System.IntPtr"/> that specify the number of bytes between two consecutive elements in the destination memory.
            </param>
            <param name="dstItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements in the destination memory.
            </param>
            <param name="src">
            The <see cref="T:System.IntPtr"/> that specify the source data to be copied.
            </param>
            <param name="srcStride">
            A <see cref="T:System.IntPtr"/> that specify the number of bytes between two consecutive elements in the source memory.
            </param>
            <param name="srcItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements of <paramref name="dst"/>.
            </param>
            <param name="dstIndex">
            A <see cref="T:System.UInt32"/> that specify the array offset (in elements) where the copy starts.
            </param>
            <param name="dstCount">
            A <see cref="T:System.UInt32"/> that specify the number of elements of <paramref name="dst"/> must be copied.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.CopyArray(System.Array,System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy from pinned memory the items defined by an array, item by item, respecting item strides.
            </summary>
            <param name="dst">
            The <see cref="T:System.Array"/> that specify the destination memory where copy to.
            </param>
            <param name="dstOffset">
            A <see cref="T:System.IntPtr"/> that specify the offset of the actual destination memory address respect <paramref name="dst"/>, in bytes.
            </param>
            <param name="dstStride">
            A <see cref="T:System.IntPtr"/> that specify the number of bytes between two consecutive elements in the destination memory.
            </param>
            <param name="dstItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements in the destination memory.
            </param>
            <param name="src">
            The <see cref="T:System.IntPtr"/> that specify the source data to be copied.
            </param>
            <param name="srcOffset">
            A <see cref="T:System.IntPtr"/> that specify the offset of the actual source memory address respect <paramref name="src"/>, in bytes.
            </param>
            <param name="srcStride">
            A <see cref="T:System.IntPtr"/> that specify the number of bytes between two consecutive elements in the source memory.
            </param>
            <param name="srcItemSize">
            A <see cref="T:System.UInt32"/> that specify the size of the elements of <paramref name="dst"/>.
            </param>
            <param name="dstIndex">
            A <see cref="T:System.UInt32"/> that specify the array offset (in elements) where the copy starts.
            </param>
            <param name="dstCount">
            A <see cref="T:System.UInt32"/> that specify the number of elements of <paramref name="dst"/> must be copied.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.ToArray">
            <summary>
            Convert the client buffer in a strongly-typed array.
            </summary>
            <returns>
            It returns an <see cref="T:System.Array"/> having all items stored by this ArrayBufferObjectBase.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.ToArray(OpenGL.Objects.GraphicsContext)">
            <summary>
            Convert the GPU buffer in a strongly-typed array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that has created this ArrayBufferObject.
            </param>
            <returns>
            It returns an <see cref="T:System.Array"/> having all items stored by this ArrayBufferObjectBase.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this ArrayBufferObject does not exist for <paramref name="ctx"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferBase.CreateArray(OpenGL.Objects.ArrayBufferItemType,System.UInt32)">
            <summary>
            Create a strongly typed array following <see cref="T:OpenGL.Objects.ArrayBufferItemType"/>.
            </summary>
            <param name="arrayBufferItemType">
            The <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that specifies the base type of the array elements.
            </param>
            <param name="itemCount">
            A <see cref="T:System.UInt32"/> that specify the length of the array returned.
            </param>
            <returns>
            It returns an uninitialized array, strongly typed depending on <see cref="T:OpenGL.Objects.ArrayBufferItemType"/>, with
            the length equals to <paramref name="itemCount"/>.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferBase.Size">
            <summary>
            The size of this Buffer, in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.#ctor(OpenGL.BufferUsage)">
            <summary>
            Construct a mutable ArrayBufferInterleaved specifying its item layout on GPU side.
            </summary>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.#ctor(OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an immutable ArrayBufferInterleaved specifying its item layout on GPU side.
            </summary>
            <param name="usageMask">
            A <see cref="T:OpenGL.MapBufferUsageMask"/> that specifies the data buffer usage mask.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ArrayBufferInterleaved`1.InterleavedSectionBase">
            <summary>
            An <see cref="T:OpenGL.Objects.ArrayBufferBase.IArraySection"/>, but inteleaved with other <see cref="T:OpenGL.Objects.ArrayBufferInterleaved`1.InterleavedSectionBase"/>.
            </summary>
            <remarks>
            Roughly a <see cref="T:OpenGL.Objects.ArrayBufferInterleaved`1.InterleavedSectionBase"/> represents a field of a structure, representing the interleaved
            vertices. Offset and types are defined directory from a generic type.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferInterleaved`1.InterleavedSectionBase.ItemType">
            <summary>
            The type of the elements of the array section.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferInterleaved`1.InterleavedSectionBase.Normalized">
            <summary>
            Get whether the array elements should be meant normalized (fixed point precision values).
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferInterleaved`1.InterleavedSectionBase.Pointer">
            <summary>
            Get the actual array buffer pointer. This is meant as offset of the currently CPU/GPU buffer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferInterleaved`1.InterleavedSectionBase.Offset">
            <summary>
            Offset of the first element of the array section, in bytes.
            </summary>
            <remarks>
            It should NOT take into account the client buffer address, even if the GL_ARB_vertex_buffer_object extension
            is not supported by current implementation. It indicates an actual offset, in bytes.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferInterleaved`1.InterleavedSectionBase.Stride">
            <summary>
            Offset between two element of the array section, in bytes. This is the structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.ScanTypeSections">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.SetElement(`0,System.UInt32)">
            <summary>
            Set an element to this mapped ArrayBufferObjectBase.
            </summary>
            <typeparam name="T">
            A structure representing this ArrayBufferObjectBase element.
            </typeparam>
            <param name="value">
            A <typeparamref name="T"/> that specify the mapped BufferObject element.
            </param>
            <param name="index">
            A <see cref="T:System.UInt32"/> that specify the index of the element to set.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specifies the array section index for supporting packed/interleaved arrays.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.SetElement``1(``0,System.UInt32,System.UInt32)">
            <summary>
            Set an element to this mapped ArrayBufferObjectBase.
            </summary>
            <typeparam name="T">
            A structure representing this ArrayBufferObjectBase element.
            </typeparam>
            <param name="value">
            A <typeparamref name="T"/> that specify the mapped BufferObject element.
            </param>
            <param name="index">
            A <see cref="T:System.UInt32"/> that specify the index of the element to set.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specifies the array section index for supporting packed/interleaved arrays.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.GetElement``1(System.UInt32,System.UInt32)">
            <summary>
            Get an element from this mapped BufferObject.
            </summary>
            <typeparam name="T">
            A structure representing this BufferObject element.
            </typeparam>
            <param name="index">
            A <see cref="T:System.UInt32"/> that specify the index of the element to get.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specifies the array section index for supporting packed/interleaved arrays.
            </param>
            <returns>
            It returns a structure of type <typeparamref name="T"/>, read from the mapped BufferObject
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="P:OpenGL.Objects.ArrayBufferInterleaved`1.ArraySectionsCount">
            <summary>
            Get the count of the array sections aggregated in this ArrayBufferObjectBase.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.GetArraySection(System.UInt32)">
            <summary>
            Get the specified section information.
            </summary>
            <param name="index">
            The <see cref="T:System.UInt32"/> that specify the array section index.
            </param>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.ArrayBufferBase.IArraySection"/> defining the array section.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.ToArray">
            <summary>
            Convert the client buffer in a strongly-typed array.
            </summary>
            <returns>
            It returns an <see cref="T:System.Array"/> having all items stored by this ArrayBufferObjectBase.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferInterleaved`1.ToArray(OpenGL.Objects.GraphicsContext)">
            <summary>
            Convert the GPU buffer in a strongly-typed array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that has created this ArrayBufferObject.
            </param>
            <returns>
            It returns an <see cref="T:System.Array"/> having all items stored by this ArrayBufferObjectBase.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this ArrayBufferObject does not exist for <paramref name="ctx"/>.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.ArrayBufferItemAttribute">
            <summary>
            Attribute assigned to those types having a direct representation in buffer.
            </summary>
            <remarks>
            <para>
            This Attribute is required for detecting an OpenGL sub-array inside a buffer object. All those
            types not specifying this Attribute cannot be used for managing buffer object data.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemAttribute.#ctor(OpenGL.Objects.VertexBaseType,System.UInt32)">
            <summary>
            Construct an ArrayBufferItemAttribute for vector items.
            </summary>
            <param name="arrayType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> describing the vector components type.
            </param>
            <param name="arrayLength">
            A <see cref="T:System.UInt32"/> that specify the vector length.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemAttribute.#ctor(OpenGL.Objects.VertexBaseType,System.UInt32,System.UInt32)">
            <summary>
            Construct an ArrayBufferItemAttribute for matrix items.
            </summary>
            <param name="arrayType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> describing the matrix components type.
            </param>
            <param name="matrixColumns">
            A <see cref="T:System.UInt32"/> that specify the matrix columns count.
            </param>
            <param name="matrixRows">
            A <see cref="T:System.UInt32"/> that specify the matrix rows count.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemAttribute.#ctor(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            
            </summary>
            <param name="vertexArrayType"></param>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemAttribute.ArrayType">
            <summary>
            The array type.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemAttribute.ArrayBaseType">
            <summary>
            The array base type.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemAttribute.ArrayLength">
            <summary>
            The array length.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemAttribute.ArrayRank">
            <summary>
            The array rank.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemAttribute.Normalized">
            <summary>
            Indicates whether the integer data shall be interpreted as normalized floating-point.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemAttribute.Ignore">
            <summary>
            Indicated whether this field should be ignored in special cases.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ArrayBufferItemType">
            <summary>
            The type of the data collected in OpenGL array buffers.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float">
            <summary>
            A single single-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float2">
            <summary>
            A vector of two single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float3">
            <summary>
            A vector of three single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float4">
            <summary>
            A vector of four single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Half">
            <summary>
            A single half-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Half2">
            <summary>
            A vector of two half-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Half3">
            <summary>
            A vector of three half-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Half4">
            <summary>
            A vector of four half-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double">
            <summary>
            A single double-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double2">
            <summary>
            A vector of two double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double3">
            <summary>
            A vector of three double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double4">
            <summary>
            A vector of four double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Byte">
            <summary>
            A single signed byte value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Byte2">
            <summary>
            A vector of two signed byte values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Byte3">
            <summary>
            A vector of three signed byte values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Byte4">
            <summary>
            A vector of four signed byte values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Short">
            <summary>
            A single signed short integer value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Short2">
            <summary>
            A vector of two signed short integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Short3">
            <summary>
            A vector of three signed short integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Short4">
            <summary>
            A vector of four signed short integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Int">
            <summary>
            A single signed integer value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Int2">
            <summary>
            A vector of two signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Int3">
            <summary>
            A vector of three signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Int4">
            <summary>
            A vector of four signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UByte">
            <summary>
            A single unsigned byte value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UByte2">
            <summary>
            A vector of two unsigned byte values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UByte3">
            <summary>
            A vector of three unsigned byte values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UByte4">
            <summary>
            A vector of four unsigned byte values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UShort">
            <summary>
            A single unsigned short integer value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UShort2">
            <summary>
            A vector of two unsigned short integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UShort3">
            <summary>
            A vector of three unsigned short integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UShort4">
            <summary>
            A vector of four unsigned short integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UInt">
            <summary>
            A single unsigned integer value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UInt2">
            <summary>
            A vector of two unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UInt3">
            <summary>
            A vector of three unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.UInt4">
            <summary>
            A vector of four unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float2x2">
            <summary>
            A single-precision floating-point matrix of 2 columns and 2 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float2x3">
            <summary>
            A single-precision floating-point matrix of 2 columns and 3 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float2x4">
            <summary>
            A single-precision floating-point matrix of 2 columns and 4 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float3x2">
            <summary>
            A single-precision floating-point matrix of 3 columns and 2 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float3x3">
            <summary>
            A single-precision floating-point matrix of 3 columns and 3 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float3x4">
            <summary>
            A single-precision floating-point matrix of 3 columns and 4 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float4x2">
            <summary>
            A single-precision floating-point matrix of 4 columns and 2 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float4x3">
            <summary>
            A single-precision floating-point matrix of 4 columns and 3 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Float4x4">
            <summary>
            A single-precision floating-point matrix of 4 columns and 4 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double2x2">
            <summary>
            A double-precision floating-point matrix of 2 columns and 2 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double2x3">
            <summary>
            A double-precision floating-point matrix of 2 columns and 3 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double2x4">
            <summary>
            A double-precision floating-point matrix of 2 columns and 4 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double3x2">
            <summary>
            A double-precision floating-point matrix of 3 columns and 2 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double3x3">
            <summary>
            A double-precision floating-point matrix of 3 columns and 3 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double3x4">
            <summary>
            A double-precision floating-point matrix of 3 columns and 4 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double4x2">
            <summary>
            A double-precision floating-point matrix of 4 columns and 2 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double4x3">
            <summary>
            A double-precision floating-point matrix of 4 columns and 3 rows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ArrayBufferItemType.Double4x4">
            <summary>
            A double-precision floating-point matrix of 4 columns and 4 rows.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ArrayBufferItemTypeExtensions">
            <summary>
            Extension methods for <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> enumeration.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetVertexBaseType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the array components base type of the vertex array buffer item.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating  the type of the components of
            the vertex array buffer item.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.IsFloatBaseType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Determine whether a vertex array type is composed by floating-point value(s).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetItemSize(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the size of a vertex array buffer item, in bytes.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns the size of the vertex array buffer type having the type <paramref name="vertexArrayType"/>, in bytes.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetArrayLength(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the number of components of the vertex array buffer item.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns the count of the components of the vertex array buffer item. It will be a value
            from 1 (inclusive) to 4 (inclusive). For matrices, this value indicates the matrix height (column-major order).
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetArrayRank(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the rank of the vertex array buffer item (that is, the number of <i>vec4</i> attributes requires).
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns the rank of the vertex array buffer item. It will be a value
            from 1 (inclusive) to 4 (inclusive). For matrices, this value indicates the matrix width (column-major order),
            while for simpler types the value will be 1.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.IsArraySimpleType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get whether a <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> is a simple type (float, int, ...).
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="vertexArrayType"/> is a simple type.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.IsArrayVectorType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get whether a <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> is a vector type (vec2, vec3, ...).
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="vertexArrayType"/> is a vector type.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.IsArrayMatrixType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get whether a <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> is a matrix type (mat2, mat4, ...).
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="vertexArrayType"/> is a matrix type.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetMatrixColumnType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the correponding type for the column of the matrix type.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="vertexArrayType"/> is a matrix type.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetVertexPointerType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the array components base type of the vertex array attribute item type.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array attribute item type.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating  the type of the components of
            the vertex array buffer item.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetColorPointerType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the array components base type of the vertex array attribute item type.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array attribute item type.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating  the type of the components of
            the vertex array buffer item.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetNormalPointerType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the array components base type of the vertex array attribute item type.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array attribute item type.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating  the type of the components of
            the vertex array buffer item.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ArrayBufferItemTypeExtensions.GetTexCoordPointerType(OpenGL.Objects.ArrayBufferItemType)">
            <summary>
            Get the array components base type of the vertex array attribute item type.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array attribute item type.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating  the type of the components of
            the vertex array buffer item.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Collections.StringDictionary`1">
            <summary>
            Dictionary specialized for mapping generic types against a string key.
            </summary>
            <typeparam name="T">
            Any type to be mapped against a string key.
            </typeparam>
        </member>
        <member name="M:OpenGL.Objects.Collections.StringDictionary`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Collections.StringDictionary`1.StringEqualityComparer">
            <summary>
            A <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> able to index dictionary keys of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Collections.StringDictionary`1.StringEqualityComparer.Equals(System.String,System.String)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">
            A <see cref="T:System.String"/> that is the first object to compare.
            </param>
            <param name="y">
            A <see cref="T:System.String"/> that is the second object to compare.
            </param>
            <returns>
            It returns a boolean value indicating that <paramref name="x"/> and <paramref name="y"/> are equal.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Collections.StringDictionary`1.StringEqualityComparer.GetHashCode(System.String)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">
            The <see cref="T:System.String"/> for which a hash code is to be returned.
            </param>
            <returns>
            A hash code for the specified object <paramref name="obj"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Font">
            <summary>
            Font abstracton.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Font.#ctor(System.Drawing.FontFamily,System.UInt32,System.Drawing.FontStyle,OpenGL.Objects.FontFx[])">
            <summary>
            Construct a Font specifying the font properties.
            </summary>
            <param name="fontFamily">
            The <see cref="T:System.Drawing.FontFamily"/> that specifies the family of the font.
            </param>
            <param name="emSize">
            The <see cref="T:System.UInt32"/> that specifies the font size.
            </param>
            <param name="fontStyle">
            The <see cref="T:System.Drawing.FontStyle"/> that specifies the stryle of the font.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Font.Family">
            <summary>
            The family of the font.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Font.Size">
            <summary>
            The size of the font.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Font.Style">
            <summary>
            The style of the font.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Font._FxShadow">
            <summary>
            Shadow effect.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Font._FxHalo">
            <summary>
            Halo effect.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Font.GlyphBase">
            <summary>
            Basic glyph information
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Font.GlyphBase.GlyphChar">
            <summary>
            The character represented by this glyph.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Font.GlyphBase.GlyphSize">
            <summary>
            The size of the glyph.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Font.GetFontCharacters">
            <summary>
            Get the characters to be included in font glyphs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Font.DrawString(OpenGL.Objects.GraphicsContext,OpenGL.Matrix4x4f,OpenGL.ColorRGBAF,System.String)">
            <summary>
            Draw a character sequence.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="modelview">
            The <see cref="T:OpenGL.Matrix4x4f"/> the model-view-projection matrix for the first character of <paramref name="s"/>.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="T:OpenGL.Objects.FontFactory">
            <summary>
            Font factory.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.FontFactory.FontType">
            <summary>
            The type of the implementation of the font rendering.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontFactory.FontType.Vector">
            <summary>
            Polygon based font rendering.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontFactory.FontType.Textured">
            <summary>
            Texture based font rendering.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontFactory.CreateFont(System.Drawing.FontFamily,System.UInt32,System.Drawing.FontStyle,OpenGL.Objects.FontFactory.FontType,OpenGL.Objects.FontFx[])">
            <summary>
            Create an <see cref="T:OpenGL.Objects.IFont"/> implementation for the specified font.
            </summary>
            <param name="fontFamily"></param>
            <param name="emSize"></param>
            <param name="fontType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.FontVertex">
            <summary>
            Font renderer based on polygons.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontVertex.#ctor(System.Drawing.FontFamily,System.UInt32,System.Drawing.FontStyle,OpenGL.Objects.FontFx[])">
            <summary>
            
            </summary>
            <param name="fontFamily"></param>
            <param name="emSize"></param>
        </member>
        <member name="T:OpenGL.Objects.FontVertex.GlyphPolygons">
            <summary>
            Character glyph polygon.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.FontVertex.GlyphPolygons.Contours">
            <summary>
            Contours defining the glyph geaometry.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontVertex.GlyphPolygons._Contours">
            <summary>
            Contours defining the glyph geaometry.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontVertex.GenerateGlyphs(System.Drawing.FontFamily,System.UInt32,System.Drawing.FontStyle)">
            <summary>
            
            </summary>
            <param name="fontFamily"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.FontVertex.Glyph">
            <summary>
            Glyph for FontPatch.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontVertex.LinkSharedResources(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a <see cref="T:OpenGL.Objects.VertexArrays"/> for rendering glyphs.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontVertex._Glyphs">
            <summary>
            Map between font characters and glyph information.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontVertex.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FontVertex.DrawString(OpenGL.Objects.GraphicsContext,OpenGL.Matrix4x4f,OpenGL.ColorRGBAF,System.String)">
            <summary>
            Draw a character sequence.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="modelview">
            The <see cref="T:OpenGL.Matrix4x4f"/> the model-view-projection matrix for the first character of <paramref name="s"/>.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FontVertex.DrawStringCore(OpenGL.Objects.GraphicsContext,OpenGL.Matrix4x4f,OpenGL.ColorRGBAF,System.String)">
            <summary>
            Draw a character sequence.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="modelview">
            The <see cref="T:OpenGL.Matrix4x4f"/> the model-view-projection matrix for the first character of <paramref name="s"/>.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="F:OpenGL.Objects.FontVertex._VertexArrays">
            <summary>
            The font glyph vertex array.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontVertex._FontProgram">
            <summary>
            Shader program used for drawing font glyphs.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.FontFx">
            <summary>
            Additional effect for styling the font.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.FontFxShadow">
            <summary>
            Font shadow.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontFxShadow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontFxShadow.#ctor(OpenGL.Vertex2f)">
            <summary>
            Construct a FontFxShadow specifying the shadow offset.
            </summary>
            <param name="offset">
            The <see cref="T:OpenGL.Vertex2f"/> that specifies the shadow offset.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FontFxShadow.#ctor(OpenGL.ColorRGBAF,OpenGL.Vertex2f)">
            <summary>
            Construct a FontFxShadow specifying the shadow color and offset.
            </summary>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the shadow color.
            </param>
            <param name="offset">
            The <see cref="T:OpenGL.Vertex2f"/> that specifies the shadow offset.
            </param>
        </member>
        <member name="F:OpenGL.Objects.FontFxShadow.Color">
            <summary>
            Halo color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontFxShadow.Offset">
            <summary>
            Shadow offset.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.FontFxHalo">
            <summary>
            Halo effect.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontFxHalo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontFxHalo.HaloColor">
            <summary>
            Halo color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontFxHalo.HaloWidth">
            <summary>
            Halo thickness, in pixels.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.FontTextureArray2d">
            <summary>
            Font implemented using array texture and vertex instancing.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.#ctor(System.Drawing.FontFamily,System.UInt32,System.Drawing.FontStyle,OpenGL.Objects.FontFx[])">
            <summary>
            Construct a Font based on texture arrays.
            </summary>
            <param name="fontFamily">
            The <see cref="T:System.Drawing.FontFamily"/> that specifies the family of the font.
            </param>
            <param name="emSize">
            The <see cref="T:System.UInt32"/> that specifies the font size.
            </param>
            <param name="fontStyle">
            The <see cref="T:System.Drawing.FontStyle"/> that specifies the stryle of the font.
            </param>
        </member>
        <member name="T:OpenGL.Objects.FontTextureArray2d.Glyph">
            <summary>
            Glyph metadata.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d.Glyph.Layer">
            <summary>
            Texture layer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d.Glyph.TexScale">
            <summary>
            Texture coordinate scale.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d._GlyphMetadata">
            <summary>
            Characters set metadata.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.FontTextureArray2d.GlyphInstance">
            <summary>
            Instanced glyph array element.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d.GlyphInstance.ModelViewProjection">
            <summary>
            The model-view-projection of the glyph.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d.GlyphInstance.GlyphVertexParams">
            <summary>
            The world-space scale and texture layer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d.GlyphInstance.GlyphTexParams">
            <summary>
            The texture coordinate scale, to support variable size glyphs.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.GetGlyphsInstances(OpenGL.Matrix4x4f,System.String)">
            <summary>
            Get a list of <see cref="T:OpenGL.Objects.FontTextureArray2d.GlyphModelType"/> for a specific string and model-view-projection matrix.
            </summary>
            <param name="modelview"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.UpdateGlyphBuffer(OpenGL.Objects.GraphicsContext,System.Collections.Generic.List{OpenGL.Objects.FontTextureArray2d.GlyphModelType})">
            <summary>
            Update eventual buffers required to hold glyph instances information.
            </summary>
            <param name="ctx"></param>
            <param name="glyphsInstances"></param>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.LinkSharedResources(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create resources for rendering glyphs.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.PostSharedResources(OpenGL.Objects.GraphicsContext)">
            <summary>
            Process resources created.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.DrawString(OpenGL.Objects.GraphicsContext,OpenGL.Matrix4x4f,OpenGL.ColorRGBAF,System.String)">
            <summary>
            Draw a character sequence.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="modelview">
            The <see cref="T:OpenGL.Matrix4x4f"/> the model-view-projection matrix for the first character of <paramref name="s"/>.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.DrawStringCore(OpenGL.Objects.GraphicsContext,OpenGL.Objects.TextureArray2D,OpenGL.ColorRGBAF,System.Collections.Generic.List{OpenGL.Objects.FontTextureArray2d.GlyphModelType})">
            <summary>
            Draw a character sequence (base method).
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.DrawStringCore_Compatibility(OpenGL.Objects.GraphicsContext,OpenGL.Objects.TextureArray2D,OpenGL.ColorRGBAF,System.Collections.Generic.List{OpenGL.Objects.FontTextureArray2d.GlyphModelType})">
            <summary>
            Draw a character sequence (base method).
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="T:OpenGL.Objects.FontTextureArray2d.GlyphModelType">
            <summary>
            Utility structure for integrating shader program OpenGL.FontTextureArray+Instanced.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.DrawStringCore_Instanced(OpenGL.Objects.GraphicsContext,OpenGL.Objects.TextureArray2D,OpenGL.ColorRGBAF,System.Collections.Generic.List{OpenGL.Objects.FontTextureArray2d.GlyphModelType})">
            <summary>
            Draw a character sequence (base method).
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="modelview">
            The <see cref="!:Matrix4x4"/> the model-view-projection matrix for the first character of <paramref name="s"/>.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FontTextureArray2d.DrawStringCore_InstancedArrays(OpenGL.Objects.GraphicsContext,OpenGL.Objects.TextureArray2D,OpenGL.ColorRGBAF,System.Collections.Generic.List{OpenGL.Objects.FontTextureArray2d.GlyphModelType})">
            <summary>
            Draw a character sequence (base method).
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d._VertexArrays">
            <summary>
            The font glyph vertex array.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d._GlyphInstances">
            <summary>
            Glyph instances array buffer.
            </summary>
            <remarks>
            Used only if GL_ARB_instanced_array is implemented
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d._GlyphUniformBuffer">
            <summary>
            Uniform buffer backing the instanced glyph uniform information.
            </summary>
            <remarks>
            Used only if GL_ARB_draw_instanced and GL_ARB_uniform_buffer_object are implemented.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d._FontTexture">
            <summary>
            Glyphs in texture array
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FontTextureArray2d._FontProgram">
            <summary>
            Shader program used for drawing font glyphs.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.IBindingIndexResource">
            <summary>
            Interface implemented by those objects that can be bound to a graphics context.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.IBindingIndexResource.ObjectName">
            <summary>
            Object name used for this IBindingIndexResource.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IBindingIndexResource.GetBindingTarget(OpenGL.Objects.GraphicsContext)">
            <summary>
            Get the identifier of the binding point.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="P:OpenGL.Objects.IBindingIndexResource.BindingIndex">
            <summary>
            Current binding point of the IBindingIndexResource.
            </summary>
            <remarks>
            The UNIFORM_BUFFER target has a binding index.
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.IFont">
            <summary>
            Font interface.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IFont.DrawString(OpenGL.Objects.GraphicsContext,OpenGL.Matrix4x4f,OpenGL.ColorRGBAF,System.String)">
            <summary>
            Draw a character sequence.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="modelview">
            The <see cref="T:OpenGL.Matrix4x4f"/> the model-view-projection matrix for the first character of <paramref name="s"/>.
            </param>
            <param name="color">
            The <see cref="T:OpenGL.ColorRGBAF"/> that specifies the glyph color.
            </param>
            <param name="s">
            A <see cref="T:System.String"/> that specifies the characters for be drawn.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ImageUnitState">
            <summary>
            The state of a <see cref="T:OpenGL.Objects.ImageUnit"/>.
            </summary>
            <remarks>
            Current texture object name is omitted due the resource management required.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ImageUnitState.Level">
            <summary>
            Level of bound texture object.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageUnitState.Layered">
            <summary>
            Texture object bound with multiple layers.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageUnitState.Layer">
            <summary>
            Layer of bound texture, if not layered.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageUnitState.Access">
            <summary>
            Read and/or write access for bound texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ImageUnitState.InternalFormat">
            <summary>
            Format used for accesses to bound texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ImageUnitState.op_Equality(OpenGL.Objects.ImageUnitState,OpenGL.Objects.ImageUnitState)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">
            A <see cref="T:OpenGL.Objects.ImageUnitState"/> to compare with <paramref name="right"/>.
            </param>
            <param name="right">
            A <see cref="T:OpenGL.Objects.ImageUnitState"/> to compare with <paramref name="left"/>.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="left"/> equals <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ImageUnitState.op_Inequality(OpenGL.Objects.ImageUnitState,OpenGL.Objects.ImageUnitState)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">
            A <see cref="T:OpenGL.Objects.ImageUnitState"/> to compare with <paramref name="right"/>.
            </param>
            <param name="right">
            A <see cref="T:OpenGL.Objects.ImageUnitState"/> to compare with <paramref name="left"/>.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="left"/> doesn't equals <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ImageUnitState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ImageUnitState.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ImageUnitState.Equals(OpenGL.Objects.ImageUnitState)">
            <summary>
            Returns a boolean value indicating whether this instance is equal to <paramref name="other"/>.
            </summary>
            <param name="other">
            The ImageUnitState to be compared with this ImageUnitState.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="other"/> equals to this instance.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.ImageUnit">
            <summary>
            Image unit abstraction.
            </summary>
            <remarks>
            The current texture object is loosely tracked using a <see cref="T:System.WeakReference"/>.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ImageUnit.#ctor(System.UInt32)">
            <summary>
            Construct an ImageUnit specifying its index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="F:OpenGL.Objects.ImageUnit.Index">
            <summary>
            The index of the ImageUnit.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ImageUnit.Texture">
            <summary>
            Get or set the texture currently bound on texture unit.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageUnit._Texture">
            <summary>
            Texture currently bound on texture unit.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ImageUnit.Bind(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Texture,OpenGL.Objects.ImageUnitState)">
            <summary>
            Bind a <see cref="P:OpenGL.Objects.ImageUnit.Texture"/> to this ImageUnit (core function).
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> managing this ImageUnit.
            </param>
            <param name="texture">
            The <see cref="T:System.UInt32"/> that specifies the name of the texture to be bound to this ImageUnit.
            </param>
            <param name="unitState">
            Specifies the state of the image unit.
            </param>
        </member>
        <member name="T:OpenGL.Objects.IShaderUniformContainer">
            <summary>
            Interface implemented by those classes able to store uniform values.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.IsActiveUniform(System.String)">
            <summary>
            Determine whether an uniform is active or not.
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> which specify the uniform name.
            </param>
            <returns>
            It returns a boolean value indicating whether the specified uniform is currently active.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single)">
            <summary>
            Set uniform state variable (floating-point variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2f)">
            <summary>
            Set uniform state variable (vec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3f)">
            <summary>
            Set uniform state variable (vec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4f)">
            <summary>
            Set uniform state variable (vec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single[])">
            <summary>
            Set uniform state variable (array of vec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:Single[]"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2f[])">
            <summary>
            Set uniform state variable (array of vec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:Vertex2f[]"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3f[])">
            <summary>
            Set uniform state variable (array of vec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:Vertex3f[]"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4f[])">
            <summary>
            Set uniform state variable (array of vec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:Vertex4f[]"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.ColorRGBAF)">
            <summary>
            Set uniform state variable (vec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.ColorRGBAF"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.ColorRGBAF[])">
            <summary>
            Set uniform state variable (array of vec4 variables).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:ColorRGBAF[]"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32)">
            <summary>
            Set uniform state variable (int variable or bool variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Int32"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2i)">
            <summary>
            Set uniform state variable (ivec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2i"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3i)">
            <summary>
            Set uniform state variable (ivec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3i"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4i)">
            <summary>
            Set uniform state variable (ivec4 variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4i"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32)">
            <summary>
            Set uniform state variable (uint variable or bool variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2ui)">
            <summary>
            Set uniform state variable (uvec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2ui"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3ui)">
            <summary>
            Set uniform state variable (uvec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3ui"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4ui)">
            <summary>
            Set uniform state variable (uvecu variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ui"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean)">
            <summary>
            Set uniform state variable (boolean variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Boolean"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set uniform state variable (bvec2 variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set uniform state variable (bvec3 variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set uniform state variable (bvec4 variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix3x3f)">
            <summary>
            Set uniform state variable (mat3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix4x4f)">
            <summary>
            Set uniform state variable (mat4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Objects.Texture)">
            <summary>
            Set uniform state variable (sampler1D, sampler2D, sampler3D, samplerCube variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture"/> holding the uniform variabile data (the texture name).
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double)">
            <summary>
            Set uniform state variable (double variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2d)">
            <summary>
            Set uniform state variable (dvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3d)">
            <summary>
            Set uniform state variable (dvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4d)">
            <summary>
            Set uniform state variable (dvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix3x3d)">
            <summary>
            Set uniform state variable (dmat3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix4x4d)">
            <summary>
            Set uniform state variable (dmat4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IShaderUniformContainer.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Object)">
            <summary>
            Set uniform state variable (any known object type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="value">
            A <see cref="T:System.Object"/> holding the uniform variabile data.
            </param>
            <remarks>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="uniformName"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.PixelLayoutExtensions">
            <summary>
            Extension methods for <see cref="T:OpenGL.PixelLayout"/> enumeration.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsColor(OpenGL.PixelLayout)">
            <summary>
            Determine whether a pixel type represents a color.
            </summary>
            <param name="type">
            This <see cref="T:OpenGL.PixelLayout"/> to test.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.ToInternalFormat(OpenGL.PixelLayout)">
            <summary>
            Determine the OpenGL internal format corresponding to a <see cref="T:OpenGL.PixelLayout"/>.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.PixelLayout"/> to determine the OpenGL internal format.
            </param>
            <returns>
            It returns a <see cref="T:System.Int32"/> corresponding to the OpenGL enumeration value
            for the pixel/textel internal format.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsSupportedInternalFormat(OpenGL.PixelLayout)">
            <summary>
            Determine whether a <see cref="T:OpenGL.PixelLayout"/> is supported by some OpenGL implementation as internal format.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.PixelLayout"/> to test for OpenGL support.
            </param>
            <returns>
            It returns a boolean value indicating whether the current OpenGL implementation supports for the pixel type <paramref name="type"/>. The
            OpenGL support means that texture data could be specified in the pixel format <paramref name="type"/>, and it is stored internally with
            the same pixel format.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.ToDataFormat(OpenGL.PixelLayout)">
            <summary>
            Determine the OpenGL format corresponding to a <see cref="T:OpenGL.PixelLayout"/>.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.PixelLayout"/> to determine the OpenGL format.
            </param>
            <returns>
            It returns a <see cref="T:System.Int32"/> corresponding to the OpenGL enumeration value
            for the pixel/textel format.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsSupportedDataFormat(OpenGL.PixelLayout)">
            <summary>
            Determine whether a <see cref="T:OpenGL.PixelLayout"/> is supported by current OpenGL implementation as data format.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.PixelLayout"/> to test for OpenGL support.
            </param>
            <returns>
            It returns a boolean value indicating whether the current OpenGL implementation supports for the pixel type <paramref name="type"/>. The
            OpenGL support means that texture data could be specified in the pixel format <paramref name="type"/>, but it could be stored in
            another pixel format.
            </returns>
            <remarks>
            The OpenGL support is dependent on what extensions have been implemented by current driver/hardware. The following
            capabilities are tested:
            - <see cref="F:OpenGL.Gl.Extensions.Bgra_EXT"/>
            - <see cref="F:OpenGL.Gl.Extensions.PackedPixels_EXT"/>
            - <see cref="F:OpenGL.Gl.Extensions.TextureSwizzle_ARB"/>
            - <see cref="F:OpenGL.Gl.Extensions.HalfFloatPixel_ARB"/>
            
            The main difference from <see cref="M:OpenGL.Objects.PixelLayoutExtensions.IsSupportedInternalFormat(OpenGL.PixelLayout)"/> is that the texture data submission could be specified using a pixel
            type <paramref name="type"/>, but OpenGL driver stores texture data internally using a different pixel format. This could lead to
            precision loss when specifying data from high-precision pixel formats (such as <see cref="F:OpenGL.PixelLayout.RGBF"/>. Indeed, it is implied that
            if IsSupportedInternalFormat(type) is true also IsSupportedSetDataFormat(type) is true (but not viceversa).
            
            
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsSupportedSetDataFormat(OpenGL.PixelLayout,OpenGL.PixelLayout)">
            <summary>
            Determine whether a <see cref="T:OpenGL.PixelLayout"/> is supported by current OpenGL implementation as data format for uploading
            texture data with a specific internal format.
            </summary>
            <param name="dataFormat">
            A <see cref="T:OpenGL.PixelLayout"/> to test for OpenGL support as data format in conjunction with the internal format <paramref name="internalFormat"/>.
            </param>
            <param name="internalFormat">
            A <see cref="T:OpenGL.PixelLayout"/> that specify the texture internal format.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsSupportedGetDataFormat(OpenGL.PixelLayout,OpenGL.PixelLayout)">
            <summary>
            Determine whether a <see cref="T:OpenGL.PixelLayout"/> is supported by current OpenGL implementation as data format for downloading
            texture data with a specific internal format.
            </summary>
            <param name="texFormat">
            The underlying texture internal format.
            </param>
            <param name="imgFormat">
            
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.ToPixelType(OpenGL.PixelLayout)">
            <summary>
            Determine the OpenGL data format corresponding to a <see cref="T:OpenGL.PixelLayout"/>.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.PixelLayout"/> to determine the OpenGL data format.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.PixelType"/> corresponding to <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsUnsignedPixel(OpenGL.PixelLayout)">
            <summary>
            Determine whether a PixelLayout represents a unsigned integer (normalized) pixel.
            </summary>
            <param name="type">
            This <see cref="T:OpenGL.PixelLayout"/> to test.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsFloatPixel(OpenGL.PixelLayout)">
            <summary>
            Determine whether a PixelLayout represents a (single/double/half precision) floating-point pixel.
            </summary>
            <param name="type">
            This <see cref="T:OpenGL.PixelLayout"/> to test.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsIntegerPixel(OpenGL.PixelLayout)">
            <summary>
            Determine whether a PixelLayout represents an integral pixel.
            </summary>
            <param name="type">
            This <see cref="T:OpenGL.PixelLayout"/> to test.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsSignedIntegerPixel(OpenGL.PixelLayout)">
            <summary>
            Determine whether a PixelLayout represents an integral pixel.
            </summary>
            <param name="type">
            This <see cref="T:OpenGL.PixelLayout"/> to test.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.PixelLayoutExtensions.IsUnsignedIntegerPixel(OpenGL.PixelLayout)">
            <summary>
            Determine whether a PixelLayout represents an integral pixel.
            </summary>
            <param name="type">
            This <see cref="T:OpenGL.PixelLayout"/> to test.
            </param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.Sampler">
            <summary>
            Texture sampler object.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Sampler.#ctor">
            <summary>
            Construct the default Sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Sampler.Parameters">
            <summary>
            Sampler parameters.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Sampler._ObjectParams">
            <summary>
            Currently applied sampler parameters.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Sampler.ThisObjectClass">
            <summary>
            Texture object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Sampler.ObjectClass">
            <summary>
            Texture object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Sampler.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this Texture really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this Texture exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this Texture (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Sampler.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            .
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Sampler.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a Texture name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns a valid object name for this Texture.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Sampler.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a Texture name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Sampler.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.SamplerParameters">
            <summary>
            Sampler parameters.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.SamplerParameters.MinFilter">
            <summary>
            Minification filter.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.SamplerParameters.MagFilter">
            <summary>
            Magnification filter.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.SamplerParameters.WrapCoordS">
            <summary>
            Wrapping on S coordinate.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.SamplerParameters.WrapCoordT">
            <summary>
            Wrapping on T coordinate.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.SamplerParameters.WrapCoordR">
            <summary>
            Wrapping on R coordinate.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.SamplerParameters.CompareMode">
            <summary>
            Enable texture compararison.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.SamplerParameters.CompareFunc">
            <summary>
            Texture comparison function.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.SamplerParameters.Clone">
            <summary>
            Clone this SamplerParameters.
            </summary>
            <returns>
            It returns a clone of this SamplerParameters.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneGraphFlags">
            <summary>
            Flags controlling the <see cref="T:OpenGL.Objects.Scene.SceneGraph"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphFlags.None">
            <summary>
            No flags placeholder.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphFlags.CullingViewFrustum">
            <summary>
            Culling based on view-frustum.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphFlags.StateSorting">
            <summary>
            Sort scene objects depending on their state.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphFlags.BoundingVolumes">
            <summary>
            Bounding boxes are visible.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphFlags.Lighting">
            <summary>
            Light management.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphFlags.ShadowMaps">
            <summary>
            Shadow maps are updated.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneGraphSorter">
            <summary>
            Scene graph object sorter.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraphSorter.Sort(System.Collections.Generic.List{OpenGL.Objects.Scene.SceneObjectBatch})">
            <summary>
            Sort a sequence of <see cref="T:OpenGL.Objects.Scene.SceneObjectBatch"/>.
            </summary>
            <param name="objects">
            A <see cref="T:System.Collections.Generic.List`1"/> indicating the sequence of scene objects to be sorted.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.List`1"/> containing all objects found in <paramref name="objects"/>, but
            ordered following the concrete implementation criteria.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraphSorter.Split(System.Collections.Generic.List{OpenGL.Objects.Scene.SceneObjectBatch})">
            <summary>
            Split the input sequence into smaller sequences, associated to a <see cref="T:OpenGL.Objects.Scene.SceneGraphSorter"/> used for sorting recursively
            the individual sequences.
            </summary>
            <param name="objects">
            A <see cref="T:System.Collections.Generic.List`1"/> indicating the sequence of scene objects to be splitted in sub-sequences.
            </param>
            <returns>
            It returns a <see cref="T:KeyValuePair{SceneGraphSorter, List{SceneObjectBatch}}[]"/> indicating a set of <see cref="T:System.Collections.Generic.List`1"/>
            associated to a <see cref="T:OpenGL.Objects.Scene.SceneGraphSorter"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectSorterBinary">
            <summary>
            Scene graph object sorter, binary filtering (useful for simplae states).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectSorterBinary.Split(System.Collections.Generic.List{OpenGL.Objects.Scene.SceneObjectBatch})">
            <summary>
            Split the input sequence into smaller sequences, associated to a <see cref="T:OpenGL.Objects.Scene.SceneGraphSorter"/> used for sorting recursively
            the individual sequences.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectSorterCompare.Sort(System.Collections.Generic.List{OpenGL.Objects.Scene.SceneObjectBatch})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectSorterProgram.Split(System.Collections.Generic.List{OpenGL.Objects.Scene.SceneObjectBatch})">
            <summary>
            Split the input sequence into smaller sequences, associated to a <see cref="T:OpenGL.Objects.Scene.SceneGraphSorter"/> used for sorting recursively
            the individual sequences.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneLightManager">
            <summary>
            Manage lights in <see cref="T:OpenGL.Objects.Scene.SceneGraph"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneLightManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneLightManager.CurrentZone">
            <summary>
            The current zone.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneLightManager._LightState">
            <summary>
            The light state reflecting the current
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneLightManager.ShadowLights">
            <summary>
            Light found in <see cref="!:_Lights"/>, but requiring a shadow map generation.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectBatch.#ctor(OpenGL.Objects.VertexArrays,OpenGL.Objects.State.GraphicsStateSet,OpenGL.Objects.ShaderProgram)">
            <summary>
            Construct an SceneObjectBatch.
            </summary>
            <param name="vertexArray">
            
            </param>
            <param name="state"></param>
            <param name="program"></param>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectBatch.Program">
            <summary>
            Optional shader program used for drawing.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectBatch._Program">
            <summary>
            Optional shader program used for drawing.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectBatch.VertexArray">
            <summary>
            Vertex arrays to be rasterized.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectBatch._VertexArray">
            <summary>
            Vertex arrays to be rasterized.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectBatch.State">
            <summary>
            Current state to be applied to <see cref="P:OpenGL.Objects.Scene.SceneObjectBatch.Program"/> and the current server state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectBatch.Draw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Draw this batch.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectBatch.Draw(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Draw this batch.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="programOverride">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> that overrides the default one used for rendering the batch. It can be null.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodecWavefront">
            <summary>
            Basic <see cref="T:OpenGL.Objects.IImageCodecPlugin"/> implementation based on actual .NET framework implementation.
            </summary>
            <remarks>
            OBJ file format: http://www.martinreddy.net/gfx/3d/OBJ.spec
            MTL file format: http://www.fileformat.info/format/material/
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial">
            <summary>
            OBJ material.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.#ctor(System.String)">
            <summary>
            Construct a ObjMaterial.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the material.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.Name">
            <summary>
            Material name.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.Ambient">
            <summary>
            Ambient color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.AmbientTexture">
            <summary>
            Ambient texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.Diffuse">
            <summary>
            Diffuse color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.DiffuseTexture">
            <summary>
            Diffuse texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.Specular">
            <summary>
            Specular color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.SpecularTexture">
            <summary>
            Specular texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.SpecularExponent">
            <summary>
            Specular exponent.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.NormalTexture">
            <summary>
            Normal texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.op_Equality(OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial,OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.op_Inequality(OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial,OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.Equals(OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial)">
            <summary>
            Indicates whether the this ObjMaterial is equal to another ObjMaterial.
            </summary>
            <param name="other">
            An ObjMaterial to compare with this object.
            </param>
            <returns>
            It returns true if the this ObjMaterial is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjMaterial.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjFaceCoord">
            <summary>
            OBJ face vertex coordinate indices.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjFace">
            <summary>
            OBJ face polygon.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjGeometry">
            <summary>
            OBJ geometry (faces combined with material)
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjGeometry.Material">
            <summary>
            Material used for drawing the geometry.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjGeometry.Faces">
            <summary>
            Faces compositing the geometry.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjGroup">
            <summary>
            OBJ group (geometries belonging to the same object)
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodecWavefront.ObjContext">
            <summary>
            OBJ context.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectCodecWavefront.Name">
            <summary>
            Plugin name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.CheckAvailability">
            <summary>
            Determine whether this plugin is available for the current process.
            </summary>
            <returns>
            It returns a boolean value indicating whether the plugin is available for the current
            process.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectCodecWavefront.SupportedReadFormats">
            <summary>
            Gets the list of media formats supported for reading.
            </summary>
            <value>
            The supported formats which this media codec plugin can read.
            </value>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.IsReadSupported(System.String)">
            <summary>
            Check whether an media format is supported for reading.
            </summary>
            <param name="format">
            A <see cref="T:System.String"/> that specify the media format to test for read support.
            </param>
            <returns>
            A <see cref="T:OpenGL.Boolean"/> indicating whether <paramref name="format"/> is supported.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectCodecWavefront.SupportedWriteFormats">
            <summary>
            Gets the list of media formats supported for writing.
            </summary>
            <value>
            The supported formats which this media codec plugin can write.
            </value>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.IsWriteSupported(System.String)">
            <summary>
            Check whether an media format is supported for writing.
            </summary>
            <param name="format">
            An <see cref="T:System.String"/> that specify the media format to test for write support.
            </param>
            <returns>
            A <see cref="T:OpenGL.Boolean"/> indicating whether <paramref name="format"/> is supported.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.GetPriority(System.String)">
            <summary>
            Determine the plugin priority for a certain sceneObject format.
            </summary>
            <param name="format">
            An <see cref="T:OpenGL.Objects.Scene.SceneObjectFormat"/> specifying the sceneObject format to test for priority.
            </param>
            <returns>
            It returns an integer value indicating the priority of this implementation respect other ones supporting the same
            sceneObject format. Conventionally, a value of 0 indicates a totally impartial plugin implementation; a value less than 0 indicates
            a more confident implementation respect other plugins; a value greater than 0 indicates a fallback implementation respect other
            plugins.
            
            This implementation of this routine returns -1. The reasoning is that this plugin implementation is very slow in Query and Load, due
            the .NET abstraction. However, it is a very usefull fallback plugin since it can open the most of common sceneObject formats.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.QueryInfo(System.String,OpenGL.Objects.Scene.SceneObjectCodecCriteria)">
            <summary>
            Query media informations.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the media path.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <see cref="T:OpenGL.Objects.Scene.SceneObjectInfo"/> containing information about the specified media.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.QueryInfo(System.IO.Stream,OpenGL.Objects.Scene.SceneObjectCodecCriteria)">
            <summary>
            Query media informations.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the media path.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <see cref="T:OpenGL.Objects.Scene.SceneObjectInfo"/> containing information about the specified media.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.Load(System.String,OpenGL.Objects.Scene.SceneObjectCodecCriteria)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <see cref="T:OpenGL.Objects.Scene.SceneObject"/> holding the media data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.Load(System.IO.Stream,OpenGL.Objects.Scene.SceneObjectCodecCriteria)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <see cref="T:OpenGL.Objects.Scene.SceneObject"/> holding the media data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.Save(System.String,OpenGL.Objects.Scene.SceneObject,System.String,OpenGL.Objects.Scene.SceneObjectCodecCriteria)">
            <summary>
            Save media to stream.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the media path.
            </param>
            <param name="sceneObject">
            A <see cref="T:OpenGL.Objects.Scene.SceneObject"/> holding the data to be stored.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that specify the media format to used for saving <paramref name="sceneObject"/>.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an sceneObject stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/>, <paramref name="sceneObject"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecWavefront.Save(System.IO.Stream,OpenGL.Objects.Scene.SceneObject,System.String,OpenGL.Objects.Scene.SceneObjectCodecCriteria)">
            <summary>
            Save media to stream.
            </summary>
            <param name="stream">
            A <see cref="!:IO.Stream"/> which stores the media data.
            </param>
            <param name="sceneObject">
            A <see cref="T:OpenGL.Objects.Scene.SceneObject"/> holding the data to be stored.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that specify the media format to used for saving <paramref name="sceneObject"/>.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an sceneObject stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/>, <paramref name="sceneObject"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectFlags">
            <summary>
            Flags controlling the <see cref="T:OpenGL.Objects.Scene.SceneObject"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectFlags.BoundingBox">
            <summary>
            The bounding-box is visible.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectFormat">
            <summary>
            Known scene object container format enumeration.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectFormat.Wavefront">
            <summary>
            Windows bitmap container.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodecCriteria">
            <summary>
            Scene object codec criteria.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodecCriteria.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.ISceneObjectCodecPlugin">
            <summary>
            Interface implemented by external plugins loaded by <see cref="T:OpenGL.Objects.ImageCodec"/>.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCodec">
            <summary>
            Image coder/decoder.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodec.Instance">
            <summary>
            The only instance of SceneObjectCodec.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodec.#ctor">
            <summary>
            This type is a singleton.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCodec.PluginFactoryType">
            <summary>
            The type which following plugin factory conventions.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodec.Load(System.IO.Stream,System.String,OpenGL.Objects.Scene.SceneObjectCodecCriteria)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="format">
            The <see cref="!:String"/> which defines the format of the stream data.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
            <exception cref="!:ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
            <exception cref="!:ArgumentException">
            Exception thrown if <paramref name="stream"/> is not readable or seekable.
            </exception>
            <exception cref="!:InvalidOperationException">
            Exception thrown if no plugin is available for <paramref name="format"/> (filtered by
            <paramref name="criteria"/>) or all plugins are not able to load media from
            <paramref name="stream"/>.
            </exception>
            <exception cref="!:NotSupportedException">
            Exception thrown if <paramref name="format"/> is not supported by any loaded plugin.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCodec.CreateDefaultMediaCodecCriteria">
            <summary>
            Creates the default media codec criteria.
            </summary>
            <returns>
            The default media codec criteria.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectGeometryFlags">
            <summary>
            Flags for controlling <see cref="T:OpenGL.Objects.Scene.SceneObjectGeometry"/> aspects.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometryFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometryFlags.ShadowCaster">
            <summary>
            Geometries cast shadows.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometryFlags.ShadowReceiver">
            <summary>
            Geometries receive shadows.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectInfo">
            <summary>
            Generic scene object informations.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectInfo.TagContainerFormat">
            <summary>
            The media semantic
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectInfo.ContainerFormat">
            <summary>
            The image container format.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.BoundingBox">
            <summary>
            Bounding box.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.BoundingBox.#ctor(OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:OpenGL.Objects.Scene.BoundingBox.#ctor(OpenGL.Vertex3f,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="d"></param>
        </member>
        <member name="F:OpenGL.Objects.Scene.BoundingBox._Bounds">
            <summary>
            Box vertices bounds.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.BoundingBox.Position">
            <summary>
            Offset of the bounding volume w.r.t. the underlying object origin.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.BoundingBox.Radius">
            <summary>
            Minimum distance at which the volume cannot be intersected w.r.t. <see cref="P:OpenGL.Objects.Scene.BoundingBox.Position"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.BoundingBox.IsClipped(System.Collections.Generic.IEnumerable{OpenGL.Planef},OpenGL.Matrix4x4f)">
            <summary>
            Determine whether this bound volume is clipped by all specified planes.
            </summary>
            <param name="clippingPlanes">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that are used to perform geometry clipping.
            </param>
            <returns>
            It returns a boolean value indicating whether this bound volume is entirely
            clipped by <paramref name="clippingPlanes"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.IBoundingVolume">
            <summary>
            Interface for describing a volume bounding a geometry.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.IBoundingVolume.Position">
            <summary>
            Offset of the bounding volume w.r.t. the underlying object origin.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.IBoundingVolume.Radius">
            <summary>
            Minimum distance at which the volume cannot be intersected w.r.t. <see cref="P:OpenGL.Objects.Scene.IBoundingVolume.Position"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.IBoundingVolume.IsClipped(System.Collections.Generic.IEnumerable{OpenGL.Planef},OpenGL.Matrix4x4f)">
            <summary>
            Determine whether this bound volume is clipped by all specified planes.
            </summary>
            <param name="clippingPlanes">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that are used to perform geometry clipping.
            </param>
            <param name="viewModel">
            
            </param>
            <returns>
            It returns a boolean value indicating whether this bound volume is entirely
            clipped by <paramref name="clippingPlanes"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneGraph">
            <summary>
            Directed graphs of <see cref="T:OpenGL.Objects.Scene.SceneObject"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.#ctor">
            <summary>
            Construct a SceneGraph.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.#ctor(OpenGL.Objects.Scene.SceneGraphFlags)">
            <summary>
            Construct a SceneGraph.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.#ctor(OpenGL.Objects.Scene.SceneGraph,OpenGL.Objects.Scene.SceneGraphFlags)">
            <summary>
            Construct a SceneGraph.
            </summary>
            <param name="otherScene">
            The <see cref="T:OpenGL.Objects.Scene.SceneGraph"/> to be copied.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.Touch">
            <summary>
            Force static initialization for this class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneGraph.ProjectionMatrix">
            <summary>
            The projection matrix.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneGraph.ViewMatrix">
            <summary>
            The local model: the transformation of the current vertex arrays object space, without considering
            inherited transform states of parent objects.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneGraph.CurrentView">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraph._CurrentView">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.UpdateViewMatrix">
            <summary>
            Set current graph view to <see cref="P:OpenGL.Objects.Scene.SceneGraph.CurrentView"/>.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneGraph.SceneRoot">
            <summary>
            Get or set the <see cref="T:OpenGL.Objects.Scene.SceneObject"/> defining the scene.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraph._SceneRoot">
            <summary>
            The <see cref="T:OpenGL.Objects.Scene.SceneObject"/> defining the scene.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneGraph.SceneFlags">
            <summary>
            Get or set the scene graph flags.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraph._Flags">
            <summary>
            Scene graph flags.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.Draw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Draw this SceneGraph.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.Draw(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Draw this SceneGraph.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="programOverride">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> that overrides the default one used for rendering the batch. It can be null.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.GraphDrawDelegate(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraphContext,OpenGL.Objects.Scene.SceneObject,System.Object)">
            <summary>
            Traverse delegate for collecting geometries to be drawn.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="ctxScene"></param>
            <param name="sceneObject"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneGraph.ObjectBatchContext">
            <summary>
            Context used for pass information during scene graph traversal.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraph.ObjectBatchContext.Objects">
            <summary>
            Objects to be drawn.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraph._TraverseDrawContext">
            <summary>
            The <see cref="T:OpenGL.Objects.Scene.SceneObject.TraverseContext"/> used for processing the scene graph
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraph._ShadowMapDebugProgram">
            <summary>
            Program used for drawing shadow maps.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraph._ShadowMapQuad">
            <summary>
            Quadrilateral for drawing shadow maps.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraph._LightManager">
            <summary>
            The scene graph light manager.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraph.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectCamera">
            <summary>
            Scene object representing a view point.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCamera.#ctor">
            <summary>
            Construct a SceneObjectCamera.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCamera.#ctor(System.String)">
            <summary>
            Construct a SceneObjectCamera.
            </summary>
            <param name="id">
            A <see cref="!:String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectCamera.Touch">
            <summary>
            Force static initialization for this class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectCamera.ProjectionMatrix">
            <summary>
            Get or set the projection for this SceneGraphCameraObject.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectCamera.ObjectType">
            <summary>
            Get the object type. Used for avoiding reflection.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectCamera.ClassObjectType">
            <summary>
            Get the object type of this SceneObject class.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectCamera._ObjectType">
            <summary>
            The object identifier for this class of SceneObject.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneGraphContext">
            <summary>
            Context used for drawing a SceneGraph.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphContext.Scene">
            <summary>
            The scene currently rendering.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphContext.GraphicsStateStack">
            <summary>
            The <see cref="T:OpenGL.Objects.State.GraphicsStateSetStack"/> supporting state variation during the scene graph traversal.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneGraphContext.ViewFrustumPlanes">
            <summary>
            Pre-compute view-frustum planes to cull scene objects.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneGraphContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObject">
            <summary>
            Scene object.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.#ctor">
            <summary>
            Construct a SceneGraphObject.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.#ctor(System.String)">
            <summary>
            Construct a SceneGraphObject.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.ObjectType">
            <summary>
            Get the object type. Used for avoiding reflection.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.ObjectTypesCount">
            <summary>
            The the count of the known object types.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.NextObjectType">
            <summary>
            Get the next unused object type.
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._ObjectType">
            <summary>
            Tracking object identifier.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.Link(OpenGL.Objects.Scene.SceneObject)">
            <summary>
            Link a <see cref="T:OpenGL.Objects.Scene.SceneObject"/> as child of this instance.
            </summary>
            <param name="sceneObject">
            The <see cref="T:OpenGL.Objects.Scene.SceneObject"/> to be included in the children list of this instance.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.Unlink">
            <summary>
            Unlink this SceneObject from the graph.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.Unlink(System.Predicate{OpenGL.Objects.Scene.SceneObject})">
            <summary>
            Remove all <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instances matching a predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the objects to remove.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Boolean"/> that indicates whether at least an object was removed from the graph.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.Unlink(System.Predicate{OpenGL.Objects.Scene.SceneObject},System.Boolean)">
            <summary>
            Remove all <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instances matching a predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the objects to remove.
            </param>
            <param name="recurse">
            A <see cref="T:OpenGL.Boolean"/> indicating whether the operation shall be recursed on the graph hierarchy.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Boolean"/> that indicates whether at least an object was removed from the graph.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._ParentObject">
            <summary>
            The SceneGraphObject that links this instance to the scene graph. If it null, this
            instance is the root node.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._Children">
            <summary>
            Children drawn after this SceneGraphObject.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObject.TraverseBaseDelegate">
            <summary>
            Delegate for visiting <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instanced during scene graph traversal.
            </summary>
            <param name="sceneObject">
            The <see cref="T:OpenGL.Objects.Scene.SceneObject"/> currently visited by the delegate function.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Boolean"/> indicating whether the traversal function shall continue.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObject.TraverseDelegate">
            <summary>
            Delegate for visiting <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instanced during scene graph traversal.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing/updating objects, if any.
            </param>
            <param name="ctxScene">
            The <see cref="T:OpenGL.Objects.Scene.SceneGraphContext"/> used for drawing/updating objects, if any.
            </param>
            <param name="sceneObject">
            The <see cref="T:OpenGL.Objects.Scene.SceneObject"/> currently visited by the delegate function.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Boolean"/> indicating whether the traversal function shall continue.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObject.TraverseContext">
            <summary>
            Context holding information for executing scene graph traversal.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.TraverseContext.#ctor(OpenGL.Objects.Scene.SceneObject.TraverseDelegate)">
            <summary>
            Construct a TraverseContext.
            </summary>
            <param name="visit">
            The <see cref="T:OpenGL.Objects.Scene.SceneObject.TraverseDelegate"/> used for visiting the underlying scene graph nodes.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="visit"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.TraverseContext.#ctor(OpenGL.Objects.Scene.SceneObject.TraverseDelegate,OpenGL.Objects.Scene.SceneObject.TraverseDelegate,OpenGL.Objects.Scene.SceneObject.TraverseDelegate)">
            <summary>
            Construct a TraverseContext.
            </summary>
            <param name="visit">
            The <see cref="T:OpenGL.Objects.Scene.SceneObject.TraverseDelegate"/> used for visiting the underlying scene graph nodes.
            </param>
            <param name="pre">
            The <see cref="T:OpenGL.Objects.Scene.SceneObject.TraverseDelegate"/> executed before <paramref name="visit"/>. It can be null.
            </param>
            <param name="post">
            The <see cref="T:OpenGL.Objects.Scene.SceneObject.TraverseDelegate"/> executed after <paramref name="visit"/>. It can be null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="visit"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject.TraverseContext.Visit">
            <summary>
            Visit the underlying node.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject.TraverseContext.PreContract">
            <summary>
            Function executed before <see cref="F:OpenGL.Objects.Scene.SceneObject.TraverseContext.Visit"/>. It can be null.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject.TraverseContext.PostContract">
            <summary>
            Function executed after <see cref="F:OpenGL.Objects.Scene.SceneObject.TraverseContext.Visit"/>. It can be null.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.TraverseDirect(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraphContext,OpenGL.Objects.Scene.SceneObject.TraverseContext,System.Object)">
            <summary>
            Traverse the scene graph from the current SceneObject to the leaf SceneObject.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing/updating objects, if any.
            </param>
            <param name="ctxScene">
            The <see cref="T:OpenGL.Objects.Scene.SceneGraphContext"/> used for drawing/updating objects, if any.
            </param>
            <param name="traverseFunc">
            The <see cref="T:OpenGL.Objects.Scene.SceneObject.TraverseDelegate"/> executed for each SceneObject instance visited during traversal.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="traverseFunc"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.FindChildren(System.Predicate{OpenGL.Objects.Scene.SceneObject})">
            <summary>
            Find all <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instances matching a predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the objects to find.
            </param>
            <param name="recurse">
            A <see cref="T:OpenGL.Boolean"/> indicating whether the operation shall be recursed on the graph hierarchy.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.ICollection`1"/> holding all <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instances
            found by this method.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.FindChildren(System.Predicate{OpenGL.Objects.Scene.SceneObject},System.Boolean)">
            <summary>
            Find all <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instances matching a predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the objects to find.
            </param>
            <param name="recurse">
            A <see cref="T:OpenGL.Boolean"/> indicating whether the operation shall be recursed on the graph hierarchy.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.ICollection`1"/> holding all <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instances
            found by this method.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.FindChild(System.Predicate{OpenGL.Objects.Scene.SceneObject})">
            <summary>
            Find the first <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instance matching a predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the objects to find.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.ICollection`1"/> holding all <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instances
            found by this method.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.FindChild(System.Predicate{OpenGL.Objects.Scene.SceneObject},System.Boolean)">
            <summary>
            Find the first <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instance matching a predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the objects to find.
            </param>
            <param name="recurse">
            A <see cref="T:OpenGL.Boolean"/> indicating whether the operation shall be recursed on the graph hierarchy.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.ICollection`1"/> holding all <see cref="T:OpenGL.Objects.Scene.SceneObject"/> instances
            found by this method.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.LocalProjection">
            <summary>
            The local projection: the projection matrix of the current vertex arrays, without considering inherited
            transform states of parent objects. It can be null to specify whether the projection is inherited from the
            previous state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.LocalModelView">
            <summary>
            The local model: the transformation of the current vertex arrays object space, without considering
            inherited transform states of parent objects.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._LocalModelView">
            <summary>
            Backend value for LocalModelView.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.LocalModelViewProjection">
            <summary>
            The local model: the transformation of the current vertex arrays object space, without considering
            inherited transform states of parent objects.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.WorldModel">
            <summary>
            The world model: the transform of the current vertex arrays object space, considering inherited
            transform states from parent objects.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.ObjectFlags">
            <summary>
            Get or set the scene graph flags (not recursive).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._Flags">
            <summary>
            Scene object flags.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._FlagsRecursive">
            <summary>
            Flags indicating which values are recursive.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.GetGeometries(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraphContext)">
            <summary>
            Get geometries related to this object.
            </summary>
            <param name="ctx"></param>
            <param name="ctxScene"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject.ObjectState">
            <summary>
            The state relative to this SceneGraphObject.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.BoundingVolume">
            <summary>
            Set bounding volume used for testing visibility.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._BoundingVolume">
            <summary>
            Bounding volume used for testing visibility.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._BoundingVolumeDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <remarks>
            All resources linked with <see cref="!:LinkResource(IGraphicsResource)"/> will be automatically created.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObject.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:OpenGL.Boolean"/> indicating whether this method is called by <see cref="!:Dispose()"/>. If it is false,
            this method is called by the finalizer.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObject.MediaInformation">
            <summary>
            Gets the media information of this instance.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObject._SceneObjectInfo">
            <summary>
            Media information.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectGeometry">
            <summary>
            Scene object representing a geometry.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.#ctor">
            <summary>
            Construct a SceneObjectGeometry.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.#ctor(System.String)">
            <summary>
            Construct a SceneObjectGeometry.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.#ctor(System.String,OpenGL.Objects.VertexArrays,OpenGL.Objects.ShaderProgram)">
            <summary>
            Construct a SceneObjectGeometry.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
            <param name="vertexArray">
            A <see cref="T:OpenGL.Objects.VertexArrays"/> that specifies the geometry primitive arrays.
            </param>
            <param name="program">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> that specifies the program used for shading <paramref name="vertexArray"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="vertexArray"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.Touch">
            <summary>
            Force static initialization for this class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectGeometry.VertexArray">
            <summary>
            Get or set the geometry primitive arrays, shared to all geometry instances, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry._VertexArray">
            <summary>
            Primitive arrays.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectGeometry.ProgramTag">
            <summary>
            Shader tag used for creating the actual program at run-time. The program is shared , shared to all
            geometry instances, if any
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectGeometry.Program">
            <summary>
            Get or set the shader used for drawing the geometry. It is automatically created if this property
            is null and <see cref="P:OpenGL.Objects.Scene.SceneObjectGeometry.ProgramTag"/> is not null. The program is shared , shared to all
            geometry instances, if any
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry._Program">
            <summary>
            Shader used for drawing the geometry.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry.Flags">
            <summary>
            Geometry object flags.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectGeometry.Geometry">
            <summary>
            Geometry instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.Geometry.#ctor(OpenGL.Objects.VertexArrays,OpenGL.Objects.State.GraphicsStateSet,OpenGL.Objects.ShaderProgram)">
            <summary>
            Construct an Geometry.
            </summary>
            <param name="vertexArray">
            
            </param>
            <param name="state"></param>
            <param name="program"></param>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectGeometry.Geometry.ProgramTag">
            <summary>
            Shader tag used for creating the actual program at run-time.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.Geometry.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Allocate resources requires for rendering this geometry.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry.Geometry.BoundingVolume">
            <summary>
            Bounding volume for <see cref="P:OpenGL.Objects.Scene.SceneObjectGeometry.Geometry.VertexArray"/>, if any.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectGeometry.Geometry.VertexArray">
            <summary>
            Vertex arrays to be rasterized.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.GetGeometries(OpenGL.Objects.State.GraphicsStateSet)">
            <summary>
            Get all geometries compositing this SceneObjectGeometry.
            </summary>
            <param name="currentState">
            A <see cref="T:OpenGL.Objects.State.GraphicsStateSet"/> that specifies the current graphics state to be merged with
            each returned geometry.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.GetGeometriesViewFrustum(OpenGL.Objects.Scene.SceneGraphContext)">
            <summary>
            Get all geometries compositing this SceneObjectGeometry, filtering them using view-frustum.
            </summary>
            <param name="currentState">
            A <see cref="T:OpenGL.Objects.State.GraphicsStateSet"/> that specifies the current graphics state to be merged with
            each returned geometry.
            </param>
            <param name="clippingPlanes">
            
            </param>
            <param name="viewModel">
            
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry._GeometryInstances">
            <summary>
            Geometry instances.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.ComputeBoundingVolume(OpenGL.Objects.VertexArrays)">
            <summary>
            Automatically computes bounding box for the specified vertex arrays.
            </summary>
            <param name="vertexArrayObject">
            
            </param>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.Scene.IBoundingVolume"/> for <paramref name="vertexArrayObject"/>, if possible.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry._BoundingVolume">
            <summary>
            Bounding volume for <see cref="P:OpenGL.Objects.Scene.SceneObjectGeometry.VertexArray"/>, if any.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.CreateBoundingVolumeArrays(OpenGL.Objects.Scene.IBoundingVolume)">
            <summary>
            Create vertex arrays representing the <see cref="T:OpenGL.Objects.Scene.IBoundingVolume"/>, using lines delimiting the box volume.
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.CreateBoundingBoxArrays">
            <summary>
            Create vertex arrays representing the bounding box, using lines delimiting the box volume.
            </summary>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexArrays"/> representing a normalized bounding box volume.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry._BoundingVolumeArray">
            <summary>
            Vertex arrays for drawing bounding boxes.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry._BoundingVolumeProgram">
            <summary>
            Shader program used for drawing bounding volumes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectGeometry.ObjectType">
            <summary>
            Get the object type. Used for avoiding reflection.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectGeometry.ClassObjectType">
            <summary>
            Get the object type of this SceneObject class.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectGeometry._ObjectType">
            <summary>
            The object identifier for this class of SceneObject.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.GetGeometries(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraphContext)">
            <summary>
            Get geometries related to this object.
            </summary>
            <param name="ctx"></param>
            <param name="ctxScene"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <remarks>
            All resources linked with <see cref="!:LinkResource(IGraphicsResource)"/> will be automatically created.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectGeometry.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:OpenGL.Boolean"/> indicating whether this method is called by <see cref="!:Dispose()"/>. If it is false,
            this method is called by the finalizer.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectLightSpot">
            <summary>
            Base class for defining scene lighting.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightSpot.#ctor">
            <summary>
            Construct a SceneObjectLightSpot.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightSpot.#ctor(System.String)">
            <summary>
            Construct a SceneObjectLightSpot.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot.Direction">
            <summary>
            Direction of the spot.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot.FalloffAngle">
            <summary>
            Fall-off angle, in degrees.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot.FalloffExponent">
            <summary>
            Fall-off exponent.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLightSpot.LightMatrix">
            <summary>
            The matrix describing the orientation of the spot light.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLightSpot.ShadowMapSize">
            <summary>
            Get or set the shadow map size, in pixels.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot._ShadowMapSize">
            <summary>
            Shadow map size, in pixels.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLightSpot.ShadowMapFormat">
            <summary>
            Get or set the shadow map size, in pixels.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot._ShadowMapFormat">
            <summary>
            Shadow map internal format.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot._ShadowFramebuffer">
            <summary>
            Framebuffer for shadow map generation.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot._ShadowMap">
            <summary>
            Shadow map.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot._ShadowProgram">
            <summary>
            Shadow program.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot._ShadowViewMatrix">
            <summary>
            The matrix required for projecting world space vertex to light view space.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot._BoundingVolumeArrays">
            <summary>
            Arrays used for representing the light bounding volume.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightSpot._BoundingVolumeProgram">
            <summary>
            Program used for drawing <see cref="F:OpenGL.Objects.Scene.SceneObjectLightSpot._BoundingVolumeArrays"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightSpot.ToLight(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraphContext)">
            <summary>
            Create the corresponding <see cref="T:OpenGL.Objects.State.LightsState.Light"/> for this object.
            </summary>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.State.LightsState.Light"/> equivalent to this SceneObjectLight.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLightSpot.ShadowTexture">
            <summary>
            The shadow map texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightSpot.LinkShadowMapResources(OpenGL.Objects.GraphicsContext)">
            <summary>
            Allocate resources required for shadow mapping.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightSpot.UpdateShadowMap(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraph)">
            <summary>
            Update shadow map.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightSpot.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectLightPoint">
            <summary>
            Base class for defining scene lighting.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightPoint.#ctor">
            <summary>
            Construct a SceneObjectLightPoint.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightPoint.#ctor(System.String)">
            <summary>
            Construct a SceneObjectLightPoint.
            </summary>
            <param name="id">
            A <see cref="!:String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightPoint.AttenuationFactors">
            <summary>
            The light attenuation factors (X: constant; Y: linear; Z: quadratic; used by point and spot lights).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightPoint.ToLight(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraphContext)">
            <summary>
            Create the corresponding <see cref="T:OpenGL.Objects.State.LightsState.Light"/> for this object.
            </summary>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.State.LightsState.Light"/> equivalent to this SceneObjectLight.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectLightDirectional">
            <summary>
            Base class for defining scene lighting.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightDirectional.#ctor">
            <summary>
            Construct a SceneObjectLightDirectional.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightDirectional.#ctor(System.String)">
            <summary>
            Construct a SceneObjectLightDirectional.
            </summary>
            <param name="id">
            A <see cref="!:String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightDirectional.Direction">
            <summary>
            The direction of the light source (i.e. not the light direction).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightDirectional.ToLight(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraphContext)">
            <summary>
            Create the corresponding <see cref="T:OpenGL.Objects.State.LightsState.Light"/> for this object.
            </summary>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.State.LightsState.Light"/> equivalent to this SceneObjectLight.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectLight">
            <summary>
            Base class for defining scene lighting.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.#ctor">
            <summary>
            Construct a SceneObjectLight.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.#ctor(System.String)">
            <summary>
            Construct a SceneObjectLight.
            </summary>
            <param name="id">
            A <see cref="!:String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.Touch">
            <summary>
            Force static initialization for this class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.ToLight(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraphContext)">
            <summary>
            Create the corresponding <see cref="T:OpenGL.Objects.State.LightsState.Light"/> for this object.
            </summary>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.State.LightsState.Light"/> equivalent to this SceneObjectLight.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.SetLightParameters(OpenGL.Objects.Scene.SceneGraphContext,OpenGL.Objects.State.LightsState.Light)">
            <summary>
            The internal light parameters.
            </summary>
            <param name="light">
            The <see cref="T:OpenGL.Objects.State.LightsState.Light"/> to be set.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLight.AmbientColor">
            <summary>
            Light ambient color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLight.DiffuseColor">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLight.SpecularColor">
            <summary>
            Light specular color.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLight.HasShadowMap">
            <summary>
            Get or set whether this light defines a shadow map.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLight._HasShadowMap">
            <summary>
            Whether this light defines a shadow map.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLight.ShadowTexture">
            <summary>
            The shadow map texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.LinkShadowMapResources(OpenGL.Objects.GraphicsContext)">
            <summary>
            Allocate resources required for shadow mapping.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.UpdateShadowMap(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Scene.SceneGraph)">
            <summary>
            Update shadow map.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLight._BiasMatrix">
            <summary>
            Bias matrix for accessing shadow maps.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLight.ObjectType">
            <summary>
            Get the object type. Used for avoiding reflection.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLight.ClassObjectType">
            <summary>
            Get the object type of this SceneObject class.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLight._ObjectType">
            <summary>
            The object identifier for this class of SceneObject.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLight.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Scene.SceneObjectLightZone">
            <summary>
            Node for enabling lights linked to the object's hierarchy.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightZone.#ctor">
            <summary>
            Construct a SceneObjectLightZone.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightZone.#ctor(System.String)">
            <summary>
            Construct a SceneObjectLightZone.
            </summary>
            <param name="id">
            A <see cref="!:String"/> that specify the node identifier. It can be null for unnamed objects.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Scene.SceneObjectLightZone.Touch">
            <summary>
            Force static initialization for this class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLightZone.ObjectType">
            <summary>
            Get the object type. Used for avoiding reflection.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Scene.SceneObjectLightZone.ClassObjectType">
            <summary>
            Get the object type of this SceneObject class.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Scene.SceneObjectLightZone._ObjectType">
            <summary>
            The object identifier for this class of SceneObject.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Scene.ShadowMap">
            <summary>
            Base class for shadow mapping.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderPreprocessorParser">
            <summary>
             Parses a string according to the rules of the <see cref="T:OpenGL.Objects.ShaderPreprocessorParser" /> grammar.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderPreprocessorParser.IsActive">
            <summary>
            Get whether the preprocessor is currently active (i.e. source lines are output).
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderPreprocessorParser.ConditionalState">
            <summary>
            Conditional state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.ConditionalState.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a conditional state.
            </summary>
            <param name="directive">
            A <see cref="T:System.String"/> identifying the first conditional directive (#if, #ifdef or #ifndef).
            </param>
            <param name="active">
            Evaluated boolean condition of the <paramref name="directive"/>.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessorParser.ConditionalState.Directive">
            <summary>
            The token identifying the first conditional directive (#if, #ifdef or #ifndef).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessorParser.ConditionalState.Active">
            <summary>
            Evaluated boolean condition of the <see cref="F:OpenGL.Objects.ShaderPreprocessorParser.ConditionalState.Directive"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessorParser.ConditionalState.Branched">
            <summary>
            Boolean flag indicating whether a conditional branch has became active.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderPreprocessorParser.Symbol">
            <summary>
            Preprocessor symbol/value pair.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.Symbol.#ctor(System.String)">
            <summary>
            Construct a Symbol.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the symbol.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.Symbol.#ctor(System.String,System.String)">
            <summary>
            Construct a Symbol.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the symbol.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the symbol.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessorParser.Symbol.Name">
            <summary>
            The name of the symbol.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessorParser.Symbol.Value">
            <summary>
            The value associated to the symbol. If it is null, the symbol is defined without a value.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.Define(System.String)">
            <summary>
            Define a preprocessor symbol.
            </summary>
            <param name="statement">
            A <see cref="T:System.String"/> that specifies the #define statement.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessorParser._DefineStatementRegex">
            <summary>
            Regular expression for parsing #define SYMBOL VALUE statements.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.Define(System.String,System.String)">
            <summary>
            Define a preprocessor symbol.
            </summary>
            <param name="symbol">
            A <see cref="T:System.String"/> that specifies the name of the symbol.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the symbol.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.Undef(System.String)">
            <summary>
            Un-define a symbol.
            </summary>
            <param name="symbol">
            A <see cref="T:System.String"/> that specifies the name of the symbol.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.IsDefined(System.String)">
            <summary>
            Determine whether a specific symbol is currently defined.
            </summary>
            <param name="symbol">
            A <see cref="T:System.String"/> that specifies the name of the symbol.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="symbol"/> is a defined symbol.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.GetSymbol(System.String)">
            <summary>
            Resolve the preprocessor symbol.
            </summary>
            <param name="symbol">
            A <see cref="T:System.String"/> that specifies the name of the symbol.
            </param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessorParser._Symbols">
            <summary>
            Vector of symbol/value pairs, indexed by symbol name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.EvaluateExpression(System.String)">
            <summary>
            Evaluate a preprocessor statement.
            </summary>
            <param name="statement">
            A <see cref="T:System.String"/> that specifies the preprocessor statement to evaluate.
            </param>
            <returns>
            It returns a boolean value indicating the <paramref name="statement"/> evaluation.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessorParser.Parse(System.String,System.String)">
            <summary>
             Parses a string according to the rules of the <see cref="T:OpenGL.Objects.ShaderPreprocessorParser" /> grammar.
            </summary>
            <param name="subject">The parsing subject.</param>
            <param name="fileName">The optional file name to use in error messages.</param>
            <returns>The <see cref="T:System.Int32" /> parsed from <paramref name="subject" />.</returns>
            <exception cref="T:System.FormatException">
             Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram">
            <summary>
            Shader program.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single@)">
            <summary>
            Get uniform value (float variable or bool variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single@,System.Single@)">
            <summary>
            Get uniform value (vec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get uniform value (vec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get uniform value (vec4 variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.Single"/> holding the returned uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32@)">
            <summary>
            Get uniform value (int variable or bool variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32@,System.Int32@)">
            <summary>
            Get uniform value (ivec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get uniform value (ivec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get uniform value (ivec4 variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.Int32"/> holding the returned uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32@)">
            <summary>
            Get uniform value (uint variable or bool variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32@,System.UInt32@)">
            <summary>
            Get uniform value (uvec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Get uniform value (uvec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Get uniform value (uvec4 variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.UInt32"/> holding the returned uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean@)">
            <summary>
            Get uniform value (boolean variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Get uniform value (boolean variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Get uniform value (boolean variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Get uniform value (boolean variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:OpenGL.Boolean"/> holding the returned uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double@)">
            <summary>
            Get uniform value (double variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double@,System.Double@)">
            <summary>
            Get uniform value (dvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get uniform value (dvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get uniform value (dvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.Double"/> holding the returned uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single)">
            <summary>
            Set uniform state variable (floating-point variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single,System.Single)">
            <summary>
            Set uniform state variable (vec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set uniform state variable (vec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> holding the uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set uniform state variable (vec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> holding the uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.Single"/> holding the uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2f)">
            <summary>
            Set uniform state variable (vec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3f)">
            <summary>
            Set uniform state variable (vec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4f)">
            <summary>
            Set uniform state variable (vec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single[])">
            <summary>
            Set uniform state variable (array of float variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2f[])">
            <summary>
            Set uniform state variable (array of vec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3f[])">
            <summary>
            Set uniform state variable (array of vec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:Vertex3f[]"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4f[])">
            <summary>
            Set uniform state variable (array of vec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.ColorRGBAF)">
            <summary>
            Set uniform state variable (vec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.ColorRGBAF"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.ColorRGBAF[])">
            <summary>
            Set uniform state variable (vec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.ColorRGBAF"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32)">
            <summary>
            Set uniform state variable (int variable or bool variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Int32"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32,System.Int32)">
            <summary>
            Set uniform state variable (ivec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set uniform state variable (ivec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set uniform state variable (ivec4 variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.Int32"/> holding the uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2i)">
            <summary>
            Set uniform state variable (ivec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2i"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3i)">
            <summary>
            Set uniform state variable (ivec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3i"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4i)">
            <summary>
            Set uniform state variable (ivec4 variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4i"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32)">
            <summary>
            Set uniform state variable (uint variable or bool variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32,System.UInt32)">
            <summary>
            Set uniform state variable (uvec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set uniform state variable (uvec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set uniform state variable (uvec4 variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2ui)">
            <summary>
            Set uniform state variable (uvec2 variable or bvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2ui"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3ui)">
            <summary>
            Set uniform state variable (uvec3 variable or bvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3ui"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4ui)">
            <summary>
            Set uniform state variable (uvec4 variable or bvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ui"/> holding the uniform variabile data (first component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean)">
            <summary>
            Set uniform state variable (boolean variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Boolean"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set uniform state variable (bvec2 variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set uniform state variable (bvec3 variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set uniform state variable (bvec4 variable or similar).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.UInt32"/> holding the uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix3x3f)">
            <summary>
            Set uniform state variable (mat3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix4x4f)">
            <summary>
            Set uniform state variable (mat4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Objects.Texture)">
            <summary>
            Set uniform state variable (sampler1D, sampler2D, sampler3D, samplerCube variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture"/> holding the uniform variabile data (the texture name).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniformImage(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Objects.Texture,OpenGL.BufferAccess,System.Int32,System.Nullable{OpenGL.InternalFormat})">
            <summary>
            Set uniform state variable (image2D...). Not layered.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture"/> holding the uniform variabile data (the texture name).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniformImage(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Objects.Texture,System.Int32,OpenGL.BufferAccess,System.Int32,System.Nullable{OpenGL.InternalFormat})">
            <summary>
            Set uniform state variable (image2D...).Layered.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture"/> holding the uniform variabile data (the texture name).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniformImage(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram.UniformBinding,OpenGL.Objects.ShaderProgram.ImageUnitBinding)">
            <summary>
            Bind a <see cref="T:OpenGL.Objects.Texture"/> to an image unit, and setup relative state on this ShaderProgram.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> managing this ShaderProgram.
            </param>
            <param name="uniform">
            The <see cref="T:OpenGL.Objects.ShaderProgram.UniformBinding"/> that specifies the name of the uniform to be bound to the image unit.
            </param>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture"/> holding the uniform variabile data (the texture name).
            </param>
            <param name="imageUnitBinding">
            Specifies the state of the image unit.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double)">
            <summary>
            Set uniform state variable (double variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double,System.Double)">
            <summary>
            Set uniform state variable (dvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the uniform variabile data (second component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Set uniform state variable (dvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> holding the uniform variabile data (third component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set uniform state variable (dvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> holding the uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.Double"/> holding the uniform variabile data (fourth component).
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2d)">
            <summary>
            Set uniform state variable (dvec2 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3d)">
            <summary>
            Set uniform state variable (dvec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4d)">
            <summary>
            Set uniform state variable (dvec4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix3x3d)">
            <summary>
            Set uniform state variable (dmat3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix4x4d)">
            <summary>
            Set uniform state variable (dmat4 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniform(OpenGL.Objects.GraphicsContext,System.String,System.Object)">
            <summary>
            Set uniform state variable (any known object type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="value">
            A <see cref="T:System.Object"/> holding the uniform variabile data.
            </param>
            <remarks>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="uniformName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.StorageBufferBinding">
            <summary>
            Shader program storage buffer binding.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.StorageBufferBinding.#ctor(System.UInt32,System.String)">
            <summary>
            Construct a StorageBufferBinding.
            </summary>
            <param name="index">
            A <see cref="T:System.UInt32"/> that specifies the index used for identifying the storage buffer.
            </param>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name used in source for the storage buffer.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.StorageBufferBinding.Index">
            <summary>
            Storage buffer index.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.StorageBufferBinding.Name">
            <summary>
            The storage buffer name.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.StorageBufferBinding.BufferBinding">
            <summary>
            The current binding point index linked to.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CollectActiveStorageBuffers(OpenGL.Objects.GraphicsContext)">
            <summary>
            Collect information about uniform blocks defined in a ShaderProgram instance.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for linking the ShaderProgram instance.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CollectActiveStorageBuffers_ProgramInterfaceQuery(OpenGL.Objects.GraphicsContext)">
            <summary>
            Collect storage buffers information using GL_ARB_program_interface_query.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which this program was created.
            </param>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.ActiveStorageBuffers">
            <summary>
            Collection of active storage buffers on this ShaderProgram.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.IsStorageBuffer(System.String)">
            <summary>
            Determine whether an storage buffer is active or not.
            </summary>
            <param name="storageBufferName">
            A <see cref="T:System.String"/> which specify the uniform name.
            </param>
            <returns>
            </returns>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._StorageBufferMap">
            <summary>
            Map active storage buffer location with block name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetStorageBuffer(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Objects.Buffer)">
            <summary>
            Link a <see cref="T:OpenGL.Objects.ShaderStorageBuffer"/> to this ShaderProgram.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="storageBufferName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="storageBuffer">
            The <see cref="T:OpenGL.Objects.Buffer"/> to be linked to <paramref name="storageBufferName"/>.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.UniformBlockBinding">
            <summary>
            Shader program uniform block binding.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.UniformBlockBinding.#ctor(OpenGL.Objects.ShaderProgram,System.UInt32)">
            <summary>
            Construct an UniformBlockBinding.
            </summary>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> defining this uniform block.
            </param>
            <param name="uniformBlockIndex">
            A <see cref="T:System.UInt32"/> that specifies the index used for identifying the uniform block.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBlockBinding.Index">
            <summary>
            Uniform block index.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBlockBinding.Name">
            <summary>
            The uniform block name.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBlockBinding.DataSize">
            <summary>
            The uniform block data size, in bytes.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBlockBinding.ActiveUniforms">
            <summary>
            The count of the active uniforms hold by the uniform block.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBlockBinding.UniformIndices">
            <summary>
            Indices of the uniforms belonging to this uniform buffer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.ActiveUniformBlocks">
            <summary>
            Collection of active uniforms blocks on this ShaderProgram.
            </summary>
            <remarks>
            <para>
            This list may be not exahustive as someone could think: this list is initialize at link time, and its contents
            is determined by the current OpenGL driver used. To check effectively the uniform variable activeness, use
            <see cref="M:OpenGL.Objects.ShaderProgram.IsActiveUniform(System.String)"/> method.
            </para>
            <para>
            After a call to <see cref="M:OpenGL.Objects.ShaderProgram.IsActiveUniform(System.String)"/> method, the uniform variable (only if active) will be collected in
            the collection returned by this property.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.IsActiveUniformBlock(System.String)">
            <summary>
            Determine whether an uniform block is active or not.
            </summary>
            <param name="uniformBlockName">
            A <see cref="T:System.String"/> which specify the uniform block name.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniformBlock(System.String)">
            <summary>
            Request uniform block information.
            </summary>
            <param name="uniformBlockName">
            A <see cref="T:System.String"/> of the uniform block name.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CollectActiveUniformBlocks(OpenGL.Objects.GraphicsContext)">
            <summary>
            Collect information about uniform blocks defined in a ShaderProgram instance.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for linking the ShaderProgram instance.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._UniformBlockMap">
            <summary>
            Map active uniform block location with block name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CreateUniformBlock(System.String,OpenGL.BufferUsage)">
            <summary>
            Create an <see cref="T:OpenGL.Objects.UniformBuffer"/> useful for backing with a buffer object the specified uniform block.
            </summary>
            <param name="uniformBlockName"></param>
            <param name="hint"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CreateUniformBlock(System.String,OpenGL.MapBufferUsageMask)">
            <summary>
            Create an <see cref="T:OpenGL.Objects.UniformBuffer"/> useful for backing with a buffer object the specified uniform block.
            </summary>
            <param name="uniformBlockName"></param>
            <param name="usageMask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniformBlock(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Objects.UniformBuffer)">
            <summary>
            Set uniform state variable (floating-point variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CacheUniformBlock(System.UInt32,OpenGL.Objects.UniformBuffer)">
            <summary>
            Cache the current uniform value. Used to minimize Uniform* calls at the cost of comparing the cached
            object with the call arguments.
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specifies the uniform variable name.
            </param>
            <param name="uniformValue">
            A <see cref="T:System.Object"/> that specifies the uniform variable value.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.IsUniformBlockChanged(System.UInt32,OpenGL.Objects.UniformBuffer)">
            <summary>
            Determine whether if an uniform value is different from the one currently cached.
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specifies the uniform variable name.
            </param>
            <param name="uniformValue">
            A <see cref="T:System.Object"/> that specifies the uniform variable value updated.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="uniformValue"/> is actually
            different from the current uniform value.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._UniformBlocks">
            <summary>
            Map program uniform blocks with the last value set with UniformBlockBinding method.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.#ctor(System.String)">
            <summary>
            Construct a ShaderProgram.
            </summary>
            <param name="programName">
            A <see cref="T:System.String"/> that specify the shader program name.
            </param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if the parameter <paramref name="programName"/> is not a valid name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Create(OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Create this ShaderProgram, specifying the compiler parameters.
            </summary>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specify the compiler parameters used for compiling and
            linking this ShaderProgram.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Create this ShaderProgram, specifying the compiler parameters.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specify the compiler parameters used for compiling and
            linking this ShaderProgram.
            </param>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.CompilationParams">
            <summary>
            ShaderCompilerContext used for linkage. This property will not ever be null. If users set this property
            to null, it reset to the default one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the property setter is executed after the program has been created (i.e. linked).
            </exception>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._CompilationParams">
            <summary>
            ShaderCompilerContext used for compilation.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Attach(OpenGL.Objects.Shader)">
            <summary>
            Attach a Shader to this ShaderProgram.
            </summary>
            <param name="shaderObject">
            A <see cref="T:OpenGL.Objects.Shader"/> to be attached to this ShaderProgram.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="shaderObject"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.DetachShaders(OpenGL.Objects.GraphicsContext)">
            <summary>
            Utility routines for detaching all shaders from this ShaderProgram.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._ProgramObjects">
            <summary>
            List of shader objects composing this shader program.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Link(OpenGL.Objects.GraphicsContext)">
            <summary>
            Link this ShaderProgram.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for linking this ShaderProgram.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specify additional compiler parameters.
            </param>
            <remarks>
            <para>
            Generate shader program source code, compile and link it. After a successfull
            link, obtain every information about active uniform and input variables.
            </para>
            </remarks>
            <exception cref="T:OpenGL.Objects.ShaderException">
            Exception throw in the case this ShaderProgram is not linkable.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CollectionLinkedInformation(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Introspect all information about this ShaderProgram.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for linking this ShaderProgram.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specify additional compiler parameters.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniformSlotCount(OpenGL.Objects.ShaderUniformType)">
            <summary>
            Get the number of slots occupied by an uniform type.
            </summary>
            <param name="uniformType"></param>
            <returns></returns>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.IsLinked">
            <summary>
            Property to determine program linkage status.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Validate">
            <summary>
            Validate this shader program.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throw an Exception in the case the validation has failed.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Create(System.Byte[],System.Int32)">
            <summary>
            Create this ShaderProgram, specifying the program binary.
            </summary>
            <param name="programBinary">
            
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Create(OpenGL.Objects.GraphicsContext,System.Byte[],System.Int32)">
            <summary>
            Create this ShaderProgram, specifying the program binary.
            </summary>
            <param name="programBinary">
            
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Load(OpenGL.Objects.GraphicsContext)">
            <summary>
            Load this ShaderProgram.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for linking this ShaderProgram.
            </param>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.ActiveAttributes">
            <summary>
            Collection of active attributes on this ShaderProgram.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.IsActiveAttribute(System.String)">
            <summary>
            Determine whether an attributes is active or not.
            </summary>
            <param name="attributeName">
            A <see cref="T:System.String"/> which specify the input name.
            </param>
            <returns>
            It returns true in the case the input named <paramref name="attributeName"/> is active.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetActiveAttribute(System.String)">
            <summary>
            Active attributes binding information.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.AttributeBinding">
            <summary>
            Information about a shader program attribute.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.AttributeBinding.#ctor(System.UInt32,OpenGL.Objects.ShaderAttributeType)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="type"></param>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.AttributeBinding.InvalidLocation">
            <summary>
            Invalid location index.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.AttributeBinding.Location">
            <summary>
            Attribute location.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.AttributeBinding.Type">
            <summary>
            The type of the shader program attribute.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._AttributesMap">
            <summary>
            Map active uniform location with uniform name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetAttributeLocation(System.String,System.Int32)">
            <summary>
            Set a shader program attribute location.
            </summary>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute name. This value doesn't have to match with the actual
            shader program attributes, but it is usually.
            </param>
            <param name="location">
            A <see cref="T:System.Int32"/> that specify the attribute location.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="attributeName"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetAttributeLocation(System.String)">
            <summary>
            Get a shader program attribute location.
            </summary>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute name. This value doesn't have to match with the actual
            shader program attributes, but it is usually.
            </param>
            <returns>
            It returns a <see cref="T:System.Int32"/> that specify the location associated to <paramref name="attributeName"/>, if defined. In
            the case no semantic was associated to <paramref name="attributeName"/>, it returns -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="attributeName"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetAttributeSemantic(System.String,System.String)">
            <summary>
            Set a shader program attribute semantic.
            </summary>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute name. This value doesn't have to match with the actual
            shader program attributes, but it is usually.
            </param>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the attribute semantic. It can be any value meaninfull for the application; usually
            it equals to the constant fields of <see cref="T:OpenGL.Objects.VertexArraySemantic"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="attributeName"/> or <paramref name="semantic"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetAttributeSemantic(System.String)">
            <summary>
            Get a shader program attribute semantic.
            </summary>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute name. This value doesn't have to match with the actual
            shader program attributes, but it is usually.
            </param>
            <returns>
            It returns a <see cref="T:System.String"/> that specify the semantic associated to <paramref name="attributeName"/>, if defined. In
            the case no semantic was associated to <paramref name="attributeName"/>, it returns null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="attributeName"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.ResetAttributeSemantic(System.String)">
            <summary>
            Remove a specific attribute semantic.
            </summary>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute name. This value doesn't have to match with the actual
            shader program attributes.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="attributeName"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.ClearAttributesMetadata">
            <summary>
            Remove all defined attribute semantics.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.AttributeMetadata">
            <summary>
            Attribute metadata information.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.AttributeMetadata.Semantic">
            <summary>
            The semantic associated to the attribute.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.AttributeMetadata.Location">
            <summary>
            The location of attribute.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._AttributeMetadata">
            <summary>
            Map between program attribute names and attribute metadata.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetUniformSemantic(System.String,System.String)">
            <summary>
            Set a shader program uniform semantic.
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the uniform name. This value doesn't have to match with the actual
            shader program uniforms, but it is usually.
            </param>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the uniform semantic. It can be any value meaninfull for the application; usually
            it equals to the constant fields of <see cref="!:ProgramUniformSemantic"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="uniformName"/> or <paramref name="semantic"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.ResetUniformSemantic(System.String)">
            <summary>
            Remove a specific uniform semantic.
            </summary>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the uniform name. This value doesn't have to match with the actual
            shader program uniforms.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="semantic"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.ClearUniformSemantic">
            <summary>
            Remove all defined uniform semantics.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._UniformSemantic">
            <summary>
            Map between program attribute names and uniform semantic.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.FeedbackBinding">
            <summary>
            Information about a shader feedback attribute.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.FeedbackBinding.#ctor(OpenGL.Objects.ShaderAttributeType,System.UInt32)">
            <summary>
            Construct a FeedbackBinding, specifing the type of the size of the feedback attribute.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.Objects.ShaderAttributeType"/> that specify the type of the components of the feedback attribute.
            </param>
            <param name="size">
            A <see cref="T:System.UInt32"/> that specify the feedback size, in terms of <see cref="!:type"/>.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.FeedbackBinding.Type">
            <summary>
            The type of the shader program feedback.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.FeedbackBinding.Size">
            <summary>
            Feedback size, in terms of <see cref="F:OpenGL.Objects.ShaderProgram.FeedbackBinding.Type"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.AddFeedbackVarying(System.String)">
            <summary>
            Adds a feedback varying.
            </summary>
            <param name='varying'>
            Varying variable name.
            </param>
            <exception cref='T:System.ArgumentNullException'>
            Is thrown when <paramref name="varying"/> passed to a method is invalid because it is <see langword="null" /> .
            </exception>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.ActiveFeedbacks">
            <summary>
            Collection of active attributes on this ShaderProgram.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.IsActiveFeedback(System.String)">
            <summary>
            Determine whether an attributes is active or not.
            </summary>
            <param name="attributeName">
            A <see cref="T:System.String"/> which specify the input name.
            </param>
            <returns>
            It returns true in the case the input named <paramref name="attributeName"/> is active.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetActiveFeedback(System.String)">
            <summary>
            Active attributes binding information.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._FeedbackVaryings">
            <summary>
            The feedback varyings of this program.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._FeedbacksMap">
            <summary>
            Map active feedback location with veretx shader (or geometry shader) output attribute name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetFragmentLocation(System.String,System.Int32)">
            <summary>
            Set location of the fragment shader outputs.
            </summary>
            <param name="fragmentOutputName">
            A <see cref="T:System.String"/> that specify the fragment shader output variable to bind for a specific
            location.
            </param>
            <param name="location">
            A <see cref="T:System.Int32"/> that will be the location of the fragment data written to
            <paramref name="fragmentOutputName"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="fragmentOutputName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="fragmentOutputName"/> starts with "gl_" (reserved name).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the program has been already linked.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetFragmentLocation(System.String)">
            <summary>
            Get the location of the fragment shader output.
            </summary>
            <param name="fragOutputName"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._FragLocations">
            <summary>
            The location of the fragment shader outputs.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._FragDataSemantic">
            <summary>
            Map between program attribute names and attribute semantic.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetBinary(OpenGL.Objects.GraphicsContext,System.IO.Stream,System.Int32@)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="binaryStream"></param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Compute(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Dispatch the compute program.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which the compute is dispatched.
            </param>
            <param name="x">
            The number of work groups to be launched in the X dimension.
            </param>
            <param name="y">
            The number of work groups to be launched in the Y dimension.
            </param>
            <param name="z">
            The number of work groups to be launched in the Z dimension.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.MemoryBarrier(OpenGL.MemoryBarrierMask)">
            <summary>
            Defines a barrier ordering memory transactions
            </summary>
            <param name="memoryBarrierMask">
            Specifies the barriers to insert.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.ImageUnitBinding">
            <summary>
            Link between image uniform and image unit preset.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.ImageUnitBinding.#ctor">
            <summary>
            Construct a ImageUnitBinding.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.ImageUnitBinding.#ctor(System.String)">
            <summary>
            Construct a ImageUnitBinding.
            </summary>
            <param name="uniformName">
            The <see cref="T:System.String"/> that specifies the name of the uniform.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.ImageUnitBinding.UniformName">
            <summary>
            The name of the image uniform.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.ImageUnitBinding.Texture">
            <summary>
            Get or set the texture currently bound on texture unit.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.ImageUnitBinding._Texture">
            <summary>
            Texture currently bound on texture unit.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.ImageUnitBinding.OverrideInternalFormat">
            <summary>
            Overrides the format used for accesses to bound texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.ImageUnitBinding.InternalFormat">
            <summary>
            Format used for accesses to bound texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._ImageUnitBindings">
            <summary>
            The image units to bind before computation.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.ThisObjectClass">
            <summary>
            Shader program object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.ObjectClass">
            <summary>
            Shader program object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this ShaderProgram really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this ShaderProgram exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this ShaderProgram (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create this ShaderProgram.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a ShaderProgram name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns a valid object name for this ShaderProgram.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this ShaderProgram resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a ShaderProgram name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:OpenGL.Boolean"/> indicating whether this method is called by <see cref="M:OpenGL.Objects.ShaderProgram.Dispose(System.Boolean)"/>. If it is false,
            this method is called by the finalizer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.OpenGL#Objects#IBindingResource#GetBindingTarget(OpenGL.Objects.GraphicsContext)">
            <summary>
            Get the identifier of the binding point.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.OpenGL#Objects#IBindingResource#Bind(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this IBindingResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.OpenGL#Objects#IBindingResource#Unbind(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this IBindingResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.OpenGL#Objects#IBindingResource#IsBound(OpenGL.Objects.GraphicsContext)">
            <summary>
            Check whether this IBindingResource is currently bound on the specified graphics context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for querying the current binding state.
            </param>
            <returns>
            It returns a boolean value indicating whether this IBindingResource is currently bound on <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.UniformBinding">
            <summary>
            Shader program uniform binding.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.UniformBinding.#ctor(System.String,System.Int32)">
            <summary>
            Construct a non-indexed uniform specifying only the location.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the uniform name.
            </param>
            <param name="location">
            A <see cref="T:System.Int32"/> that specifies the uniform location. It can -1 to indicate that the uniform
            is not active.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.UniformBinding.#ctor(System.UInt32,System.String,System.Int32,OpenGL.Objects.ShaderUniformType)">
            <summary>
            Construct a non-indexed uniform specifying only the location.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the uniform name.
            </param>
            <param name="location">
            A <see cref="T:System.Int32"/> that specifies the uniform location. It can -1 to indicate that the uniform
            is not active.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.Index">
            <summary>
            Uniform index.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.Name">
            <summary>
            The uniform variable name.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.Location">
            <summary>
            Uniform location.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.UniformType">
            <summary>
            Uniform type.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.BlockIndex">
            <summary>
            The uniform block index for this uniform, which can be used to query information about this block. If this
            uniform is not in a block, the value will be -1.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.BlockOffset">
            <summary>
            The byte offset into the beginning of the uniform block for this uniform. If the uniform is not in a block,
            the value will be -1.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.BlockArrayStride">
            <summary>
            The byte stride for elements of the array, for uniforms in a uniform block. For non-array uniforms in a block,
            this value is 0. For uniforms not in a block, the value will be -1.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.BlockMatrixStride">
            <summary>
            The byte stride for columns of a column-major matrix or rows for a row-major matrix, for uniforms in a uniform
            block. For non-matrix uniforms in a block, this value is 0. For uniforms not in a block, the value will be -1.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding.BlockMatrixRowMajor">
            <summary>
            It's true if the matrix is row-major and the uniform is in a block. false is returned if the uniform is column-major,
            the uniform is not in a block (all non-block matrices are column-major), or simply not a matrix type.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.UniformBinding.CacheValue(System.Object)">
            <summary>
            Cache the current uniform value. Used to minimize Uniform* calls at the cost of comparing the cached
            object with the call arguments.
            </summary>
            <param name="uniformValue">
            A <see cref="T:System.Object"/> that specifies the uniform variable value.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.UniformBinding.CacheValue(System.ICloneable)">
            <summary>
            Cache the current uniform value. Used to minimize Uniform* calls at the cost of comparing the cached
            object with the call arguments.
            </summary>
            <param name="uniformValue">
            A <see cref="T:System.Object"/> that specifies the uniform variable value.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.UniformBinding.IsValueChanged(System.Object)">
            <summary>
            Check whether the uniform value is chanding
            </summary>
            <param name="uniformValue"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram.UniformBinding._CachedValue">
            <summary>
            Current value cached.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CollectActiveUniforms(OpenGL.Objects.GraphicsContext)">
            <summary>
            Collect program active uniforms.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which this program was created.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CollectActiveUniforms_ProgramInterfaceQuery(OpenGL.Objects.GraphicsContext)">
            <summary>
            Collect uniform information using GL_ARB_program_interface_query.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which this program was created.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CollectActiveUniforms_UniformBufferObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Collect uniform information using GL_ARB_uniform_buffer_object.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which this program was created.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CollectActiveUniforms_Compatible(OpenGL.Objects.GraphicsContext)">
            <summary>
            Collect uniform information using GL_ARB_shader_objects.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which this program was created.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CheckStructuredUniform(OpenGL.Objects.ShaderProgram.UniformBinding)">
            <summary>
            If an active uniform represent a structure or an array, it extract the basic string to detect
            active uniforms (of type of structure, or of type of array) by using the basic name.
            </summary>
            <param name="uniformBinding">
            The <see cref="T:OpenGL.Objects.ShaderProgram.UniformBinding"/> representing the active uniform.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.LogActiveUniforms">
            <summary>
            Log program active uniforms.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._UniformMap">
            <summary>
            Map active uniform information with uniform name.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._UniformIndexMap">
            <summary>
            Map active uniform information with uniform index.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderProgram.ActiveUniforms">
            <summary>
            Collection of active uniforms on this ShaderProgram.
            </summary>
            <remarks>
            <para>
            This list may be not exahustive as someone could think: this list is initialize at link time, and its contents
            is determined by the current OpenGL driver used. To check effectively the uniform variable activeness, use
            <see cref="M:OpenGL.Objects.ShaderProgram.IsActiveUniform(System.String)"/> method.
            </para>
            <para>
            After a call to <see cref="M:OpenGL.Objects.ShaderProgram.IsActiveUniform(System.String)"/> method, the uniform variable (only if active) will be collected in
            the collection returned by this property.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.IsActiveUniform(System.String)">
            <summary>
            Determine whether an uniform is active or not.
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> which specify the uniform name.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniform(OpenGL.Objects.GraphicsContext,System.String)">
            <summary>
            Request uniform variable location.
            </summary>
            <param name="ctx">
            The <see cref="!:GraphicsCOntext"/> that has currently bound the program.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> of the uniform variable used.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.GetUniformSemantic(System.String)">
            <summary>
            Request uniform variable location.
            </summary>
            <param name="uniformSemantic">
            A <see cref="T:System.String"/> of the uniform semantic.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.CheckUniformType(OpenGL.Objects.ShaderProgram.UniformBinding,System.Int32[])">
            <summary>
            Check uniform variable coherence.
            </summary>
            <param name="uniform">
            A <see cref="T:OpenGL.Objects.ShaderProgram.UniformBinding"/> that specify the uniform name to check.
            </param>
            <param name="uniformRequestTypes">
            A sequence of OpenGL constants that are the allowed types for the specified uniform.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the type of the uniform variable <paramref name="uniform"/> does not match any value specified by <paramref name="uniformRequestTypes"/>.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.IUniformBackend">
            <summary>
            Backend implemented for loading uniform state.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._UniformBackend">
            <summary>
            Current uniform backend used for setting this program uniform state.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.UniformBackendCompatible">
            <summary>
            The <see cref="T:OpenGL.Objects.ShaderProgram.IUniformBackend"/> implementation for compatibility implementation based on glUniform*
            commands. They had been superseeded by glProgramUniform* commands available with ARB_separate_shader_object.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderProgram.UniformBackendSeparate">
            <summary>
            The <see cref="T:OpenGL.Objects.ShaderProgram.IUniformBackend"/> implementation for compatibility implementation based on glProgramUniform*
            commands.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Object)">
            <summary>
            Set uniform state variable (any known object type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="value">
            A <see cref="T:System.Object"/> holding the uniform variabile data.
            </param>
            <remarks>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="uniformName"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.ShaderProgram._SetVariantUniformMethods">
            <summary>
            Methods used for setting uniform values.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single)">
            <summary>
            Set uniform variable from single-precision floating-point data.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <remarks>
            <para>
            The uniform variable type could be one of the following :
            - float, vec2, vec3, vec4
            - double, dvec2, dvec3, dvec4
            - int, ivec2, ivec3, ivec4
            - uint, uvec2, uvec3, uvec4
            </para>
            <para>
            Other components than the first one are reset to 0.0. The single-precision
            floating-point data is converted accordingly to the uniform variable type.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single,System.Single)">
            <summary>
            Set uniform variable from single-precision floating-point data.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the uniform variabile data (second component).
            </param>
            <remarks>
            <para>
            The uniform variable type could be one of the following :
            - float, vec2, vec3, vec4
            - double, dvec2, dvec3, dvec4
            - int, ivec2, ivec3, ivec4
            - uint, uvec2, uvec3, uvec4
            </para>
            <para>
            In the case the uniform variable length is less than 2, the higher components specified as
            arguments are ignored; otherwise, other components are reset to 0.0. The single-precision
            floating-point data is converted accordingly to the uniform variable type.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set uniform variable from single-precision floating-point data.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> holding the uniform variabile data (third component).
            </param>
            <remarks>
            <para>
            The uniform variable type could be one of the following :
            - float, vec2, vec3, vec4
            - double, dvec2, dvec3, dvec4
            - int, ivec2, ivec3, ivec4
            - uint, uvec2, uvec3, uvec4
            </para>
            <para>
            In the case the uniform variable length is less than 3, the higher components specified as
            arguments are ignored; otherwise, other components are reset to 0.0. The single-precision
            floating-point data is converted accordingly to the uniform variable type.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set uniform variable from single-precision floating-point data (variant type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> holding the uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.Single"/> holding the uniform variabile data (fourth component).
            </param>
            <remarks>
            <para>
            The uniform variable type could be one of the following :
            - float, vec2, vec3, vec4
            - double, dvec2, dvec3, dvec4
            - int, ivec2, ivec3, ivec4
            - uint, uvec2, uvec3, uvec4
            </para>
            <para>
            In the case the uniofmr variable length is less than 4, the higher components specified as
            arguments are ignored. The single-precision floating-point data is converted accordingly
            to the uniform variable type.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2f)">
            <summary>
            Set uniform state variable (variant type variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3f)">
            <summary>
            Set uniform state variable (variant type variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4f)">
            <summary>
            Set uniform state variable (variant type variable)
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.ColorRGBAF)">
            <summary>
            Set uniform state variable (variant type variable)
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.ColorRGBAF"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double)">
            <summary>
            Set uniform variable from double-precision floating-point data.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the uniform variabile data (first component).
            </param>
            <remarks>
            <para>
            The uniform variable type could be one of the following :
            - float, vec2, vec3, vec4
            - double, dvec2, dvec3, dvec4
            - int, ivec2, ivec3, ivec4
            - uint, uvec2, uvec3, uvec4
            </para>
            <para>
            Other components than the first one are reset to 0.0. The single-precision
            floating-point data is converted accordingly to the uniform variable type.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double,System.Double)">
            <summary>
            Set uniform variable from double-precision floating-point data.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the uniform variabile data (second component).
            </param>
            <remarks>
            <para>
            The uniform variable type could be one of the following :
            - float, vec2, vec3, vec4
            - double, dvec2, dvec3, dvec4
            - int, ivec2, ivec3, ivec4
            - uint, uvec2, uvec3, uvec4
            </para>
            <para>
            In the case the uniform variable length is less than 2, the higher components specified as
            arguments are ignored; otherwise, other components are reset to 0.0. The single-precision
            floating-point data is converted accordingly to the uniform variable type.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Set uniform variable from double-precision floating-point data.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> holding the uniform variabile data (third component).
            </param>
            <remarks>
            <para>
            The uniform variable type could be one of the following :
            - float, vec2, vec3, vec4
            - double, dvec2, dvec3, dvec4
            - int, ivec2, ivec3, ivec4
            - uint, uvec2, uvec3, uvec4
            </para>
            <para>
            In the case the uniform variable length is less than 3, the higher components specified as
            arguments are ignored; otherwise, other components are reset to 0.0. The single-precision
            floating-point data is converted accordingly to the uniform variable type.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set uniform variable from double-precision floating-point data (variant type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="x">
            A <see cref="T:System.Double"/> holding the uniform variabile data (first component).
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> holding the uniform variabile data (second component).
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> holding the uniform variabile data (third component).
            </param>
            <param name="w">
            A <see cref="T:System.Double"/> holding the uniform variabile data (fourth component).
            </param>
            <remarks>
            <para>
            The uniform variable type could be one of the following :
            - float, vec2, vec3, vec4
            - double, dvec2, dvec3, dvec4
            - int, ivec2, ivec3, ivec4
            - uint, uvec2, uvec3, uvec4
            </para>
            <para>
            In the case the uniofmr variable length is less than 4, the higher components specified as
            arguments are ignored. The single-precision floating-point data is converted accordingly
            to the uniform variable type.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex2d)">
            <summary>
            Set uniform state variable (variant type variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex3d)">
            <summary>
            Set uniform state variable (variant type variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Vertex4d)">
            <summary>
            Set uniform state variable (variant type variable)
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix3x3f)">
            <summary>
            Set uniform state variable (variant type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix4x4f)">
            <summary>
            Set uniform state variable (variant type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix3x3d)">
            <summary>
            Set uniform state variable (variant type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="!:Matrix3x3"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderProgram.SetVariantUniform(OpenGL.Objects.GraphicsContext,System.String,OpenGL.Matrix4x4d)">
            <summary>
            Set uniform state variable (variant type).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4d"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ShaderStorageBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderStorageBuffer.#ctor(OpenGL.BufferUsage)">
            <summary>
            Construct an ShaderStorageBuffer.
            </summary>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specifies the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderStorageBuffer.#ctor(OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an ShaderStorageBuffer.
            </summary>
            <param name="usageMask">
            A <see cref="T:OpenGL.MapBufferUsageMask"/> that specifies the data buffer usage mask.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderStorageBuffer.Create(System.UInt32)">
            <summary>
            Create this UniformBufferObject by specifing only the number of items.
            </summary>
            <param name="dataSize">
            A <see cref="T:System.UInt32"/> that specify the size of the data hold by this UniformBufferObject, in bytes.
            </param>
            <remarks>
            <para>
            Previous content of the client buffer is discarded.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="dataSize"/> is zero.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderStorageBuffer.Create(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Create this UniformBufferObject by specifing only the number of items.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used to define this UniformBufferObject.
            </param>
            <param name="dataSize">
            A <see cref="T:System.UInt32"/> that specify the size of the data hold by this UniformBufferObject, in bytes.
            </param>
            <remarks>
            <para>
            Previous content of the client buffer is discarded, if any was defined.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="dataSize"/> is zero.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderStorageBuffer.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            <para>
            It returns a boolean value indicating whether this GraphicsResource implementation requires a name
            generation on creation. In the case this routine returns true, the routine <see cref="!:CreateName"/>
            will be called (and it must be overriden). In  the case this routine returns false, the routine
            <see cref="!:CreateName"/> won't be called (and indeed it is not necessary to override it) and a
            name is generated automatically in a context-independent manner.
            </para>
            <para>
            This implementation check the GL_ARB_vertex_array_object extension availability.
            </para>
            </returns>
        </member>
        <member name="T:OpenGL.Objects.SingleExtensions">
            <summary>
            Extension method for <see cref="T:System.Single"/> based typed.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.SingleExtensions.ToVertex4f(System.Single[])">
            <summary>
            Convert a <see cref="T:Single[]"/> to <see cref="T:Vertex4f[]"/>.
            </summary>
            <param name="array">
            The <see cref="T:Single[]"/> to be converted.
            </param>
            <returns>
            It returns the <see cref="T:Vertex4f[]"/> equivalent to <paramref name="array"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.SingleExtensions.ToVertex3f(System.Single[])">
            <summary>
            Convert a <see cref="T:Single[]"/> to <see cref="T:Vertex3f[]"/>.
            </summary>
            <param name="array">
            The <see cref="T:Single[]"/> to be converted.
            </param>
            <returns>
            It returns the <see cref="T:Vertex3f[]"/> equivalent to <paramref name="array"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.SingleExtensions.ToVertex2f(System.Single[])">
            <summary>
            Convert a <see cref="T:Single[]"/> to <see cref="T:Vertex2f[]"/>.
            </summary>
            <param name="array">
            The <see cref="T:Single[]"/> to be converted.
            </param>
            <returns>
            It returns the <see cref="T:Vertex2f[]"/> equivalent to <paramref name="array"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.SingleExtensions.ToColorRGBAF(System.Single[])">
            <summary>
            Convert a <see cref="T:Single[]"/> to <see cref="T:ColorRGBAF[]"/>.
            </summary>
            <param name="array">
            The <see cref="T:Single[]"/> to be converted.
            </param>
            <returns>
            It returns the <see cref="T:ColorRGBAF[]"/> equivalent to <paramref name="array"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.SingleExtensions.ToColorRGBF(System.Single[])">
            <summary>
            Convert a <see cref="T:Single[]"/> to <see cref="T:ColorRGBF[]"/>.
            </summary>
            <param name="array">
            The <see cref="T:Single[]"/> to be converted.
            </param>
            <returns>
            It returns the <see cref="T:ColorRGBF[]"/> equivalent to <paramref name="array"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Buffer">
            <summary>
            Buffer object abstraction.
            </summary>
            <remarks>
            Implements:
            - Mapping
            - Immutable storage support (GL_ARB_buffer_storage)
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Buffer.#ctor(OpenGL.BufferTarget,OpenGL.BufferUsage)">
            <summary>
            Construct a mutable Buffer determining its type, data usage and transfer mode.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.BufferTarget"/> that specify the buffer object type.
            </param>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.#ctor(OpenGL.BufferTarget,OpenGL.MapBufferUsageMask)">
            <summary>
            Construct a immutable Buffer determining its type, data usage and storage mode.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.BufferTarget"/> that specify the buffer object type.
            </param>
            <param name="usageMask">
            An <see cref="T:OpenGL.MapBufferUsageMask"/> that specify the buffer storage usage mask.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Buffer.Target">
            <summary>
            Buffer target, indicating the buffer class.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Buffer.Hint">
            <summary>
            The usage hint of this Buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Buffer.UsageMask">
            <summary>
            Map storage flags, valid when GL_ARB_buffer_storage is implemented.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Buffer.DefaultBufferAlignment">
            <summary>
            The default memory alignment required for buffers.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Buffer.Technique">
            <summary>
            Technique for creating/updating Buffer storage.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Technique.#ctor(OpenGL.Objects.Buffer)">
            <summary>
            Construct a Technique.
            </summary>
            <param name="buffer">
            The <see cref="F:OpenGL.Objects.Buffer.Technique.Buffer"/> affected by this Technique.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="buffer"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Buffer.Technique.Buffer">
            <summary>
            The <see cref="F:OpenGL.Objects.Buffer.Technique.Buffer"/> affected by this Technique.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Technique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Update the reference Buffer, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Technique.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Buffer.EmptyCreateTechnique">
            <summary>
            Technique defining an empty buffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.EmptyCreateTechnique.#ctor(OpenGL.Objects.Buffer,System.UInt32)">
            <summary>
            Construct a EmptyCreateTechnique.
            </summary>
            <param name="buffer">
            The <see cref="T:OpenGL.Objects.Buffer"/> affected by this Technique.
            </param>
            <param name="size">
            A <see cref="T:System.UInt32"/> that specifies the (new) size of <paramref name="buffer"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="buffer"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Buffer.EmptyCreateTechnique._Size">
            <summary>
            Size of the Buffer, in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.EmptyCreateTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Update the reference Buffer, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Buffer.ArrayCreateTechnique">
            <summary>
            Technique defining a buffer initialized with an <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.ArrayCreateTechnique.#ctor(OpenGL.Objects.Buffer,System.Array)">
            <summary>
            Construct a EmptyCreateTechnique.
            </summary>
            <param name="buffer">
            The <see cref="T:OpenGL.Objects.Buffer"/> affected by this Technique.
            </param>
            <param name="array">
            A <see cref="T:System.Array"/> that specifies the (new) content of <paramref name="buffer"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="buffer"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Buffer.ArrayCreateTechnique._Array">
            <summary>
            Size of the Buffer, in bytes.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Buffer.ArrayCreateTechnique._Size">
            <summary>
            The effective size of <see cref="F:OpenGL.Objects.Buffer.ArrayCreateTechnique._Array"/>, in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.ArrayCreateTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Update the reference Buffer, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Buffer.ArrayUpdateTechnique">
            <summary>
            Technique updating a buffer with an <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.ArrayUpdateTechnique.#ctor(OpenGL.Objects.Buffer,System.Array,System.UInt32)">
            <summary>
            Construct a EmptyCreateTechnique.
            </summary>
            <param name="buffer">
            The <see cref="T:OpenGL.Objects.Buffer"/> affected by this Technique.
            </param>
            <param name="array">
            A <see cref="T:System.Array"/> that specifies the (new) content of <paramref name="buffer"/>.
            </param>
            <param name="bufferOffset">
            A <see cref="T:System.UInt32"/> that specifies the offset of the content to be updated, in bytes.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="buffer"/> is immutable.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.ArrayUpdateTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Update the reference Buffer, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Buffer.ArrayUpdateTechnique._Array">
            <summary>
            Size of the Buffer, in bytes.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Buffer.ArrayUpdateTechnique._BufferOffset">
            <summary>
            The offset of the content to be updated, in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.AddTechnique(OpenGL.Objects.Buffer.Technique)">
            <summary>
            Set the technique used for creating and updating this Texture.
            </summary>
            <param name="technique">
            The <see cref="T:OpenGL.Objects.Buffer.Technique"/> that specify the method creating/updating this Texture.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="technique"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Buffer._Techniques">
            <summary>
            Technique used for creating this texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Buffer.Size">
            <summary>
            The size of this Buffer, in bytes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Buffer.GpuBufferAddress">
            <summary>
            Get the address of the GPU buffer used to specify the vertex arrays (i.e. glVertexAttribPointer).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Buffer.GpuBuffer">
            <summary>
            A <see cref="T:OpenGL.Objects.AlignedMemoryBuffer"/> instance for simulating the GPU buffer in the case GL_ARB_vertex_array_object is not supported.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Map(OpenGL.Objects.GraphicsContext,OpenGL.BufferAccess)">
            <summary>
            Map the GPU buffer allocated by this Buffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> required for mapping this Buffer.
            </param>
            <param name="mask">
            A <see cref="T:OpenGL.BufferAccess"/> that specify the map access.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer is already mapped.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer does not exist for <paramref name="ctx"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.IsMapSupported(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether glMapBuffer is supported.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> which is executed glMaBuffer on.
            </param>
            <returns>
            It returns whether glMapBuffer is available on <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Map(OpenGL.Objects.GraphicsContext,OpenGL.BufferAccessMask,System.IntPtr,System.UInt32)">
            <summary>
            Map a range of the GPU buffer allocated by this Buffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> required for mapping this Buffer.
            </param>
            <param name="mask">
            A <see cref="T:OpenGL.BufferAccessMask"/> that specify the map access.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer is already mapped.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer does not exist for <paramref name="ctx"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.IsMapRangeSupported(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether glMapBufferRange is supported.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> which is executed glMapBufferRange on.
            </param>
            <returns>
            It returns whether glMapBufferRange is available on <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Unmap(OpenGL.Objects.GraphicsContext)">
            <summary>
            Unmap this Buffer data.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer is not mapped.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer has been corrupted after being unmapped.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.Buffer.IsMapped">
            <summary>
            Check whether this Buffer data is mapped.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Buffer.MappedBuffer">
            <summary>
            Get the pointer to the mapped GPU buffer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Buffer.MapOffset">
            <summary>
            Get the offset of <see cref="P:OpenGL.Objects.Buffer.MappedBuffer"/> respect the GPU buffer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Buffer.MapSize">
            <summary>
            Get the number of bytes of GPU buffer are mapped by <see cref="P:OpenGL.Objects.Buffer.MappedBuffer"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Buffer._Access">
            <summary>
            The access mask requested on last Map call.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Buffer._AccessMask">
            <summary>
            The access mask requested on last Map call.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Flush(OpenGL.Objects.GraphicsContext,System.IntPtr,System.UInt32)">
            <summary>
            Indicate modifications to a range of the mapped buffer <see cref="P:OpenGL.Objects.Buffer.MappedBuffer"/>.
            </summary>
            <param name="ctx"></param>
            <param name="offset">
            Specifies the start of the buffer subrange, in basic machine units.
            </param>
            <param name="size">
            Specifies the length of the buffer subrange, in basic machine units.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.IsFlushSupported(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether glFlushMappedBufferRange is supported.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> which is executed glFlushMappedBufferRange on.
            </param>
            <returns>
            It returns whether glFlushMappedBufferRange is available on <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Load``1(OpenGL.Objects.GraphicsContext,System.UInt64)">
            <summary>
            Read a structure from this BufferObject.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ctx"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Load(OpenGL.Objects.GraphicsContext,System.Array,System.UInt64,System.UInt64)">
            <summary>
            Read an array from this BufferObject
            </summary>
            <param name="ctx"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Store(OpenGL.Objects.GraphicsContext,System.Array,System.UInt64,System.UInt64)">
            <summary>
            Store an array to this BufferObject.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ctx"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Set``1(``0,System.UInt64)">
            <summary>
            Set an value to this mapped Buffer.
            </summary>
            <typeparam name="T">
            A structure representing this Buffer element.
            </typeparam>
            <param name="value">
            A <typeparamref name="T"/> that specify the mapped Buffer element.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt64"/> that specify the offset applied to the mapped Buffer where <paramref name="value"/>
            is stored. This value is expressed in basic machine units (bytes).
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Set``1(``0[],System.UInt64)">
            <summary>
            Set an array of elements to this mapped Buffer.
            </summary>
            <typeparam name="T">
            A structure representing this Buffer element.
            </typeparam>
            <param name="array">
            A <typeparamref name="T:T[]:T[]"/> that specify the mapped Buffer element.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt64"/> that specify the offset applied to the mapped Buffer where <paramref name="array"/>
            is stored. This value is expressed in basic machine units (bytes).
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Get``1(System.UInt64)">
            <summary>
            Get an element from this mapped Buffer.
            </summary>
            <typeparam name="T">
            A structure representing this Buffer element.
            </typeparam>
            <param name="offset">
            A <see cref="T:System.UInt64"/> that specify the offset applied to the mapped Buffer to get the stored
            value. This value is expressed in basic machine units (bytes).
            </param>
            <returns>
            It returns a structure of type <typeparamref name="T"/>, read from the mapped Buffer
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer is not mapped (<see cref="P:OpenGL.Objects.Buffer.IsMapped"/>).
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Buffer.Immutable">
            <summary>
            Get whether this Buffer is immutable (GL_ARB_buffer_storage).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Invalidate(OpenGL.Objects.GraphicsContext)">
            <summary>
            Invalidate the content of this Buffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that created this Buffer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Invalidate(OpenGL.Objects.GraphicsContext,System.IntPtr,System.UInt32)">
            <summary>
            Invalidate a range of the content of this Buffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that created this Buffer.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Buffer.ThisObjectClass">
            <summary>
            Buffer object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Buffer.ObjectClass">
            <summary>
            Buffer object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this Buffer really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this Buffer exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this Buffer (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns always false. Names are managed manually
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Buffer.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a Buffer name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this buffer object name.
            </param>
            <returns>
            It returns a valid object name for this Buffer.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a Buffer name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this buffer object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer does not exist.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this Buffer resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this Buffer is currently mapped.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown in the case <see cref="!:GraphicsResource.RefCount"/> is greater than zero. This means that the method is trying to dispose
            an object that is actually referenced by something else.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Buffer.OpenGL#Objects#IBindingResource#GetBindingTarget(OpenGL.Objects.GraphicsContext)">
            <summary>
            Get the identifier of the binding point.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.OpenGL#Objects#IBindingResource#Bind(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this IBindingResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.BindCore(OpenGL.Objects.GraphicsContext)">
            <summary>
            Virtual Bind implementation.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.OpenGL#Objects#IBindingResource#Unbind(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this IBindingResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.UnbindCore(OpenGL.Objects.GraphicsContext)">
            <summary>
            Virtual Unbind implementation.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Buffer.OpenGL#Objects#IBindingResource#IsBound(OpenGL.Objects.GraphicsContext)">
            <summary>
            Check whether this IBindingResource is currently bound on the specified graphics context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for querying the current binding state.
            </param>
            <returns>
            It returns a boolean value indicating whether this IBindingResource is currently bound on <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Buffer.OpenGL#Objects#IBindingIndexResource#GetBindingTarget(OpenGL.Objects.GraphicsContext)">
            <summary>
            Get the identifier of the binding point.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Buffer.OpenGL#Objects#IBindingIndexResource#BindingIndex">
            <summary>
            Current binding point of the IBindingIndexResource.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.CoreImagingImageCodecPlugin">
            <summary>
            Basic <see cref="T:OpenGL.Objects.IImageCodecPlugin"/> implementation based on actual .NET framework implementation.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.CoreImagingImageCodecPlugin.Name">
            <summary>
            Plugin name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.CheckAvailability">
            <summary>
            Determine whether this plugin is available for the current process.
            </summary>
            <returns>
            It returns a boolean value indicating whether the plugin is available for the current
            process.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.CoreImagingImageCodecPlugin.SupportedReadFormats">
            <summary>
            Gets the list of media formats supported for reading.
            </summary>
            <value>
            The supported formats which this media codec plugin can read.
            </value>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.IsReadSupported(System.String)">
            <summary>
            Check whether an media format is supported for reading.
            </summary>
            <param name="format">
            A <see cref="T:System.String"/> that specify the media format to test for read support.
            </param>
            <returns>
            A <see cref="T:OpenGL.Boolean"/> indicating whether <paramref name="format"/> is supported.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.CoreImagingImageCodecPlugin.SupportedWriteFormats">
            <summary>
            Gets the list of media formats supported for writing.
            </summary>
            <value>
            The supported formats which this media codec plugin can write.
            </value>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.IsWriteSupported(System.String)">
            <summary>
            Check whether an media format is supported for writing.
            </summary>
            <param name="format">
            An <see cref="T:System.String"/> that specify the media format to test for write support.
            </param>
            <returns>
            A <see cref="T:OpenGL.Boolean"/> indicating whether <paramref name="format"/> is supported.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.GetPriority(System.String)">
            <summary>
            Determine the plugin priority for a certain image format.
            </summary>
            <param name="format">
            An <see cref="T:OpenGL.Objects.ImageFormat"/> specifying the image format to test for priority.
            </param>
            <returns>
            It returns an integer value indicating the priority of this implementation respect other ones supporting the same
            image format. Conventionally, a value of 0 indicates a totally impartial plugin implementation; a value less than 0 indicates
            a more confident implementation respect other plugins; a value greater than 0 indicates a fallback implementation respect other
            plugins.
            
            This implementation of this routine returns -1. The reasoning is that this plugin implementation is very slow in Query and Load, due
            the .NET abstraction. However, it is a very usefull fallback plugin since it can open the most of common image formats.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.QueryInfo(System.String,OpenGL.Objects.ImageCodecCriteria)">
            <summary>
            Query media informations.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the media path.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <see cref="T:OpenGL.Objects.ImageInfo"/> containing information about the specified media.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.QueryInfo(System.IO.Stream,OpenGL.Objects.ImageCodecCriteria)">
            <summary>
            Query media informations.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the media path.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <see cref="T:OpenGL.Objects.ImageInfo"/> containing information about the specified media.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.Load(System.String,OpenGL.Objects.ImageCodecCriteria)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <see cref="T:OpenGL.Objects.Image"/> holding the media data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.Load(System.IO.Stream,OpenGL.Objects.ImageCodecCriteria)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <see cref="T:OpenGL.Objects.Image"/> holding the media data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.LoadFromBitmap(System.Drawing.Bitmap,OpenGL.Objects.ImageCodecCriteria)">
            <summary>
            Internal method for creating Image from Bitmap.
            </summary>
            <param name="bitmap">
            A <see cref="!:Drawing.Bitmap"/> to be converted into an <see cref="T:OpenGL.Objects.Image"/> instance.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify image conversion criteria.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.Image"/> instance that's equivalent to <paramref name="bitmap"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="bitmap"/> or <see cref="!:criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.LoadBitmapByLockBits(System.Drawing.Bitmap,OpenGL.Objects.Image)">
            <summary>
            Loads the bitmap by locking its bits.
            </summary>
            <param name="bitmap">
            A <see cref="!:Drawing.Bitmap"/> to be converted into an <see cref="T:OpenGL.Objects.Image"/> instance.
            </param>
            <param name='image'>
            A <see cref="T:OpenGL.Objects.Image"/> instance that will store <paramref name="bitmap"/> data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="bitmap"/> or <paramref name="image"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="image"/> line stride is greater than <paramref name="bitmap"/> line
            stride. This never happens if <paramref name="image"/> is dimensionally compatible with <paramref name="bitmap"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.LoadBitmapByPixel(System.Drawing.Bitmap,OpenGL.Objects.Image)">
            <summary>
            Loads the bitmap by cloning its data to a more compatible format.
            </summary>
            <param name="bitmap">
            A <see cref="!:Drawing.Bitmap"/> to be converted into an <see cref="T:OpenGL.Objects.Image"/> instance.
            </param>
            <param name='image'>
            A <see cref="T:OpenGL.Objects.Image"/> instance that will store <paramref name="bitmap"/> data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="bitmap"/> or <paramref name="image"/> is null.
            </exception>
            <remarks>
            <para>
            Cloning <paramref name="bitmap"/> is useful whenever the bitmap have a pixel format not directly portable
            to any well-known format (i.e. 1 bit pixel, palettized pixel, etc.).
            </para>
            <para>
            This method is very memory consuming, because cloning cause to use additionally memory.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.LoadBitmapByClone(System.Drawing.Bitmap,OpenGL.Objects.Image)">
            <summary>
            Loads the bitmap by cloning its data to a more compatible format.
            </summary>
            <param name="bitmap">
            A <see cref="!:Drawing.Bitmap"/> to be converted into an <see cref="T:OpenGL.Objects.Image"/> instance.
            </param>
            <param name='image'>
            A <see cref="T:OpenGL.Objects.Image"/> instance that will store <paramref name="bitmap"/> data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="bitmap"/> or <paramref name="image"/> is null.
            </exception>
            <remarks>
            <para>
            Cloning <paramref name="bitmap"/> is useful whenever the bitmap have a pixel format not directly portable
            to any well-known format (i.e. 1 bit pixel, palettized pixel, etc.).
            </para>
            <para>
            This method is very memory consuming, because cloning cause to use additionally memory.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.Save(System.String,OpenGL.Objects.Image,System.String,OpenGL.Objects.ImageCodecCriteria)">
            <summary>
            Save media to stream.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the media path.
            </param>
            <param name="image">
            A <see cref="T:OpenGL.Objects.Image"/> holding the data to be stored.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that specify the media format to used for saving <paramref name="image"/>.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an image stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/>, <paramref name="image"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.CoreImagingImageCodecPlugin.Save(System.IO.Stream,OpenGL.Objects.Image,System.String,OpenGL.Objects.ImageCodecCriteria)">
            <summary>
            Save media to stream.
            </summary>
            <param name="stream">
            A <see cref="!:IO.Stream"/> which stores the media data.
            </param>
            <param name="image">
            A <see cref="T:OpenGL.Objects.Image"/> holding the data to be stored.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that specify the media format to used for saving <paramref name="image"/>.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an image stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/>, <paramref name="image"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.ElementBuffer">
            <summary>
            Element buffer object.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.#ctor(OpenGL.DrawElementsType)">
            <summary>
            Construct an ElementBufferObject, implictly used with <see cref="F:OpenGL.BufferUsage.StaticDraw"/>.
            </summary>
            <param name="elementType">
            The <see cref="T:OpenGL.DrawElementsType"/> that specify how vertices are interpreted.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.#ctor(OpenGL.DrawElementsType,OpenGL.BufferUsage)">
            <summary>
            Construct an ElementBufferObject.
            </summary>
            <param name="elementType">
            The <see cref="T:OpenGL.DrawElementsType"/> that specify how vertices are interpreted.
            </param>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.#ctor(OpenGL.DrawElementsType,OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an ElementBufferObject.
            </summary>
            <param name="elementType">
            The <see cref="T:OpenGL.DrawElementsType"/> that specify how vertices are interpreted.
            </param>
            <param name="usageMask">
            An <see cref="T:OpenGL.MapBufferUsageMask"/> that specify the buffer storage usage mask.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.#ctor(System.Type,OpenGL.BufferUsage)">
            <summary>
            Construct an ElementBufferObject.
            </summary>
            <param name="elementType">
            
            </param>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.#ctor(System.Type,OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an ElementBufferObject.
            </summary>
            <param name="elementType">
            
            </param>
            <param name="usageMask">
            An <see cref="T:OpenGL.MapBufferUsageMask"/> that specify the buffer storage usage mask.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ElementBuffer.ElementsType">
            <summary>
            The type of the array elements.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ElementBuffer.ArrayType">
            <summary>
            Get the <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> corresponding to <see cref="F:OpenGL.Objects.ElementBuffer.ElementsType"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ElementBuffer.RestartIndexEnabled">
            <summary>
            Flag that specify whether the restart index is enabled for this ElementBufferObject. It defaults to false.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ElementBuffer.RestartIndexKey">
            <summary>
            The restart index value (fixed).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.GetRestartIndices(System.IntPtr[]@)">
            <summary>
            Utility routine for extracting 
            </summary>
            <param name="count">
            
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="F:OpenGL.Objects.ElementBuffer.PrimitiveRestartOffsets">
            <summary>
            Offset of the primitives at each restart.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ElementBuffer.PrimitiveRestartCounts">
            <summary>
            Number of indices composing the restarted primitives.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ElementBuffer.ArraySectionsCount">
            <summary>
            Get the count of the array sections aggregated in this ArrayBufferObjectBase.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Exception always thrown.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.GetArraySection(System.UInt32)">
            <summary>
            Get the specified section information.
            </summary>
            <param name="index">
            The <see cref="T:System.UInt32"/> that specify the array section index.
            </param>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.ArrayBufferBase.IArraySection"/> defining the array section.
            </returns>
            <exception cref="T:System.NotImplementedException">
            Exception always thrown.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.ToArray">
            <summary>
            Convert the client buffer in a strongly-typed array.
            </summary>
            <returns>
            It returns an <see cref="T:System.Array"/> having all items stored by this ArrayBufferObjectBase.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.ToArray(OpenGL.Objects.GraphicsContext)">
            <summary>
            Convert the GPU buffer in a strongly-typed array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that has created this ArrayBufferObject.
            </param>
            <returns>
            It returns an <see cref="T:System.Array"/> having all items stored by this ArrayBufferObjectBase.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this ArrayBufferObject does not exist for <paramref name="ctx"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this BufferObject resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject has not client memory allocated and the hint is different from
            <see cref="!:BufferHint.StaticCpuDraw"/> or <see cref="!:BufferHint.DynamicCpuDraw"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is currently mapped.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.ElementBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#ItemType">
            <summary>
            The type of the elements of the array section.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ElementBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#Normalized">
            <summary>
            Get whether the array elements should be meant normalized (fixed point precision values).
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ElementBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#Pointer">
            <summary>
            Get the actual array buffer pointer. It could be <see cref="F:System.IntPtr.Zero"/> indicating an actual GPU
            buffer reference.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ElementBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#Offset">
            <summary>
            Offset of the first element of the array section, in bytes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ElementBuffer.OpenGL#Objects#ArrayBufferBase#IArraySection#Stride">
            <summary>
            Offset between two element of the array section, in bytes.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ElementBuffer`1">
            <summary>
            Element buffer object.
            </summary>
            <typeparam name="T">
            The generic type must be <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/> or <see cref="T:System.UInt32"/>, otherwise
            the constructors will throw an exception.
            </typeparam>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer`1.#ctor">
            <summary>
            Construct an ElementBufferObject, implictly used with <see cref="!:BufferHint.StaticCpuDraw"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer`1.#ctor(OpenGL.BufferUsage)">
            <summary>
            Construct an ElementBufferObject.
            </summary>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hints.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ElementBuffer`1.#ctor(OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an ElementBufferObject.
            </summary>
            <param name="usageMask">
            An <see cref="T:OpenGL.MapBufferUsageMask"/> that specify the buffer storage usage mask.
            </param>
        </member>
        <member name="P:OpenGL.Objects.ElementBuffer`1.DefaultRestartIndex">
            <summary>
            The default restart index for this ElementBuffer.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.FeedbackBufferFormat">
            <summary>
            Feedback buffer format.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FeedbackBufferFormat.Separated">
            <summary>
            Feedback varyings are stored in separated buffer objects.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FeedbackBufferFormat.Interleaved">
            <summary>
            Feedback varyings are stored in a single buffer object, interleaved with each other.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.FeedbackBuffer">
            <summary>
            Feedback buffer object.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.#ctor">
            <summary>
            Construct an FeedbackBufferObject.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.ArrayAttachment.#ctor(OpenGL.Objects.ArrayBufferBase,System.UInt32)">
            <summary>
            
            </summary>
            <param name="arrayBuffer"></param>
            <param name="sectionIndex"></param>
        </member>
        <member name="F:OpenGL.Objects.FeedbackBuffer.ArrayAttachment.ArrayBuffer">
            <summary>
            The array buffer object used as transform feedback target.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FeedbackBuffer.ArrayAttachment.ArraySectionIndex">
            <summary>
            The vertex array sub-buffer index.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.ArrayAttachment.Dispose">
            <summary>
            Dispose this VertexArray.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FeedbackBuffer._AttachedArrays">
            <summary>
            The attached arrays to this feedback buffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.Begin(OpenGL.Objects.GraphicsContext,OpenGL.PrimitiveType)">
            <summary>
            Binds the array buffer attached to.
            </summary>
            <param name='index'>
            Index.
            </param>
            <exception cref='T:System.InvalidOperationException'>
            Is thrown when an operation cannot be performed.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.End(OpenGL.Objects.GraphicsContext)">
            <summary>
            Binds the array buffer attached to.
            </summary>
            <param name='index'>
            Index.
            </param>
            <exception cref='T:System.InvalidOperationException'>
            Is thrown when an operation cannot be performed.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.FeedbackBuffer.EnableRasterizer">
            <summary>
            The rasterizer enabled flag.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.FeedbackBuffer.ThisObjectClass">
            <summary>
            Feedback buffer object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.FeedbackBuffer.ObjectClass">
            <summary>
            Feedback buffer object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this FeedbackBufferObject really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this BufferObject exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this BufferObject (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            <para>
            This implementation check whether the GL_ARB_transform_feedback2 is implemented.
            </para>
            </returns>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a BufferObject name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this buffer object name.
            </param>
            <returns>
            It returns a valid object name for this BufferObject.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a BufferObject name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this buffer object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.Dispose(OpenGL.Objects.GraphicsContext)">
            <summary>
            Dispose graphics resources using the underlying <see cref="T:OpenGL.Objects.GraphicsContext"/>.
            </summary>
            <param name='ctx'>
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which have access to the <see cref="!:IRenderDisposable"/> graphics resources.
            </param>
            <remarks>
            <para>
            The instance shall be considered disposed as it were called <see cref="M:System.IDisposable.Dispose"/>, but in addition
            this method will release this instance resources.
            </para>
            <para>
            The <see cref="!:Dispose()"/> method should try to release the underlying resources by getting the optional graphics
            context current on the calling thread.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.BindCore(OpenGL.Objects.GraphicsContext)">
            <summary>
            Virtual Bind implementation.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.FeedbackBuffer.UnbindCore(OpenGL.Objects.GraphicsContext)">
            <summary>
            Virtual Unbind implementation.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Framebuffer">
            <summary>
            OpenGL framebuffer.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Framebuffer.Attachment">
            <summary>
            Generic attachment to Framebuffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.Attachment.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the resource of this attachment.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this attachment.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.Attachment.Attach(OpenGL.FramebufferTarget,OpenGL.FramebufferAttachment)">
            <summary>
            Attach this Attachment.
            </summary>
            <param name="target">
            The target of the attachment.
            </param>
            <param name="attachment">
            The index of the attachment, in case the attachment type allow multiple attachments (i.e. color).
            </param>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer.Attachment.Dirty">
            <summary>
            Attachment is dirty (potentionally not bound to this framebuffer)
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.Attachment.Width">
            <summary>
            The width of the attachment, in pixels.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.Attachment.Height">
            <summary>
            The height of the attachment, in pixels.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.Attachment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Framebuffer.RenderBufferAttachment">
            <summary>
            RenderBuffer attachment to Framebuffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.RenderBufferAttachment.#ctor(OpenGL.Objects.RenderBuffer)">
            <summary>
            Construct a RenderBufferAttachment that attach a <see cref="T:OpenGL.Objects.RenderBuffer"/>.
            </summary>
            <param name="buffer">
            The <see cref="T:OpenGL.Objects.RenderBuffer"/> to attach to a Framebuffer.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.RenderBufferAttachment.Buffer">
            <summary>
            The attached <see cref="T:OpenGL.Objects.RenderBuffer"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer.RenderBufferAttachment._Buffer">
            <summary>
            The attached <see cref="T:OpenGL.Objects.RenderBuffer"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.RenderBufferAttachment.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the resource of this attachment.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this attachment.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.RenderBufferAttachment.Attach(OpenGL.FramebufferTarget,OpenGL.FramebufferAttachment)">
            <summary>
            Attach this Attachment.
            </summary>
            <param name="target">
            The target of the attachment.
            </param>
            <param name="attachment">
            The index of the attachment, in case the attachment type allow multiple attachments (i.e. color).
            </param>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.RenderBufferAttachment.Width">
            <summary>
            The width of the attachment, in pixels.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.RenderBufferAttachment.Height">
            <summary>
            The height of the attachment, in pixels.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.RenderBufferAttachment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Framebuffer.TextureAttachment">
            <summary>
            Texture attachment to Framebuffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureAttachment.#ctor(OpenGL.Objects.Texture)">
            <summary>
            Construct a TextureAttachment specifing the texture.
            </summary>
            <param name="texture">
            The <see cref="P:OpenGL.Objects.Framebuffer.TextureAttachment.Texture"/> to be attached to a Framebuffer.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureAttachment.#ctor(OpenGL.Objects.Texture,System.UInt32)">
            <summary>
            Construct a TextureAttachment specifing the texture and its level.
            </summary>
            <param name="texture">
            The <see cref="P:OpenGL.Objects.Framebuffer.TextureAttachment.Texture"/> to be attached to a Framebuffer.
            </param>
            <param name="textureLevel">
            A <see cref="T:System.UInt32"/> that specify the level of <paramref name="texture"/> to be attached.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureAttachment.#ctor(OpenGL.Objects.Texture,System.UInt32,OpenGL.TextureTarget)">
            <summary>
            Construct a TextureAttachment specifing the texture, its level and possibly a specific texture target.
            </summary>
            <param name="texture">
            The <see cref="P:OpenGL.Objects.Framebuffer.TextureAttachment.Texture"/> to be attached to a Framebuffer.
            </param>
            <param name="textureLevel">
            A <see cref="T:System.UInt32"/> that specify the level of <paramref name="texture"/> to be attached.
            </param>
            <param name="textureTarget">
            A specific <see cref="F:OpenGL.Objects.Framebuffer.TextureAttachment.TextureTarget"/> to used with <see cref="M:OpenGL.Gl.FramebufferTexture2D(OpenGL.FramebufferTarget,OpenGL.FramebufferAttachment,OpenGL.TextureTarget,System.UInt32,System.Int32)"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.TextureAttachment.Texture">
            <summary>
            The attached texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer.TextureAttachment._Texture">
            <summary>
            The attached texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer.TextureAttachment.TextureLevel">
            <summary>
            The texture level used for attachment.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer.TextureAttachment.TextureTarget">
            <summary>
            The attached texture target.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureAttachment.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the resource of this attachment.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this attachment.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureAttachment.Attach(OpenGL.FramebufferTarget,OpenGL.FramebufferAttachment)">
            <summary>
            Attach this Attachment.
            </summary>
            <param name="target">
            The target of the attachment.
            </param>
            <param name="attachment">
            The index of the attachment, in case the attachment type allow multiple attachments (i.e. color).
            </param>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.TextureAttachment.Width">
            <summary>
            The width of the attachment, in pixels.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.TextureAttachment.Height">
            <summary>
            The height of the attachment, in pixels.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureAttachment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Framebuffer.TextureRectangleAttachment">
            <summary>
            Texture attachment to Framebuffer (specialization for <see cref="T:OpenGL.Objects.TextureRectangle"/>).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureRectangleAttachment.#ctor(OpenGL.Objects.TextureRectangle)">
            <summary>
            Construct a TextureRectangleAttachment specifing the texture.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureRectangle"/> to be attached to a Framebuffer.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Framebuffer.TextureCubeAttachment">
            <summary>
            Texture attachment to Framebuffer (specialization for <see cref="T:OpenGL.Objects.TextureCube"/>).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureCubeAttachment.#ctor(OpenGL.Objects.TextureCube,OpenGL.Objects.TextureCube.CubeFace)">
            <summary>
            Construct a TextureCubeAttachment specifing the texture.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureCube"/> to be attached to a Framebuffer.
            </param>
            <param name="cubeFace">
            The specific <see cref="T:OpenGL.Objects.TextureCube.CubeFace"/> to attach to a Framebuffer.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureCubeAttachment.#ctor(OpenGL.Objects.TextureCube,OpenGL.Objects.TextureCube.CubeFace,System.UInt32)">
            <summary>
            Construct a TextureCubeAttachment specifing the texture.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureCube"/> to be attached to a Framebuffer.
            </param>
            <param name="cubeFace">
            The specific <see cref="T:OpenGL.Objects.TextureCube.CubeFace"/> to attach to a Framebuffer.
            </param>
            <param name="textureLevel">
            A <see cref="T:System.UInt32"/> that specify the level of <paramref name="texture"/> to be attached.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Framebuffer.TextureArrayAttachment">
            <summary>
            Texture attachment to Framebuffer (specialization for <see cref="T:OpenGL.Objects.TextureArray2D"/> and <see cref="T:OpenGL.Objects.Texture3D"/>).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureArrayAttachment.#ctor(OpenGL.Objects.TextureArray2D,System.UInt32)">
            <summary>
            Construct a Texture3dAttachment specifing the texture.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureCube"/> to be attached to a Framebuffer.
            </param>
            <param name="layer">
            A <see cref="T:System.UInt32"/> the specify the layer of <paramref name="texture"/> to attach.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureArrayAttachment.#ctor(OpenGL.Objects.TextureArray2D,System.UInt32,System.UInt32)">
            <summary>
            Construct a Texture3dAttachment specifing the texture.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureCube"/> to be attached to a Framebuffer.
            </param>
            <param name="layer">
            A <see cref="T:System.UInt32"/> the specify the layer of <paramref name="texture"/> to attach.
            </param>
            <param name="textureLevel">
            A <see cref="T:System.UInt32"/> that specify the level of <paramref name="texture"/> to be attached.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer.TextureArrayAttachment.Depth">
            <summary>
            The depth of the 2D texture to attach.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.TextureArrayAttachment.Attach(OpenGL.FramebufferTarget,OpenGL.FramebufferAttachment)">
            <summary>
            Attach this Attachment.
            </summary>
            <param name="target">
            The target of the attachment.
            </param>
            <param name="attachment">
            The index of the attachment, in case the attachment type allow multiple attachments (i.e. color).
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.AttachColor(System.UInt32,OpenGL.Objects.RenderBuffer)">
            <summary>
            Attach a render buffer image to color buffer.
            </summary>
            <param name="attachment">
            A <see cref="T:System.UInt32"/> that specify the framebuffer color attachment index.
            </param>
            <param name="buffer">
            A <see cref="T:OpenGL.Objects.RenderBuffer"/> which will be used for read/write operation on this RenderFrambuffer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.AttachColor(System.UInt32,OpenGL.Objects.Texture2D)">
            <summary>
            Attach a 2D texture image to color buffer.
            </summary>
            <param name="attachment">
            A <see cref="T:System.UInt32"/> that specify the framebuffer color attachment index.
            </param>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture2D"/> which will be used for read/write operation on this RenderFrambuffer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.AttachColor(System.UInt32,OpenGL.Objects.Texture2D,System.UInt32)">
            <summary>
            Attach a 2D texture image to color buffer.
            </summary>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture"/> which will be used for read/write operation on this RenderFrambuffer.
            </param>
            <param name="level">
            A <see cref="T:System.UInt32"/> that specify the texture level to bind.
            </param>
            <param name="attachment">
            A <see cref="T:System.UInt32"/> that specify the framebuffer color attachment index.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.AttachColor(System.UInt32,OpenGL.Objects.TextureRectangle)">
            <summary>
            Attach a rectangle texture image to color buffer.
            </summary>
            <param name="attachment">
            A <see cref="T:System.UInt32"/> that specify the framebuffer color attachment index.
            </param>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture"/> which will be used for read/write operation on this RenderFrambuffer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.AttachColor(System.UInt32,OpenGL.Objects.Framebuffer.Attachment)">
            <summary>
            Attach a texture image to color buffer.
            </summary>
            <param name="attachment">
            A <see cref="T:System.UInt32"/> that specify the framebuffer color attachment index.
            </param>
            <param name="attachment">
            A <see cref="T:OpenGL.Objects.Framebuffer.Attachment"/> which will be used for read/write operation on this RenderFrambuffer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.DetachColor(System.UInt32)">
            <summary>
            Detach a color attachment.
            </summary>
            <param name="attachment">
            A <see cref="T:System.UInt32"/> that specify the framebuffer color attachment index.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.DetachColors">
            <summary>
            Detach all color attachment.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer._ColorBuffers">
            <summary>
            RenderBuffers used as color attachment.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.DetachDepth">
            <summary>
            Detach depth buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer._DepthAttachment">
            <summary>
            Depth attachment.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.AttachStencil(OpenGL.Objects.RenderBuffer)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.DetachStencil">
            <summary>
            Detach stencil buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer._StencilBuffer">
            <summary>
            RenderBuffer used as depth attachment.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.ReadColorBuffer(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Read this GraphicsSurface color buffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/>
            </param>
            <param name="attachment">
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> that specify the x coordinate of the lower left corder of the rectangle area to read.
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> that specify the y coordinate of the lower left corder of the rectangle area to read.
            </param>
            <param name="width">
            A <see cref="T:System.Int32"/> that specify the width of the rectangle area to read.
            </param>
            <param name="height">
            A <see cref="T:System.Int32"/> that specify the height of the rectangle area to read.
            </param>
            <param name="pType">
            A <see cref="T:OpenGL.PixelLayout"/> which determine the pixel storage of the returned image.
            </param>
            <returns>
            It returns an <see cref="T:OpenGL.Objects.Image"/> representing the current read buffer <paramref name="rBuffer"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.CopyColorBuffer(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,System.UInt32,OpenGL.Objects.Texture@,System.UInt32)">
            <summary>
            Copy this GraphicsSurface color buffer into a buffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/>
            </param>
            <param name="attachment">
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> that specify the x coordinate of the lower left corder of the rectangle area to read.
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> that specify the y coordinate of the lower left corder of the rectangle area to read.
            </param>
            <param name="texture">
            </param>
            <param name="level">
            </param>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.Width">
            <summary>
            GraphicsSurface width property. 
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.Height">
            <summary>
            GraphicsSurface height property. 
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.GetDeviceContext">
            <summary>
            Get the device context associated to this Framebuffer. 
            </summary>
            <returns>
            It always returns <see cref="F:System.IntPtr.Zero"/>, since no device context is related to this render
            surface.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.BufferFormat">
            <summary>
            Current surface configuration.
            </summary>
            <remarks>
            <para>
            This read-only property shall return a <see cref="!:GraphicsBuffersFormat"/> indicating the current
            buffer configuration. The object returned shall not be used to modify this GraphicsSurface buffers,
            but it shall be used to know which is the buffer configuration.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.BindDraw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this GraphicsSurface for drawing.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to wich associate its rendering result to this GraphicsSurface.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.UnbindDraw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Unbind this GraphicsSurface for drawing.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to wich disassociate its rendering result from this GraphicsSurface.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.BindRead(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this GraphicsSurface for reading.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to wich associate its read result to this GraphicsSurface.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.UnbindRead(OpenGL.Objects.GraphicsContext)">
            <summary>
            Unbind this GraphicsSurface for reading.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to wich disassociate its read result from this GraphicsSurface.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.Validate(OpenGL.Objects.GraphicsContext)">
            <summary>
            Validate this Framebuffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for validating this Framebuffer.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown whenever this Framebuffer is not valid.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.Swappable">
            <summary>
            Determine whether this surface has to be swapped.
            </summary>
            <remarks>
            This routine returns always 'false', since the framebuffer cannot be defined with a double buffer.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.SwapInterval">
            <summary>
            Gets or sets the buffer swap interval desired on this surface.
            </summary>
            <remarks>
            This property returns always 0.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this property is set with any value.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.SwapSurface">
            <summary>
            Swap render surface. 
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This exception is always thrown since <see cref="P:OpenGL.Objects.Framebuffer.Swappable"/> returns always 'false'.
            </exception>
            <remarks>
            Do not call this routine.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.Framebuffer.ThisObjectClass">
            <summary>
            GraphicsResource object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Framebuffer.ObjectClass">
            <summary>
            GraphicsResource object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this Framebuffer really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this Framebuffer exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this Framebuffer (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a Framebuffer name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns a valid object name for this GraphicsResource.
            </returns>
            <exception cref="T:System.NotImplementedException">
            Exception always thrown.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a Framebuffer name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Framebuffer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:OpenGL.Boolean"/> indicating whether this method is called by <see cref="!:Dispose()"/>. If it is false,
            this method is called by the finalizer.
            </param>
        </member>
        <member name="T:OpenGL.Objects.GraphicsContext">
            <summary>
            Graphics context.
            </summary>
            <remarks>
            <para>
            A GraphicsContext represents an attachment to the graphic operations. It actually store the graphic state, which determines the
            graphical pipeline results.
            </para>
            <para>
            To construct a GraphicsContext instance, it is necessary a device context. The device context is a OS handle which represents a
            specific graphical device. You can note that there are constructors which does not require a device context parameter: in this cases
            a common device context is used implicitly.
            </para>
            <para>
            Respect a particoular version requested, it is possible that the current OpenGL implementation returns a context that doesn't have the exact
            OpenGL version requested. In this cases it is assured that the OpenGL version requested it is implemented (i.e. actual OpenGL version is a
            superset of the requested one).
            
            Without those OpenGL extensions, it won't be possible to request a different OpenGL implementation from the current one, which is queriable
            by accessing to <see cref="P:OpenGL.Objects.GraphicsContext.Extensions"/>.
            </para>
            <para>
            It is possible to share resources with other GraphicsContext instances by specifying a GraphicsContext parameter at construction time. The
            resources could be shared are listed in <see cref="T:OpenGL.Objects.IGraphicsResource"/>. There can be sharing compatibility issues by sharing resources
            having different OpenGL implementations.
            
            As generale rule, when an OpenGL version introduce a new object space class not implemented by another version, those two OpenGL version
            cannot share object spaces.
            </para>
            <para>
            GraphicsContext define OpenGL implementation capabilities with the type <see cref="T:OpenGL.Gl.Extensions"/>. This type collection
            useful information about a specific OpenGL implementation. It defines general information, implementation limits and extension support.
            
            GraphicsContext exposes the current implementation capabilities by the static property <see cref="P:OpenGL.Objects.GraphicsContext.Extensions"/>. This information
            is static, and it represent the most extended implementation currently available. Normally this property is not used for testing OpenGL support
            and limits, since this information is dependent on the current context, which could not be a GraphicsContext with the current OpenGL version (because
            it is possible to request a specific OpenGL implementation version).
            
            Since each OpenGL implementation version can support any OpenGL extension combination, each GraphicsContext has its own OpenGL support, which could
            differ from the current OpenGL support.
            
            Because this, all methods which depends on OpenGL support take a parameter of type GraphicsContext: that parameter is used to test effective support
            and limits for the specific OpenGL context. Testing OpenGL context capabilities by means of <see cref="P:OpenGL.Objects.GraphicsContext.Extensions"/> could lead to
            invalid operations since those capabilities are not referred to the currently bound context.
            </para>
            <para>
            Since the device context is constructed by specifying a device context, it is able to detect ... remove public interface!
            </para>
            <para>
            Before any operation, the GraphicsContext has to be current. Only one current context per thread is allowed, but multiple context can made current on
            a thread one at time. Once a GraphicsContext is current on a thread, it is possible to issue rendering commands, and the rendering commands result is
            dependent on the current GraphicsContext.
            
            Issuing rendering commands without having a current context on the thread will lead to exceptions.
            
            A GraphicsContext is made current by calling <see cref="M:OpenGL.Objects.GraphicsContext.MakeCurrent(System.Boolean)"/>. It is
            possible to check the GraphicsContext currency by calling <see cref="P:OpenGL.Objects.GraphicsContext.IsCurrent"/>, or getting the current GraphicsContext for the thread
            by calling <see cref="M:OpenGL.Objects.GraphicsContext.GetCurrentContext"/>.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.#ctor(OpenGL.DeviceContext)">
            <summary>
            Construct a GraphicsContext.
            </summary>
            <param name="deviceContext">
            A <see cref="T:OpenGL.DeviceContext"/> that specify the device context which has to be linked this
            this Render context.
            </param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown in the case <paramref name="deviceContext"/> is <see cref="F:System.IntPtr.Zero"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This exception is thrown in the case it's not possible to create a valid OpenGL context.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.#ctor(OpenGL.DeviceContext,OpenGL.Objects.GraphicsContext)">
            <summary>
            Construct a GraphicsContext specifying the implemented OpenGL version.
            </summary>
            <param name="deviceContext">
            A <see cref="T:OpenGL.DeviceContext"/> that specify the device context which has to be linked this
            this Render context.
            </param>
            <param name="sharedContext">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that specify the render context which has to be linked this
            this Render context (to share resource with it).
            </param>
            <exception cref="T:System.ArgumentException">
            This exception is thrown in the case <paramref name="deviceContext"/> is <see cref="F:System.IntPtr.Zero"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This exception is thrown in the case it's not possible to create a valid OpenGL context.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if <paramref name="sharedContext"/> is not null and it was created by a thread different from the calling one.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if <paramref name="sharedContext"/> is not null and it is disposed.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.#ctor(OpenGL.DeviceContext,OpenGL.Objects.GraphicsContext,Khronos.KhronosVersion)">
            <summary>
            Construct a GraphicsContext specifying the implemented OpenGL version.
            </summary>
            <param name="deviceContext">
            A <see cref="T:OpenGL.DeviceContext"/> that specify the device context which has to be linked this
            this Render context.
            </param>
            <param name="sharedContext">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that specify the render context which has to be linked this
            this Render context (to share resource with it).
            </param>
            <param name="version">
            A <see cref="T:Khronos.KhronosVersion"/> that specify the minimum OpenGL version required to implement.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown in the case <paramref name="version"/> is different from the currently implemented by the derive,
            and the OpenGL extension WGL_ARB_create_context_profile or WGL_ARB_create_context are not implemented.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown in the case <paramref name="version"/> specify a forward compatible version (greater than or equal to
            <see cref="F:OpenGL.Gl.Version_320"/>), and the OpenGL extension WGL_ARB_create_context_profile or WGL_ARB_create_context
            are not implemented.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown in the case <paramref name="deviceContext"/> is <see cref="F:System.IntPtr.Zero"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This exception is thrown in the case it's not possible to create a valid OpenGL context.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if <paramref name="sharedContext"/> is not null and it was created by a thread different from the calling one.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if <paramref name="sharedContext"/> is not null and it is disposed.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.#ctor(OpenGL.DeviceContext,System.IntPtr)">
            <summary>
            Construct a GraphicsContext wrapping an OpenGL context already created.
            </summary>
            <param name="deviceContext">
            The <see cref="T:OpenGL.DeviceContext"/> that has created <paramref name="glContext"/>.
            </param>
            <param name="glContext">
            A <see cref="T:System.IntPtr"/> that specifies the OpenGL context to be wrapped by this instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="deviceContext"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="glContext"/> is <see cref="F:System.IntPtr.Zero"/>.
            </exception>
            <remarks>
            <para>
            The created GraphicsContext is not aware about resource sharing about another GL context. Keep attention
            to the resource management.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.#ctor(OpenGL.DeviceContext,OpenGL.Objects.GraphicsContext,Khronos.KhronosVersion,OpenGL.Objects.GraphicsContextFlags)">
            <summary>
            Construct a GraphicsContext specifying the implemented OpenGL version.
            </summary>
            <param name="deviceContext">
            A <see cref="T:OpenGL.DeviceContext"/> that specify the device context which has to be linked this
            this Render context.
            </param>
            <param name="sharedContext">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that specify the render context which has to be linked this
            this Render context (to share resource with it).
            </param>
            <param name="version">
            A <see cref="T:Khronos.KhronosVersion"/> that specify the minimum OpenGL version required to implement.
            </param>
            <param name="flags">
            A <see cref="T:OpenGL.Objects.GraphicsContextFlags"/> that specify special features to enable in the case they are supported.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="deviceContext"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown in the case <paramref name="version"/> is different from the currently implemented by the derive,
            and the OpenGL extension WGL_ARB_create_context_profile or WGL_ARB_create_context are not implemented.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown in the case <paramref name="version"/> specify a forward compatible version (greater than or equal to
            <see cref="F:OpenGL.Gl.Version_320"/>), and the OpenGL extension WGL_ARB_create_context_profile or WGL_ARB_create_context
            are not implemented.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown in the case <paramref name="deviceContext"/> is <see cref="F:System.IntPtr.Zero"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This exception is thrown in the case it's not possible to create a valid OpenGL context.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if <paramref name="sharedContext"/> is not null and it was created by a thread different from the calling one.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if <paramref name="sharedContext"/> is not null and it is disposed.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.QueryInformation">
            <summary>
            Query implementation version, extensions and limits.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.InitializeResources">
            <summary>
            Initialize resources required by this GraphicsContext.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.InitializeResources(OpenGL.Objects.GraphicsContext)">
            <summary>
            Initialize resources required by this GraphicsContext.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.TerminateResources">
            <summary>
            Dispose resources required by this GraphicsContext.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.QueryDesktopContextInformation">
            <summary>
            Query information from an OpenGL desktop context.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.QueryEmbeddedContextInformation">
            <summary>
            Query information from an OpenGL embedded context.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.Version">
            <summary>
            The OpenGL version implemented by this GraphicsContext.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.ShadingVersion">
            <summary>
            The OpenGL Shading Language version implemented by this GraphicsContext.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.Flags">
            <summary>
            Flags used to create this GraphicsContext.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.IsCompatibleProfile">
            <summary>
            The compatibility profile presence implemented by this GraphicsContext.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.Extensions">
            <summary>
            OpenGL extensions supported by this GraphicsContext instance.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.Limits">
            <summary>
            OpenGL implementation limits for this GraphicsContext instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.GetDefaultContext(System.Guid)">
            <summary>
            Get the default context for the specified object namespace.
            </summary>
            <param name="objectNamespace">
            A <see cref="T:System.Guid"/> that specifies the GraphicsContext namespace.
            </param>
            <returns>
            It returns the first GraphicsContext having <paramref name="objectNamespace"/> as object namespace.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.ObjectNameSpace">
            <summary>
            GraphicsContext object namespace.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.InitializeNamespace">
            <summary>
            Initialize the GraphicsContext namespace.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.TerminateNamespace">
            <summary>
            Terminate the GraphicsContext namespace.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ContextByNamespace">
            <summary>
            Collection of GraphicsContext instances by their namespace.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugEnableMessage(System.Boolean)">
            <summary>
            Enable or disable debugging messages.
            </summary>
            <param name="enabled">
            The <see cref="T:OpenGL.Boolean"/> that specifies whether affected messages must be enabled.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugEnableMessage(OpenGL.DebugSeverity,System.Boolean,System.UInt32[])">
            <summary>
            Enable or disable debugging messages.
            </summary>
            <param name="severity">
            The <see cref="T:OpenGL.DebugSeverity"/> that specifies the affected messages.
            </param>
            <param name="enabled">
            The <see cref="T:OpenGL.Boolean"/> that specifies whether affected messages must be enabled.
            </param>
            <param name="ids"></param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugEnableMessage(OpenGL.DebugSource,OpenGL.DebugType,OpenGL.DebugSeverity,System.Boolean,System.UInt32[])">
            <summary>
            Enable or disable debugging messages.
            </summary>
            <param name="source">
            The <see cref="T:OpenGL.DebugSource"/> that specifies the affected messages.
            </param>
            <param name="type">
            The <see cref="T:OpenGL.DebugType"/> that specifies the affected messages.
            </param>
            <param name="severity">
            The <see cref="T:OpenGL.DebugSeverity"/> that specifies the affected messages.
            </param>
            <param name="enabled">
            The <see cref="T:OpenGL.Boolean"/> that specifies whether affected messages must be enabled.
            </param>
            <param name="ids"></param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.InitializeDebugProfile">
            <summary>
            Initialize debugging utilities offered by OpenGL implementation.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.TerminateDebugProfile">
            <summary>
            Dispose resources allocated by <see cref="M:OpenGL.Objects.GraphicsContext.InitializeDebugProfile"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugMessageCallback(OpenGL.DebugSource,OpenGL.DebugType,System.UInt32,OpenGL.DebugSeverity,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Debug message callback.
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <param name="id"></param>
            <param name="severity"></param>
            <param name="length"></param>
            <param name="message"></param>
            <param name="userParam"></param>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._DebugMessageCallback">
            <summary>
            Debug callback (GL_ARB_debug_output).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugObjectLabel(OpenGL.Objects.Buffer,System.String)">
            <summary>
            Assign a label to a <see cref="T:OpenGL.Objects.Buffer"/>.
            </summary>
            <param name="debugObject">
            The <see cref="T:OpenGL.Objects.Buffer"/> labelled for debugging.
            </param>
            <param name="debugLabel">
            The <see cref="T:System.String"/> that specifies the debug label assigned to <paramref name="debugObject"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugObjectLabel(OpenGL.Objects.Shader,System.String)">
            <summary>
            Assign a label to a <see cref="T:OpenGL.Objects.Shader"/>.
            </summary>
            <param name="debugObject">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> labelled for debugging.
            </param>
            <param name="debugLabel">
            The <see cref="T:System.String"/> that specifies the debug label assigned to <paramref name="debugObject"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugObjectLabel(OpenGL.Objects.ShaderProgram,System.String)">
            <summary>
            Assign a label to a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
            <param name="debugObject">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> labelled for debugging.
            </param>
            <param name="debugLabel">
            The <see cref="T:System.String"/> that specifies the debug label assigned to <paramref name="debugObject"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugObjectLabel(OpenGL.Objects.VertexArrays,System.String)">
            <summary>
            Assign a label to a <see cref="T:OpenGL.Objects.VertexArrays"/>.
            </summary>
            <param name="debugObject">
            The <see cref="T:OpenGL.Objects.VertexArrays"/> labelled for debugging.
            </param>
            <param name="debugLabel">
            The <see cref="T:System.String"/> that specifies the debug label assigned to <paramref name="debugObject"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugObjectLabel(OpenGL.Objects.Texture,System.String)">
            <summary>
            Assign a label to a <see cref="T:OpenGL.Objects.Texture"/>.
            </summary>
            <param name="debugObject">
            The <see cref="T:OpenGL.Objects.Texture"/> labelled for debugging.
            </param>
            <param name="debugLabel">
            The <see cref="T:System.String"/> that specifies the debug label assigned to <paramref name="debugObject"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugObjectLabel(OpenGL.Objects.RenderBuffer,System.String)">
            <summary>
            Assign a label to a <see cref="T:OpenGL.Objects.RenderBuffer"/>.
            </summary>
            <param name="debugObject">
            The <see cref="T:OpenGL.Objects.RenderBuffer"/> labelled for debugging.
            </param>
            <param name="debugLabel">
            The <see cref="T:System.String"/> that specifies the debug label assigned to <paramref name="debugObject"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugObjectLabel(OpenGL.Objects.Framebuffer,System.String)">
            <summary>
            Assign a label to a <see cref="T:OpenGL.Objects.Framebuffer"/>.
            </summary>
            <param name="debugObject">
            The <see cref="T:OpenGL.Objects.Framebuffer"/> labelled for debugging.
            </param>
            <param name="debugLabel">
            The <see cref="T:System.String"/> that specifies the debug label assigned to <paramref name="debugObject"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DebugObjectLabel(OpenGL.ObjectIdentifier,OpenGL.Objects.IGraphicsResource,System.String)">
            <summary>
            Assign a label to a <see cref="T:OpenGL.Objects.IGraphicsResource"/>.
            </summary>
            <param name="id">
            </param>
            <param name="debugObject">
            The <see cref="T:OpenGL.Objects.Buffer"/> labelled for debugging.
            </param>
            <param name="debugLabel">
            The <see cref="T:System.String"/> that specifies the debug label assigned to <paramref name="debugObject"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.SetCurrentState(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Set the current state of this GraphicsContext.
            </summary>
            <param name="state">
            The <see cref="T:OpenGL.Objects.State.IGraphicsState"/> applied on the this GraphicsContext.
            </param>
            <remarks>
            This method is expected to be called by <see cref="M:OpenGL.Objects.State.IGraphicsState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)"/>
            implementations.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.GetCurrentState(System.Int32)">
            <summary>
            Get the a specific state of this GraphicsContext.
            </summary>
            <param name="stateIndex"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ServerState">
            <summary>
            Current state of this GraphicsContext.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.Bind(OpenGL.Objects.Texture)">
            <summary>
            Bind the specified Texture to the most appropriate texture unit.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture"/> to be bound to a texture unit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.ActiveTexture(System.UInt32)">
            <summary>
            Activate the specified texture unit.
            </summary>
            <param name="textureUnitIndex">
            The <see cref="T:System.UInt32"/> that specifies the texture unit index.
            </param>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ActiveTextureUnit">
            <summary>
            Current active texture unit index.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._TextureUnits">
            <summary>
            Texture units available for context.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._TextureUnitsIndex">
            <summary>
            Index of the least recently used binding point for <see cref="F:OpenGL.Objects.GraphicsContext._TextureUnits"/>
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.GetImageUnit(OpenGL.Objects.Texture,OpenGL.Objects.ImageUnitState)">
            <summary>
            Get the image unit most appropriate for a texture/preset combination.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture"/> to be bound on the returned image unit.
            </param>
            <param name="imageUnitState">
            The <see cref="T:OpenGL.Objects.ImageUnitState"/> used to setup <paramref name="texture"/> access.
            </param>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.ImageUnit"/> on which <paramref name="texture"/> should be bound. There are chances to
            avoid a GL command.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ImageUnits">
            <summary>
            Image units available for context.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ImageUnitsIndex">
            <summary>
            Index of the least recently used binding point for <see cref="F:OpenGL.Objects.GraphicsContext._ImageUnits"/>
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.Bind(OpenGL.Objects.IBindingResource,System.Boolean)">
            <summary>
            Bind the specified resource.
            </summary>
            <param name="bindingResource">
            The <see cref="T:OpenGL.Objects.IBindingResource"/> to be bound on this GraphicsContext.
            </param>
            <param name="force">
            A <see cref="T:System.Boolean"/> to ignore the currently bound <see cref="T:OpenGL.Objects.IBindingResource"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="bindingResource"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.Unbind(OpenGL.Objects.IBindingResource)">
            <summary>
            Unbind the specified resource.
            </summary>
            <param name="bindingResource">
            The <see cref="T:OpenGL.Objects.IBindingResource"/> to be bound on this GraphicsContext.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="bindingResource"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._BoundObjects">
            <summary>
            Map between binding points.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._BindingsUniform">
            <summary>
            Array reflecting the state of the context bindings for uniform buffers (<see cref="F:OpenGL.Gl.UNIFORM_BUFFER"/> target).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._BindingsUniformLruIndex">
            <summary>
            Index of the least recently used binding point for <see cref="F:OpenGL.Objects.GraphicsContext._BindingsUniform"/>
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext.InvalidBindingIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.BindIndex(OpenGL.Objects.IBindingIndexResource)">
            <summary>
            Bind the resource at the first usable index.
            </summary>
            <param name="bindingIndexResource">
            
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.BindIndex(OpenGL.Objects.IBindingIndexResource,System.UInt32)">
            <summary>
            Bind the resource at the specified index.
            </summary>
            <param name="bindingIndexResource"></param>
            <param name="bindingIndex"></param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.BindingIndexContext.#ctor(OpenGL.BufferTarget,System.UInt32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="maxBindingCount"></param>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext.BindingIndexContext._Target">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._BindingIndexes">
            <summary>
            Track binding indexes for each supported target.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.ResetProgram">
            <summary>
            Reset the current program bound.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.MergeShadersLibrary(System.String)">
            <summary>
            Loads resources from an XML-based description of resources.
            </summary>
            <param name="resourcePath">
            The path of the resource holding the XML document.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.CreateProgram(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.CreateProgram(System.String,OpenGL.Objects.ShaderCompilerContext,System.Boolean)">
            <summary>
            
            </summary>
            <param name="programId"></param>
            <param name="cctx"></param>
            <param name="link">
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.CreateProgram(OpenGL.Objects.ShadersLibrary.ProgramTag)">
            <summary>
            
            </summary>
            <param name="programTag"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.ComputeLibraryHash(OpenGL.Objects.ShadersLibrary.Program,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Determine an unique identifier that specify the shader program.
            </summary>
            <param name="libraryProgram">
            A <see cref="T:System.String"/> that identifies the shader object in library.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> determining the compiler parameteres.
            </param>
            <returns>
            It returns a string that identify the a shader program classified with <paramref name="libraryProgram"/> by
            specifying <paramref name="cctx"/> as compiled parameters.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ProgramCache">
            <summary>
            Program cache, indexed by compilation hash.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.GetSharedResource(System.String)">
            <summary>
            Get the shared resource by its identifier.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the resource identified. It cannot be null.
            </param>
            <returns>
            It returns the <see cref="T:System.Object"/> associated to <paramref name="id"/>. If no association is found,
            it returns null.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.SetSharedResource(System.String,System.Object)">
            <summary>
            Set a shared instance.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the resource identified. It cannot be null.
            </param>
            <param name="resource">
            The <see cref="T:System.Object"/> that specifies the shared resource. It cannot be null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="id"/> or <paramref name="resource"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._SharedObjects">
            <summary>
            Set of <see cref="T:OpenGL.Objects.IGraphicsResource"/> shared among objects using the same context.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.SetSharedResource(System.String,OpenGL.Objects.IGraphicsResource)">
            <summary>
            Set a shared <see cref="T:OpenGL.Objects.IGraphicsResource"/> instance.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the resource identified. It cannot be null.
            </param>
            <param name="resource">
            The <see cref="T:OpenGL.Objects.IGraphicsResource"/> that specifies the shared resource. It can be null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="id"/> or <paramref name="resource"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._SharedResources">
            <summary>
            Set of <see cref="T:OpenGL.Objects.IGraphicsResource"/> shared among objects using the same context.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DisposeSharedResources">
            <summary>
            Dispose all shared and linked resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DisposeResources">
            <summary>
            Dispose all resources
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.DisposeResource(OpenGL.Objects.IGraphicsResource)">
            <summary>
            Dispose a specific resource, later.
            </summary>
            <param name="resource">
            The <see cref="T:OpenGL.Objects.IGraphicsResource"/> to be disposed when <see cref="M:OpenGL.Objects.GraphicsContext.DisposeResources"/> is called.
            </param>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._DisposingGpuResources">
            <summary>
            List of <see cref="T:OpenGL.Objects.IGraphicsResource"/> to be disposed when more appropriate.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.MakeCurrent(System.Boolean)">
            <summary>
            Set this GraphicsContext current/uncurrent on current device.
            </summary>
            <param name="flag">
            A <see cref="T:OpenGL.Boolean"/> that specify the currency of this GraphicsContext on the
            device context used to create this GraphicsContext.
            </param>
            <remarks>
            <para>
            The current device is defined as follow:
            - If this GraphicsContext has never been current on a thread, the current device context is the one specified at construction time. In the case
              this GraphicsContext was not constructed specifying a device context, the common device context is the used one. Otherwise...
            - The last device context used to make current this context, by calling <see cref="M:OpenGL.DeviceContext.MakeCurrent(System.IntPtr)"/> or 
              <see cref="M:OpenGL.Objects.GraphicsContext.MakeCurrent(System.Boolean)"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            Exception throw if this GraphicsContext has been disposed. Once the GraphicsContext has been disposed it cannot be current again.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if this GraphicsContext cannot be made current/uncurrent on the device context specified at construction time.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.MakeCurrent(OpenGL.DeviceContext,System.Boolean)">
            <summary>
            Set this GraphicsContext current/uncurrent on device different from the one specified at construction time.
            </summary>
            <param name="deviceContext">
            A <see cref="T:OpenGL.DeviceContext"/> that specify the device context involved.
            </param>
            <param name="flag">
            A <see cref="T:OpenGL.Boolean"/> that specify the currency of this GraphicsContext on the
            device context <paramref name="deviceContext"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception throw in the case <paramref name="deviceContext"/> is <see cref="F:System.IntPtr.Zero"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Exception throw if this GraphicsContext has been disposed. Once the GraphicsContext has been disposed it cannot be current again.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if this GraphicsContext cannot be made current/uncurrent on the device context specified by <paramref name="deviceContext"/>.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.IsCurrent">
            <summary>
            Determine whether rendering context is current on the calling thread.
            </summary>
            <returns>
            It returns true if the render context is current on the calling thread, otherwise it returns false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.GetCurrentContext">
            <summary>
            Get the current GraphicsContext on the calling thread.
            </summary>
            <returns>
            It returns any GraphicsContext current on the calling thread. In the case no context is current, it returns null.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.Flush">
            <summary>
            Flush GraphicsContext commands.
            </summary>
            <remarks>
            Flushing rendering operations is automatically done by the system when it is more approriate. There's no need to
            call it manually.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._DeviceContext">
            <summary>
            Device context handle referred by GraphicsContext at construction time.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._CurrentDeviceContext">
            <summary>
            Device context handle referred by GraphicsContext when has became current.
            </summary>
            <remarks>
            <para>
            It could be different from <see cref="F:OpenGL.Objects.GraphicsContext._DeviceContext"/>. It will be used internally to make current this GraphicsContext
            on the correct device context.
            </para>
            <para>
            If its value is <see cref="F:System.IntPtr.Zero"/>, it means that this GraphicsContext has never been current on a thread.
            </para>
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.Handle">
            <summary>
            Get the underlying render context handle.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._RenderContext">
            <summary>
            Rendering context handle.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._RenderContextOwned">
            <summary>
            Flag indicating whether <see cref="F:OpenGL.Objects.GraphicsContext._RenderContext"/> is created by this instance.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._RenderContextThreadId">
            <summary>
            Thread identifier which has created this GraphicsContext.
            </summary>
            <remarks>
            This information is used for checking whether a context can be shared with another one: contextes must be created
            by the same thread. This would avoid an InvalidOperationException caused by constructors.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._RenderContextId">
            <summary>
            Unique identifier of this GraphicsContext.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._RenderThreads">
            <summary>
            Map between process threads and current render context.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._RenderThreadsLock">
            <summary>
            Object used for synchronizing <see cref="F:OpenGL.Objects.GraphicsContext._RenderThreads"/> accesses.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.CreateAsync(OpenGL.Objects.IGraphicsResource)">
            <summary>
            Execute <see cref="M:OpenGL.Objects.IGraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/> on the resource thread.
            </summary>
            <param name="graphicsResource"></param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.StartAsyncResourceThread">
            <summary>
            Create context to be current on <see cref="F:OpenGL.Objects.GraphicsContext._ResourceThread"/>, and start it.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.StopResourceThread">
            <summary>
            Release resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.ResourceThread">
            <summary>
            Resource thread.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ResourceContext">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ResourceThread">
            <summary>
            Thread used for CPU intensive, I/O bound operations or somewhat OpenGL object management.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ResourceThreadStop">
            <summary>
            Flag used to terminate <see cref="F:OpenGL.Objects.GraphicsContext._ResourceThread"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ResourceQueue">
            <summary>
            Queue of resources to be created on this <see cref="T:OpenGL.Objects.GraphicsContext"/>, in a separate thread.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ResourceQueueLock">
            <summary>
            Object used for synchronizing accesses to <see cref="F:OpenGL.Objects.GraphicsContext._ResourceQueue"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ResourceQueueSem">
            <summary>
            Semaphore used for synchronizing accesses to <see cref="F:OpenGL.Objects.GraphicsContext._ResourceQueue"/>.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.IncludeLibrary">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContext._ShaderIncludeLibrary">
            <summary>
            The shader include library used for compiling shaders.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsContext.IsProgramBinarySupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            </param>
            <remarks>
            This method shall be called by the same thread which has created this GraphicsContext, but only in the case the following
            constructors were called:
            - @ref GraphicsContext::GraphicsContext()
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if this GraphicsContext has not been disposed before finalization.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if it's not possible to release correctly the OpenGL context related to this GraphicsContext.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if the current thread is not the one which has constructed this GraphicsContext.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if it's not possible to release correctly the GDI device context related to this GraphicsContext.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if it's not possible to release correctly the OpenGL context related to this GraphicsContext.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if the current thread is not the one which has constructed this GraphicsContext.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception throw if it's not possible to release correctly the GDI device context related to this GraphicsContext.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.GraphicsContextFlags">
            <summary>
            Flags controlling the <see cref="T:OpenGL.Objects.GraphicsContext"/> bahvior.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.None">
            <summary>
            No flag.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.Debug">
            <summary>
            Construct a context using the debug profile.
            </summary>
            <remarks>
            One of the following extension must be implemented for supporting this flag:
            - GLX_ARB_create_context
            - WGL_ARB_create_context
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.ForwardCompatible">
            <summary>
            Constant a forward compatible context.
            </summary>
            <remarks>
            Forward compatibility is considered only if the following extensions are implemented:
            - GLX_ARB_create_context
            - WGL_ARB_create_context
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.Robust">
            <summary>
            Construct a context using the robust profile.
            </summary>
            <remarks>
            One of the following extensions set must be implemented for supporting this flag:
            - GLX_ARB_create_context, GLX_ARB_create_context_robustness and GL_ARB_robustness
            - WGL_ARB_create_context, WGL_ARB_create_context_robustness and GL_ARB_robustness
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.ResetIsolation">
            <summary>
            Reset event is guaranteed to do not affect other applications.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.CoreProfile">
            <summary>
            Construct a context using the compatibility profile.
            </summary>
            <remarks>
            One of the following extension must be implemented for supporting this flag:
            - GLX_ARB_create_context_profile
            - WGL_ARB_create_context_profile
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.CompatibilityProfile">
            <summary>
            Construct a context using the compatibility profile.
            </summary>
            <remarks>
            One of the following extension must be implemented for supporting this flag:
            - GLX_ARB_create_context_profile
            - WGL_ARB_create_context_profile
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.EmbeddedProfile">
            <summary>
            Constant a context using a ES/ES2 compatible implementation.
            </summary>
            <remarks>
            One of the following extensions set must be implemented for supporting this flag:
            - GLX_ARB_create_context_profile and GLX_EXT_create_context_es_profile/GLX_EXT_create_context_es2_profile
            - WGL_ARB_create_context_profile and WGL_EXT_create_context_es_profile/WGL_EXT_create_context_es2_profile
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsContextFlags.AsyncThread">
            <summary>
            Creates an asynchronous thread used for creating resources.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.GraphicsResource">
            <summary>
            Any resource that is involved in the graphics operations.
            </summary>
            <remarks>
            <para>
            This class in the main implementation of the <see cref="T:OpenGL.Objects.IGraphicsResource"/> interface. This is the suggested implementation; in the case it
            is not possible to inherit class (i.e. a class is already inheriting from another one), it is possible to implement directly the
            <see cref="T:OpenGL.Objects.IGraphicsResource"/>.
            </para>
            <para>
            Most of the IGraphicsResource interface is implemented. The GraphicsResource inheritors shall implement the following methods:
            - <see cref="M:OpenGL.Objects.GraphicsResource.CreateName(OpenGL.Objects.GraphicsContext)"/>: this method is virtual and it always throw a <see cref="T:System.NotImplementedException"/>. It shall generate an
              object name of a specific object class (determined by inheritor). It is called in the <see cref="M:OpenGL.Objects.IGraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/> implementation.
            - <see cref="M:OpenGL.Objects.GraphicsResource.CreateObject(OpenGL.Objects.GraphicsContext)"/>: this method is virtual, and it can be overriden to actually create an useful object. Base implementation
              is empty. It is called in the <see cref="M:OpenGL.Objects.IGraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/> implementation, after <see cref="M:OpenGL.Objects.GraphicsResource.CreateName(OpenGL.Objects.GraphicsContext)"/>.
            - <see cref="M:OpenGL.Objects.GraphicsResource.Delete(OpenGL.Objects.GraphicsContext)"/>: this method is abstract, and it shall delete the object name and resources of this GraphicsResource instance.
              The implementation is dependent on the specific object class (determined by inheritor).
            - <see cref="M:OpenGL.Objects.GraphicsResource.Exists(OpenGL.Objects.GraphicsContext)"/>: this method is virtual, but throw always <see cref="T:System.NotImplementedException"/>. Inheritor shall override this
              method since the implementation is dependent on the specific object class (determined by inheritor).
            </para>
            <para>
            This class defines also an invalid object name <see cref="F:OpenGL.Objects.GraphicsResource.InvalidObjectName"/>. Despite the name, this field doesn't actually specify
            an invalid object name for all object classes. OpenGL specification usually uses this value for indicating an invalid object name, but it
            is not always the case (i.e. for framebuffer objects, InvalidObjectName indicates the default framebuffer object).
            
            However, this name shall never be generated from <see cref="M:OpenGL.Objects.GraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.#ctor">
            <summary>
            Construct a GraphicsResource.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.#ctor(System.String)">
            <summary>
            Construct a GraphicsResource, specifying its identifier.
            </summary>
            <param name="identifier">
            A <see cref="T:System.String"/> that identifies this GraphicsResource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="identifier"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.GraphicsResource.InvalidObjectName">
            <summary>
            Invalid object name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            <para>
            It returns a boolean value indicating whether this GraphicsResource implementation requires a name
            generation on creation. In the case this routine returns true, the routine <see cref="M:OpenGL.Objects.GraphicsResource.CreateName(OpenGL.Objects.GraphicsContext)"/>
            will be called (and it must be overriden). In  the case this routine returns false, the routine
            <see cref="M:OpenGL.Objects.GraphicsResource.CreateName(OpenGL.Objects.GraphicsContext)"/> won't be called (and indeed it is not necessary to override it) and a
            name is generated automatically in a context-independent manner.
            </para>
            <para>
            This implementation returns always true.
            </para>
            </returns>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a GraphicsResource name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns a valid object name for this GraphicsResource.
            </returns>
            <exception cref="T:System.NotImplementedException">
            Exception always thrown.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a GraphicsResource name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
            <exception cref="T:System.NotImplementedException">
            Exception always thrown.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.GetFakeObjectName(System.Guid)">
            <summary>
            Utility routine for generating resource names by object class.
            </summary>
            <param name="objectClass">
            A <see cref="T:System.Guid"/> that specify the resource class.
            </param>
            <returns>
            It returns an unused name for the resource class <paramref name="objectClass"/>.
            </returns>
            <remarks>
            This routine must not be used for those resource named managed directly by the underlying
            OpenGL implementation.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsResource._ClientObjectNames">
            <summary>
            Common name database for objects not supported by OpenGL context.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsResource._ClientObjectNamesLock">
            <summary>
            Lock for accessing <see cref="F:OpenGL.Objects.GraphicsResource._ClientObjectNames"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.LinkResource(OpenGL.Objects.IGraphicsResource)">
            <summary>
            Link a resource used by this UserGraphicsResource.
            </summary>
            <param name="graphicsResource">
            The <see cref="T:OpenGL.Objects.IGraphicsResource"/> that will be linked by this UserGraphicsResource. It will be referenced till
            this instance disposition. You should not manually reference this instance for the UserGraphicsResource lifetime.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="graphicsResource"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.UnlinkResource(OpenGL.Objects.IGraphicsResource)">
            <summary>
            Unlink a resource used by this UserGraphicsResource.
            </summary>
            <param name="graphicsResource">
            The <see cref="T:OpenGL.Objects.IGraphicsResource"/> that will be unlinked from this UserGraphicsResource. It will be unreferenced.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="graphicsResource"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.UnlinkGpuResources">
            <summary>
            Unlink all resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.UnlinkGpuResources(OpenGL.Objects.GraphicsContext)">
            <summary>
            Unlink all resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.SwapGpuResources``1(``0,``0@)">
            <summary>
            Replace a linked resource with another one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="current"></param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.Swap``1(``0,``0@)">
            <summary>
            Replace a referenced resource with another one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="current"></param>
        </member>
        <member name="F:OpenGL.Objects.GraphicsResource._GpuResources">
            <summary>
            Resources used by this UserGraphicsResource.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.CheckValidContext(OpenGL.Objects.GraphicsContext)">
            <summary>
            Check whether the specified <see cref="T:OpenGL.Objects.GraphicsContext"/> is not null.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> to check.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.CheckCurrentContext(OpenGL.Objects.GraphicsContext)">
            <summary>
            Check whether the specified <see cref="T:OpenGL.Objects.GraphicsContext"/> is current on the calling thread.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> to check.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.CheckThisExistence(OpenGL.Objects.GraphicsContext)">
            <summary>
            Check whether this <see cref="T:OpenGL.Objects.GraphicsResource"/> exists for the specified <see cref="T:OpenGL.Objects.GraphicsContext"/>.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for checking existence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this <see cref="T:OpenGL.Objects.GraphicsResource"/> does not exists for <paramref name="ctx"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.CheckThatExistence(OpenGL.Objects.GraphicsContext,OpenGL.Objects.IGraphicsResource)">
            <summary>
            Check whether this <see cref="T:OpenGL.Objects.GraphicsResource"/> exists for the specified <see cref="T:OpenGL.Objects.GraphicsContext"/>.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for checking existence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this <see cref="T:OpenGL.Objects.GraphicsResource"/> does not exists for <paramref name="ctx"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:OpenGL.Boolean"/> indicating whether this method is called by <see cref="!:Dispose()"/>. If it is false,
            this method is called by the finalizer.
            </param>
        </member>
        <member name="P:OpenGL.Objects.GraphicsResource.Identifier">
            <summary>
            Resource identifier.
            </summary>
            <remarks>
            This string is used to identify this GraphicsResource among a collection.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.GraphicsResource.ObjectClass">
            <summary>
            Object class.
            </summary>
            <remarks>
            <para>
            The object class identify the resource type. It cannot be <see cref="F:System.Guid.Empty"/>, but a meaninfull
            value. The allowed values are determine in the concrete implementation of the IGraphicsResource
            implementation.
            </para>
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.GraphicsResource.ObjectName">
            <summary>
            Get the OpenGL object name generated for this GraphicsResource.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsResource.ObjectNamespace">
            <summary>
            OpenGL object namespace used for creating this GraphicsResource.
            </summary>
            <remarks>
            This property determine the correct association between this object and the render contextes used
            for drawing.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this GraphicsResource really exists.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current.
            </param>
            <returns>
            It returns a boolean value indicating whether this object exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The current implementation actually does not test for object existence, but it tests for object name space
            correspondence, indicating a relationship between this GraphicsResource and the GraphicsContext used for creating
            this resource.
            </para>
            <para>
            Inheritors that managed an OpenGL resource shall override this method in order to check the effective existence of
            this GraphicsResource agains <paramref name="ctx"/>. In counterpart, if the resource is not managed directly by
            OpenGL, this routine could be leaved as is.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create this GraphicsResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object. The object space of this <see cref="T:OpenGL.Objects.GraphicsContext"/> is used
            to generate <see cref="P:OpenGL.Objects.GraphicsResource.ObjectName"/>, and all contextes sharing lists with this parameter can handle this IGraphicsResource.
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> shall be current to the calling thread.
            </param>
            <remarks>
            <para>
            After this method, the resource must be in a "working" state, having all context-dependent information defined in the object
            namespace of the context <paramref name="ctx"/>.
            </para>
            <para>
            This method shall be the preferred way to allocate graphic resources. The allocation happens in the object namespace of
            <paramref name="ctx"/>, and an object cannot be allocated for more than one context at time. The normal way is to share
            the object namespace between different instances of <see cref="T:OpenGL.Objects.GraphicsContext"/> (de-facto they share the same object
            namespace.
            </para>
            <para>
            After a successfull call to Create, <see cref="M:OpenGL.Objects.GraphicsResource.Exists(OpenGL.Objects.GraphicsContext)"/> shall return true.
            </para>
            <para>
            The actual implementation does:
            - Creates an object name, if required. It the current implementation requires an object name (<see cref="M:OpenGL.Objects.GraphicsResource.RequiresName(OpenGL.Objects.GraphicsContext)"/>) it
              calls <see cref="M:OpenGL.Objects.GraphicsResource.CreateName(OpenGL.Objects.GraphicsContext)"/> method; otherwise, it automatically generate resource name based on <see cref="P:OpenGL.Objects.GraphicsResource.ObjectClass"/>
              property (resources having the same class will never have name conflicts, even of different render contextes).
            - Create the object. The actual implementation of the object creation is defined by <see cref="M:OpenGL.Objects.GraphicsResource.CreateObject(OpenGL.Objects.GraphicsContext)"/> method.
            </para>
            <para>
            In some GraphicsResource implementation is allowed to have null context resources (i.e. <see cref="!:GraphicsWindow"/>).
            </para>
            </remarks>
            <seealso cref="M:OpenGL.Objects.GraphicsResource.Delete(OpenGL.Objects.GraphicsContext)"/>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the object has been already created.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.Delete(OpenGL.Objects.GraphicsContext)">
            <summary>
            Delete this GraphicsResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object. The IGraphicsResource shall belong to the object space to this
            <see cref="T:OpenGL.Objects.GraphicsContext"/>. The <see cref="T:OpenGL.Objects.GraphicsContext"/> shall be current to the calling thread.
            </param>
            <remarks>
            <para>
            After this method, the resource must have deallocated every graphic resource associated with it. Normally it should be possible
            to create again the resources by calling <see cref="M:OpenGL.Objects.GraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/>.
            </para>
            <para>
            This methods shall be the preferred way to deallocate graphic resources.
            </para>
            <para>
            After a successfull call to Create, <see cref="M:OpenGL.Objects.GraphicsResource.Exists(OpenGL.Objects.GraphicsContext)"/> shall return true.
            </para>
            <para>
            The actual implementation deletes the name (<see cref="M:OpenGL.Objects.GraphicsResource.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)"/>) only if the implementation requires a context related name
            (<see cref="M:OpenGL.Objects.GraphicsResource.RequiresName(OpenGL.Objects.GraphicsContext)"/>). In the case derived classes requires more complex resource deletion pattern, this method could
            be overriden for that purpose, paying attention to call the base implementation.
            </para>
            </remarks>
            <seealso cref="M:OpenGL.Objects.GraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if this object doesn't exists for <paramref name="ctx"/> (this is determined by calling <see cref="M:OpenGL.Objects.GraphicsResource.Exists(OpenGL.Objects.GraphicsContext)"/>
            method), or this resource has a name and <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.GraphicsResource.Dispose(OpenGL.Objects.GraphicsContext)">
            <summary>
            Dispose graphics resources using the underlying <see cref="T:OpenGL.Objects.GraphicsContext"/>.
            </summary>
            <param name='ctx'>
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which have access to the <see cref="!:IRenderDisposable"/> graphics resources.
            </param>
            <remarks>
            <para>
            The instance shall be considered disposed as it were called <see cref="M:System.IDisposable.Dispose"/>, but in addition
            this method will release this instance resources.
            </para>
            <para>
            The <see cref="!:Dispose()"/> method should try to release the underlying resources by getting the optional graphics
            context current on the calling thread.
            </para>
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsResource._Identifier">
            <summary>
            GraphicsResource identifier.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsResource._Object">
            <summary>
            GraphicsResource name.
            </summary>
            <remarks>
            A value of <see cref="F:OpenGL.Objects.GraphicsResource.InvalidObjectName"/> indicates that this GraphicsResource name is not yet created.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.GraphicsResource._ObjectNameSpace">
            <summary>
            GraphicsResource name space.
            </summary>
            <remarks>
            A value of <see cref="F:System.Guid.Empty"/> indicates that this GraphicsResource doesn't belong to
            any context name space (i.e. its name is not yet created).
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.UserGraphicsResource">
            <summary>
            Graphics resource composed by a set of <see cref="T:OpenGL.Objects.GraphicsResource"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.UserGraphicsResource.#ctor">
            <summary>
            Construct a UserGraphicsResource.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.UserGraphicsResource.#ctor(System.String)">
            <summary>
            Construct a UserGraphicsResource, specifying its identifier.
            </summary>
            <param name="identifier">
            A <see cref="T:System.String"/> that identifies this GraphicsResource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="identifier"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.UserGraphicsResource.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            This implementation returns always false.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.UserGraphicsResource.ThisObjectClass">
            <summary>
            Buffer object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.UserGraphicsResource.ObjectClass">
            <summary>
            Buffer object class.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.GraphicsSurface">
            <summary>
            Graphics surface interface. 
            </summary>
            <remarks>
            <para>
            A GraphicsSurface is able to store the result of a rendering operation. This class
            represents the final component of a RenderPipeline, but it could be used as data
            source for another RenderPipeline.
            </para>
            <para>
            A GraphicsSurface is defined by a set of buffers; each buffer is defined by a type,
            which specify the how use the buffer contents. Each buffer type defines the available
            formats for data storage. 
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.#ctor">
            <summary>
            GraphicsSurface constructor (zero size).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.#ctor(System.UInt32,System.UInt32)">
            <summary>
            GraphicsSurface constructor specifying extents. 
            </summary>
            <param name="w">
            A <see cref="T:System.Int32"/> that specify the surface width.
            </param>
            <param name="h">
            A <see cref="T:System.Int32"/> that specify the surface height.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.GetDeviceContext">
            <summary>
            Obtain device context associated with this GraphicsSurface. 
            </summary>
            <returns>
            A <see cref="T:OpenGL.DeviceContext"/>
            </returns>
        </member>
        <member name="P:OpenGL.Objects.GraphicsSurface.Width">
            <summary>
            GraphicsSurface width property. 
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsSurface.Height">
            <summary>
            GraphicsSurface height property. 
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsSurface.AspectRatio">
            <summary>
            GraphicsSurface aspect ratio property.  
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsSurface._Width">
            <summary>
            GraphicsSurface height. 
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsSurface._Height">
            <summary>
            GraphicsSurface width. 
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsSurface._SizeChanged">
            <summary>
            Flag indicating whether surface extents are changed. 
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsSurface.BufferFormat">
            <summary>
            Current surface configuration.
            </summary>
            <remarks>
            <para>
            This read-only property shall return a <see cref="T:OpenGL.DevicePixelFormat"/> indicating the current
            buffer configuration. The object returned shall not be used to modify this GraphicsSurface buffers,
            but it shall be used to know which is the buffer configuration.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.Clear(OpenGL.Objects.GraphicsContext)">
            <summary>
            Clear all Surface buffers.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for clearing buffers.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.Clear(OpenGL.Objects.GraphicsContext,OpenGL.ClearBufferMask)">
            <summary>
            Clear surface buffers.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for clearing buffers.
            </param>
            <param name="bufferMask">
            A <see cref="T:OpenGL.ClearBufferMask"/> indicating which buffers to clear.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.SetClearColor(OpenGL.ColorRGBAF)">
            <summary>
            Set the color used for clearing this GraphicsSurface color buffer.
            </summary>
            <param name="color">
            A <see cref="T:OpenGL.ColorRGBAF"/> which holds the RGBA values used for clearing
            this GraphicsSurface color buffer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.SetClearDepth(System.Double)">
            <summary>
            Set the depth used for clearing this GraphicsSurface depth buffer.
            </summary>
            <param name="depth">
            A <see cref="T:System.Double"/> which holds the depth value used for clearing
            this GraphicsSurface depth buffer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.SetClearStencil(System.Int32)">
            <summary>
            Set the value used for clearing this GraphicsSurface stencil buffer.
            </summary>
            <param name="stencil">
            A <see cref="T:System.Int32"/> which holds the stencil value used for clearing
            this GraphicsSurface stencil buffer.
            </param>
        </member>
        <member name="F:OpenGL.Objects.GraphicsSurface.mClearColor">
            <summary>
            Clear color used for clearing the GraphicsSurface color buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsSurface.mClearDepth">
            <summary>
            Clear color used for clearing the GraphicsSurface depth buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.GraphicsSurface.mClearStencil">
            <summary>
            Clear value used for clearing the GraphicsSurface stencil buffer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsSurface.Swappable">
            <summary>
            Determine whether this surface has to be swapped.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsSurface.SwapInterval">
            <summary>
            Gets or sets the buffer swap interval desired on this surface.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.SwapSurface">
            <summary>
            Swap render surface. 
            </summary>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.BindDraw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this GraphicsSurface for drawing.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to wich associate its rendering result to this GraphicsSurface.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.UnbindDraw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Unbind this GraphicsSurface for drawing.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to wich disassociate its rendering result from this GraphicsSurface.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.BindRead(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this GraphicsSurface for reading.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to wich associate its read result to this GraphicsSurface.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.UnbindRead(OpenGL.Objects.GraphicsContext)">
            <summary>
            Unbind this GraphicsSurface for reading.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to wich disassociate its read result from this GraphicsSurface.
            </param>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.ReadBuffer(OpenGL.Objects.GraphicsContext,OpenGL.ReadBufferMode,System.UInt32,System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Read this GraphicsSurface color buffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/>
            </param>
            <param name="rBuffer">
            A <see cref="T:OpenGL.ReadBufferMode"/> that specify the read buffer where the colors are read from.
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> that specify the x coordinate of the lower left corder of the rectangle area to read.
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> that specify the y coordinate of the lower left corder of the rectangle area to read.
            </param>
            <param name="width">
            A <see cref="T:System.Int32"/> that specify the width of the rectangle area to read.
            </param>
            <param name="height">
            A <see cref="T:System.Int32"/> that specify the height of the rectangle area to read.
            </param>
            <param name="pType">
            A <see cref="T:OpenGL.PixelLayout"/> which determine the pixel storage of the returned image.
            </param>
            <returns>
            It returns an <see cref="T:OpenGL.Objects.Image"/> representing the current read buffer <paramref name="rBuffer"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.GraphicsSurface.CopyBuffer(OpenGL.Objects.GraphicsContext,OpenGL.ReadBufferMode,System.UInt32,System.UInt32,OpenGL.Objects.Texture@,System.UInt32)">
            <summary>
            Copy this GraphicsSurface color buffer into a buffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which is bound to this GraphicsSurface.
            </param>
            <param name="rBuffer">
            A <see cref="T:OpenGL.ReadBufferMode"/> that specify the read buffer where the colors are read from.
            </param>
            <param name="x">
            A <see cref="T:System.Int32"/> that specify the x coordinate of the lower left corder of the rectangle area to read.
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> that specify the y coordinate of the lower left corder of the rectangle area to read.
            </param>
            <param name="texture">
            A <see cref="T:OpenGL.Objects.Texture"/> that will hold the buffer data.
            </param>
            <param name="level">
            The level of the texture <paramref name="texture"/> to be written.
            </param>
            <returns>
            It returns an <see cref="T:OpenGL.Objects.Image"/> representing the current read buffer <paramref name="rBuffer"/>.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.GraphicsSurface.OpenGL#Objects#IGraphicsSurface#Width">
            <summary>
            The width of the surface, in pixels.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.GraphicsSurface.OpenGL#Objects#IGraphicsSurface#Height">
            <summary>
            The width of the surface, in pixels.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.IBindingResource">
            <summary>
            Interface implemented by those objects that can be bound to a graphics context.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IBindingResource.GetBindingTarget(OpenGL.Objects.GraphicsContext)">
            <summary>
            Get the identifier of the binding point.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IBindingResource.Bind(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this IBindingResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IBindingResource.Unbind(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this IBindingResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IBindingResource.IsBound(OpenGL.Objects.GraphicsContext)">
            <summary>
            Check whether this IBindingResource is currently bound on the specified graphics context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for querying the current binding state.
            </param>
            <returns>
            It returns a boolean value indicating whether this IBindingResource is currently bound on <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.IDisposableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenGL.Objects.IDisposableExtensions.ReferenceCount">
            <summary>
            Values in a ConditionalWeakTable need to be a reference type,
            so box the refcount int in a class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IDisposableExtensions.IncRef(System.IDisposable)">
            <summary>
            Increment the reference count for the specified <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="disposable">
            The <see cref="T:System.IDisposable"/> that is referenced by multiple actors.
            </param>
        </member>
        <member name="M:OpenGL.Objects.IDisposableExtensions.DecRef(System.IDisposable)">
            <summary>
            Decrement the reference count for the specified <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="disposable">
            The <see cref="T:System.IDisposable"/> that is referenced by multiple actors.
            </param>
            <remarks>
            The <paramref name="disposable"/> instance is disposed in the case the reference count is zero after
            the execution of this method.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.IDisposableExtensions._RefCounts">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenGL.Objects.IDisposableExtensions._RefCountsLock">
            <summary>
            Object used for synchronizing accesses to <see cref="F:OpenGL.Objects.IDisposableExtensions._RefCounts"/>.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.IGraphicsDisposable">
            <summary>
            Disposable interface extended to support graphics resources disposition.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IGraphicsDisposable.Dispose(OpenGL.Objects.GraphicsContext)">
            <summary>
            Dispose graphics resources using the underlying <see cref="T:OpenGL.Objects.GraphicsContext"/>.
            </summary>
            <param name='ctx'>
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which have access to the <see cref="T:OpenGL.Objects.IGraphicsDisposable"/> graphics resources. Expect
            that this context is current on the calling thread.
            </param>
            <remarks>
            <para>
            The instance shall be considered disposed as it were called <see cref="M:System.IDisposable.Dispose"/>, but in addition
            this method will release this instance resources.
            </para>
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.IGraphicsResource">
            <summary>
            Interface used for allocating and releasing graphics objects.
            </summary>
            <remarks>
            <para>
            This interface defines a common interface for those objects which are allocated on an OpenGL context. These
            objects belongs to one of the following classes:
            - Display list (actually not supported)
            - Textures object (<see cref="T:OpenGL.Objects.Texture"/>)
            - Buffer object (<see cref="T:OpenGL.Objects.Buffer"/>)
            - Shader object (<see cref="T:OpenGL.Objects.Shader"/>)
            - Shader program (<see cref="T:OpenGL.Objects.ShaderProgram"/>)
            - Shader program pipeline (actually not supported)
            - Render buffer object (<see cref="T:OpenGL.Objects.RenderBuffer"/>)
            - Framebuffer object (<see cref="T:OpenGL.Objects.Framebuffer"/>)
            - Query object (actually not supported)
            - Sync object (actually not supported)
            - Transform feedback object (actually not supported)
            </para>
            <para>
            These object classes can be shared between different <see cref="T:OpenGL.Objects.GraphicsContext"/> instances, constructed in the proper way. Actually current
            OpenGL specification are not officially supporting all those object classes, but in the real world it actually works thanks to drivers
            implementations.
            </para>
            <para>
            The IGraphicsResource exposes methods and properties which enable the interface user to identify the object by a name (<see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>). It
            also enable the interface user to check effectively the IGraphicsResource existence (<see cref="M:OpenGL.Objects.IGraphicsResource.Exists(OpenGL.Objects.GraphicsContext)"/>).
            </para>
            <para>
            The IGraphicsResource defines methods used for allocating and releasing object resources (<see cref="M:OpenGL.Objects.IGraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/>, <see cref="M:OpenGL.Objects.IGraphicsResource.Delete(OpenGL.Objects.GraphicsContext)"/>.
            The methods <see cref="M:OpenGL.Objects.IGraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/> and <see cref="M:OpenGL.Objects.IGraphicsResource.Delete(OpenGL.Objects.GraphicsContext)"/> are context dependent, since the object creation and
            deletion is dependent on the current context of the executing thread.
            </para>
            <para>
            The object deletion (using <see cref="M:OpenGL.Objects.IGraphicsResource.Delete(OpenGL.Objects.GraphicsContext)"/> requires a current context on the calling thread. This cannot be always true, because design
            limitation (i.e. IGraphicsResource inherit IDisposable) or because application design (i.e. multithreading); but if the IGraphicsResource
            is not deleted by <see cref="M:OpenGL.Objects.IGraphicsResource.Delete(OpenGL.Objects.GraphicsContext)"/>, it causes a resource leak on an OpenGL context.
            
            To avoid the resource leaks, it was introduced the <see cref="!:RenderGarbageService"/>, which is a garbage collector of IGraphicsResource instances.
            Pratically, a IGraphicsResource can be deleted in successive stages by collecting it in the only <see cref="!:RenderGarbageService"/> instance, and
            later request to delete all objects belonging to a <see cref="T:OpenGL.Objects.GraphicsContext"/>.
            
            Here it comes the <see cref="!:Release"/> method. This method have the same functionality of <see cref="M:OpenGL.Objects.IGraphicsResource.Delete(OpenGL.Objects.GraphicsContext)"/>, but without requiring a current
            context. Ideally, a tipical implementation of this method would garbage the IGraphicsResource instance (by interacting with
            <see cref="!:RenderGarbageService"/>). However, it is necessary to schedule the object delection by using <see cref="!:RenderGarbageService.DeleteGarbage"/>.
            </para>
            <para>
            The IGraphicsResource interface inherits from <see cref="T:System.IDisposable"/>. The IDisposable implementation is used to ensure object resources
            by means of the <i>using</i> construct. Tipically <see cref="M:System.IDisposable.Dispose"/> implementation shall call <see cref="!:Release"/>,
            since it cannot be sure what (and if a) <see cref="T:OpenGL.Objects.GraphicsContext"/> is current on the calling thread.
            </para>
            <para>
            A direct implementation of this interface is the <see cref="T:OpenGL.Objects.GraphicsResource"/> class, which it can be inherited. This class implements most of
            IGraphicsResource interface, leaving to the inheritor a few ones to overrides. This is the suggested way to implement the IGraphicsResource interface,
            but there can be some special cases which is necessary the interface inherition; in the case implements the interface following the interface
            guidelines.
            </para>
            </remarks>
            <seealso cref="T:OpenGL.Objects.GraphicsResource"/>
        </member>
        <member name="P:OpenGL.Objects.IGraphicsResource.ObjectClass">
            <summary>
            Object class.
            </summary>
            <remarks>
            <para>
            The object class identify the resource type. It cannot be <see cref="F:System.Guid.Empty"/>, but a meaninfull
            value. The allowed values are determined in the concrete implementation of the IGraphicsResource
            implementation.
            </para>
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.IGraphicsResource.ObjectName">
            <summary>
            Object name used for this IGraphicsResource.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.IGraphicsResource.ObjectNamespace">
            <summary>
            OpenGL object namespace used for creating this GraphicsResource.
            </summary>
            <remarks>
            This property determine the correct association between this object and the render contextes used
            for drawing.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.IGraphicsResource.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this IGraphicsResource really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this object exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this IGraphicsResource (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.IGraphicsResource.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create this IGraphicsResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object. The object space of this <see cref="T:OpenGL.Objects.GraphicsContext"/> is used
            to generate <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>, and all contextes sharing lists with this parameter can handle this IGraphicsResource.
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> shall be current to the calling thread.
            </param>
            <remarks>
            <para>
            After a successfull call to Create, <see cref="M:OpenGL.Objects.IGraphicsResource.Exists(OpenGL.Objects.GraphicsContext)"/> shall return true.
            </para>
            </remarks>
            <seealso cref="M:OpenGL.Objects.IGraphicsResource.Delete(OpenGL.Objects.GraphicsContext)"/>
        </member>
        <member name="M:OpenGL.Objects.IGraphicsResource.Delete(OpenGL.Objects.GraphicsContext)">
            <summary>
            Delete this IGraphicsResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object. The IGraphicsResource shall belong to the object space to this
            <see cref="T:OpenGL.Objects.GraphicsContext"/>. The <see cref="T:OpenGL.Objects.GraphicsContext"/> shall be current to the calling thread.
            </param>
            <remarks>
            <para>
            After a successfull call to Create, <see cref="M:OpenGL.Objects.IGraphicsResource.Exists(OpenGL.Objects.GraphicsContext)"/> shall return true.
            </para>
            </remarks>
            <seealso cref="M:OpenGL.Objects.IGraphicsResource.Create(OpenGL.Objects.GraphicsContext)"/>
        </member>
        <member name="T:OpenGL.Objects.IGraphicsResourceExtensions">
            <summary>
            Extension methods for <see cref="T:OpenGL.Objects.IGraphicsResource"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IGraphicsResourceExtensions.CreateAsync(OpenGL.Objects.IGraphicsResource,OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the <see cref="T:OpenGL.Objects.IGraphicsResource"/> asynchrnously on the specified thread.
            </summary>
            <param name="graphicsResource"></param>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> which will create the resource.
            </param>
        </member>
        <member name="T:OpenGL.Objects.IGraphicsSurface">
            <summary>
            Graphics surface interface.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.IGraphicsSurface.Width">
            <summary>
            The width of the surface, in pixels.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.IGraphicsSurface.Height">
            <summary>
            The width of the surface, in pixels.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.IImageCodecPlugin">
            <summary>
            Interface implemented by external plugins loaded by <see cref="T:OpenGL.Objects.ImageCodec"/>.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Image">
            <summary>
            Generic image.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Image.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Image.#ctor(OpenGL.PixelLayout,System.UInt32,System.UInt32)">
            <summary>
            Construct an image.
            </summary>
            <param name="format">
            A <see cref="P:OpenGL.Objects.Image.PixelLayout"/> indicating the image pixel format.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> indicating the image width, in pixels.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> indicating the image height, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Image.Create(OpenGL.PixelLayout,System.UInt32,System.UInt32)">
            <summary>
            Allocate pixel data for this Image.
            </summary>
            <param name="format">
            A <see cref="P:OpenGL.Objects.Image.PixelLayout"/> indicating the image pixel format.
            </param>
            <param name="w">
            A <see cref="T:System.Int32"/> indicating the image width, in pixels.
            </param>
            <param name="h">
            A <see cref="T:System.Int32"/> indicating the image height, in pixels.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Image.Width">
            <summary>
            Image width property.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Image.Height">
            <summary>
            Image height property.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Image.ImageBuffer">
            <summary>
            Gets the image buffer for every image plane scanlines. Image planes are allocated contiguosly, as defined
            by the specific pixel format, if planar.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Image.ImagePlanes">
            <summary>
            Gets the image planes scan-lines.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Image.Stride">
            <summary>
            Image line width, in bytes
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Image.Size">
            <summary>
            Image size, in bytes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Image.PixelLayout">
            <summary>
            Image pixel format.
            </summary>
            <returns>
            It returns a <see cref="P:OpenGL.Objects.Image.PixelLayout"/> that specify the image color resolution.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.Image._PixelBuffers">
            <summary>
            Pixel arrays defining image layers.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Image._PixelPlanes">
            <summary>
            Pixel arrays pointers mapped onto pixel planes.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Image.FlipVertically">
            <summary>
            Flip the image vertically.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Image.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            </param>
        </member>
        <member name="P:OpenGL.Objects.Image.MediaInformation">
            <summary>
            Gets the media information of this instance.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Image._ImageInfo">
            <summary>
            Media information.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ImageCodec">
            <summary>
            Image coder/decoder.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageCodec.Instance">
            <summary>
            The only instance of ImageCodec.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ImageCodec.#ctor">
            <summary>
            This type is a singleton.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageCodec.PluginFactoryType">
            <summary>
            The type which following plugin factory conventions.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ImageCodec.Load(System.IO.Stream,System.String,OpenGL.Objects.ImageCodecCriteria)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="format">
            The <see cref="!:String"/> which defines the format of the stream data.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
            <exception cref="!:ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
            <exception cref="!:ArgumentException">
            Exception thrown if <paramref name="stream"/> is not readable or seekable.
            </exception>
            <exception cref="!:InvalidOperationException">
            Exception thrown if no plugin is available for <paramref name="format"/> (filtered by
            <paramref name="criteria"/>) or all plugins are not able to load media from
            <paramref name="stream"/>.
            </exception>
            <exception cref="!:NotSupportedException">
            Exception thrown if <paramref name="format"/> is not supported by any loaded plugin.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ImageCodec.CreateDefaultMediaCodecCriteria">
            <summary>
            Creates the default media codec criteria.
            </summary>
            <returns>
            The default media codec criteria.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.ImageCodecCriteria">
            <summary>
            Image codec criteria.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ImageCodecCriteria.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ImageCodecCriteria.#ctor(System.Drawing.Rectangle)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageCodecCriteria.QualityPreset">
            <summary>
            Floating-point value used by selected plugins to determine some generic quality preset.
            </summary>
            <remarks>
            <para>
            The plugin can ignore the quality setting specified. The value is normalized in the range [0.0, 1.0], where 1.0 means the
            highest quality. Usually this preset shall not reduce fundamental image parameters, such as image extents or pixel precision.
            </para>
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ImageCodecCriteria.SoftwareSupport">
            <summary>
            Boolean value used by selected plugin to determine whether to convert image in order to support hardware formats.
            </summary>
            <remarks>
            <para>
            The plugin will check whether the native pixel format is available on current hardware. In the case hardware is not capable
            to represent the image and this criteria is set to false, then the plugin refuse to load the image. Otherwise, it try to
            convert the image pixel format in order to have a pixel format compatible with the hardware.
            </para>
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.ImageCodecCriteria.ImageSection">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> that specify the section of the image to load. If it is not defined or it is
            null, the entire image area is considered.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageCodecCriteria._ImageSection">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> that specify the section of the image to load. If it is not defined or it is
            null, the entire image area is considered.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ImageFormat">
            <summary>
            Known image container format enumeration.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Bitmap">
            <summary>
            Windows bitmap container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Ico">
            <summary>
            Windows icon.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Jpeg">
            <summary>
            Independent JPEG Group container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Jpeg2000">
            <summary>
            JPEG-2000 container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Jng">
            <summary>
            JPEG Network Graphics container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Mng">
            <summary>
            Multiple Network Graphics container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Png">
            <summary>
            Portable Network Graphics container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Tiff">
            <summary>
            Tagged Image File container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Targa">
            <summary>
            Truevision Targa container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Exif">
            <summary>
            EXIF container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Gif">
            <summary>
            GIF container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Exr">
            <summary>
            EXR container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Hdr">
            <summary>
            HDR container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Pbm">
            <summary>
            Portable bitmap.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Ppm">
            <summary>
            Portable pixelmap
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Pgm">
            <summary>
            Portable graymap
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Pfm">
            <summary>
            Portable floatmap
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.KodakPcd">
            <summary>
            Kodak PhotoCD container.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Pcx">
            <summary>
            Zsoft Paintbrush PCX bitmap container
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Raw">
            <summary>
            RAW camera container.
            </summary>
            <remarks>
            ".3fr":	Hasselblad Digital Camera Raw Image Format.
            ".arw": Sony Digital Camera Raw Image Format for Alpha devices.
            ".bay": Casio Digital Camera Raw File Format.
            ".bmq": NuCore Raw Image File.
            ".cap": Phase One Digital Camera Raw Image Format.
            ".cine": Phantom Software Raw Image File.
            ".cr2": Canon Digital Camera RAW Image Format version 2.0. These images are based on the TIFF image standard.
            ".crw": Canon Digital Camera RAW Image Format version 1.0.
            extList.Add(".cs1": Sinar Capture Shop Raw Image File.
            ".dc2": Kodak DC25 Digital Camera File.
            ".dcr": Kodak Digital Camera Raw Image Format for these models: Kodak DSC Pro SLR/c, Kodak DSC Pro SLR/n, Kodak DSC Pro 14N, Kodak DSC PRO 14nx.
            ".drf": Kodak Digital Camera Raw Image Format.
            ".dsc": Kodak Digital Camera Raw Image Format.
            ".dng": Adobe Digital Negative: DNG is publicly available archival format for the raw files generated by digital cameras.
            		By addressing the lack of an open standard for the raw files created by individual camera models, DNG helps ensure that
            		photographers will be able to access their files in the future.
            ".erf": Epson Digital Camera Raw Image Format.
            ".fff": Imacon Digital Camera Raw Image Format.
            ".ia":  Sinar Raw Image File.
            ".iiq": Phase One Digital Camera Raw Image Format.
            ".k25": Kodak DC25 Digital Camera Raw Image Format.
            ".kc2": Kodak DCS200 Digital Camera Raw Image Format.
            ".kdc": Kodak Digital Camera Raw Image Format.
            ".mdc": Minolta RD175 Digital Camera Raw Image Format.
            ".mef": Mamiya Digital Camera Raw Image Format.
            ".mos": Leaf Raw Image File.
            ".mrw": Minolta Dimage Digital Camera Raw Image Format.
            ".nef": Nikon Digital Camera Raw Image Format.
            ".nrw": Nikon Digital Camera Raw Image Format.
            ".orf": Olympus Digital Camera Raw Image Format.
            ".pef": Pentax Digital Camera Raw Image Format.
            ".ptx": Pentax Digital Camera Raw Image Format.
            ".pxn": Logitech Digital Camera Raw Image Format.
            ".qtk": Apple Quicktake 100/150 Digital Camera Raw Image Format.
            ".raf": Fuji Digital Camera Raw Image Format.
            ".raw": Panasonic Digital Camera Image Format.
            ".rdc": Digital Foto Maker Raw Image File.
            ".rw2": Panasonic LX3 Digital Camera Raw Image Format.
            ".rwl": Leica Camera Raw Image Format.
            ".rwz": Rawzor Digital Camera Raw Image Format.
            ".sr2": Sony Digital Camera Raw Image Format.
            ".srf": Sony Digital Camera Raw Image Format for DSC-F828 8 megapixel digital camera or Sony DSC-R1
            ".sti": Sinar Capture Shop Raw Image File.
            
            FileExtensions = "3fr|arw|bay|bmq|cap|cine|cr2|crw|cs1|dc2|dcr|drf|dsc|dng|erf|fff|ia|iiq|k25|kc2|kdc|mdc|mef|mos|mrw|nef|nrw|orf|pef|ptx|pxn|qtk|raf|raw|rdc|rw2|rwl|rwz|sr2|srf|sti"
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Dted">
            <summary>
            DTED.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Smrt">
            <summary>
            SMRT.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Vrt">
            <summary>
            Virtual data set.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageFormat.Unknown">
            <summary>
            Unknown container.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ImageInfo">
            <summary>
            Generic image informations.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageInfo.TagSemantic">
            <summary>
            The media semantic
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageInfo.TagContainerFormat">
            <summary>
            The media semantic
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageInfo.TagGamma">
            <summary>
            The device used for acquiring the media.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ImageInfo.ContainerFormat">
            <summary>
            The image container format.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ImageInfo.Semantic">
            <summary>
            The semantic of the image data.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ImageInfo.Gamma">
            <summary>
            The image gamma.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageInfo.PixelType">
            <summary>
            Original image pixel type.
            </summary>
            <remarks>
            This field will be updated by <see cref="P:OpenGL.Objects.Image.MediaInformation"/> automatically.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ImageInfo.Width">
            <summary>
            Image width (in pixels).
            </summary>
            <remarks>
            This field will be updated by <see cref="P:OpenGL.Objects.Image.MediaInformation"/> automatically.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ImageInfo.Height">
            <summary>
            Image height (in pixels);
            </summary>
            <remarks>
            This field will be updated by <see cref="P:OpenGL.Objects.Image.MediaInformation"/> automatically.
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.ImageSemantic">
            <summary>
            The semantic of the image data.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageSemantic.Color">
            <summary>
            Image represent colors.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageSemantic.HighDefinitionColor">
            <summary>
            Image represent colors, but not clamped to the emittible range.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ImageSemantic.Elevation">
            <summary>
            Image represents terrain elevation data (i.e. height map).
            </summary>
        </member>
        <member name="T:OpenGL.Objects.IMedia`1">
            <summary>
            Generic media interface.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.IMedia`1.MediaInformation">
            <summary>
            Gets the media information of this instance.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.IMediaCodecPlugin`3">
            <summary>
            Generic media codec plugin interface.
            </summary>
            <typeparam name="TMedia">
            A <see cref="T:OpenGL.Objects.IMedia`1"/> type, indicating the concrete class of the media.
            </typeparam>
            <typeparam name="TMediaInfo">
            A <see cref="T:OpenGL.Objects.MediaInfo"/> that stored information about <typeparamref name="TMedia"/>
            </typeparam>
            <typeparam name="TMediaCodecCriteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify codec parameters.
            </typeparam>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.QueryInfo(System.String,`2)">
            <summary>
            Query media informations.
            </summary>
            <param name="path">
            A <see cref="!:String"/> that specify the media path.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <typeparamref name="TMediaInfo"/> containing information about the specified media.
            </returns>
            <exception cref="!:ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.QueryInfo(System.IO.Stream,`2)">
            <summary>
            Query media informations.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <typeparamref name="TMediaInfo"/> containing information about the specified media.
            </returns>
            <exception cref="!:ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.Load(System.String,`2)">
            <summary>
            Load media from stream.
            </summary>
            <param name="path">
            A <see cref="!:String"/> that specify the media path.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
            <exception cref="!:ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.Load(System.IO.Stream,`2)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
            <exception cref="!:ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.Save(System.String,`0,System.String,`2)">
            <summary>
            Save media to stream.
            </summary>
            <param name="path">
            A <see cref="!:String"/> that specify the media path.
            </param>
            <param name="media">
            A <typeparamref name="TMedia"/> holding the data to be stored.
            </param>
            <param name="format">
            A <see cref="!:String"/> that specify the media format to used for saving <paramref name="media"/>.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an image stream.
            </param>
            <exception cref="!:ArgumentNullException">
            Exception thrown if <paramref name="stream"/>, <paramref name="media"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.Save(System.IO.Stream,`0,System.String,`2)">
            <summary>
            Save media to stream.
            </summary>
            <param name="stream">
            A <see cref="!:IO.Stream"/> which stores the media data.
            </param>
            <param name="media">
            A <typeparamref name="TMedia"/> holding the data to be stored.
            </param>
            <param name="format">
            A <see cref="!:String"/> that specify the media format to used for saving <paramref name="media"/>.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an image stream.
            </param>
            <exception cref="!:ArgumentNullException">
            Exception thrown if <paramref name="stream"/>, <paramref name="media"/> or <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.IMediaCodecPlugin`3.SupportedReadFormats">
            <summary>
            Gets the list of media formats supported for reading.
            </summary>
            <value>
            The supported formats which this media codec plugin can read.
            </value>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.IsReadSupported(System.String)">
            <summary>
            Check whether an media format is supported for reading.
            </summary>
            <param name="format">
            An <see cref="!:String"/> that specify the media format to test for read support.
            </param>
            <returns>
            A <see cref="T:OpenGL.Boolean"/> indicating whether <paramref name="format"/> is supported.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.IMediaCodecPlugin`3.SupportedWriteFormats">
            <summary>
            Gets the list of media formats supported for writing.
            </summary>
            <value>
            The supported formats which this media codec plugin can write.
            </value>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.IsWriteSupported(System.String)">
            <summary>
            Check whether an media format is supported for writing.
            </summary>
            <param name="format">
            An <see cref="!:String"/> that specify the media format to test for write support.
            </param>
            <returns>
            A <see cref="T:OpenGL.Boolean"/> indicating whether <paramref name="format"/> is supported.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.IMediaCodecPlugin`3.GetPriority(System.String)">
            <summary>
            Determine the plugin priority for a certain image format.
            </summary>
            <param name="format">
            An <see cref="!:String"/> that specify the media format to test for priority.
            </param>
            <returns>
            It returns an integer value indicating the priority of this implementation respect other ones supporting the same
            image format. Conventionally, a value of 0 indicates a totally impartial plugin implementation; a value less than 0 indicates
            a more confident implementation respect other plugins; a value greater than 0 indicates a fallback implementation respect other
            plugins.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.IPlugin">
            <summary>
            Interface implemented by all plugin implementations.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.IPlugin.Name">
            <summary>
            Plugin name.
            </summary>
            <remarks>
            This name identity the plugin implementation. It shall be unique in the plugin set available at runtime.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.IPlugin.CheckAvailability">
            <summary>
            Determine whether this plugin is available for the current process.
            </summary>
            <returns>
            It returns a boolean value indicating whether the plugin is available for the current process.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.IResource">
            <summary>
            A shared resource.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.IResource.RefCount">
            <summary>
            Number of shared instances of this IResource.
            </summary>
            <remarks>
            The reference count shall be initially 0 on new instances. In this way, typical IDisposable
            implementation wouldn't throw exception because the resource is referenced.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.IResource.IncRef">
            <summary>
            Increment the shared IResource reference count.
            </summary>
            <remarks>
            Incrementing the reference count for this resource prevents the IResource to be disposed, acquiring a sort
            of ownership of this instance.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.IResource.DecRef">
            <summary>
            Decrement the shared IResource reference count.
            </summary>
            <remarks>
            <para>
            Decrementing the reference count for this resource could cause this instance disposition. In the case
            the reference count equals 0 (with or without decrementing it), this instance will be disposed using .
            </para>
            <para>
            This method should be meant almost equals to <see cref="M:System.IDisposable.Dispose"/> method (since it can dispose
            conditionally the instance). Sadly, code analysis tools could detect that IDisposable fields won't be disposed
            by some classes.
            </para>
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.MediaCodec`4">
            <summary>
            Generic media coder/decoder, based on plugins implementations.
            </summary>
            <typeparam name="TPlugin">
            A <see cref="!:IMediaCodecPlugin&lt;TMedia,TMediaInfo&gt;"/> type, indicating the interface implemented by the plugin.
            </typeparam>
            <typeparam name="TMedia">
            A <see cref="T:OpenGL.Objects.IMedia`1"/> type, indicating the concrete class of the media.
            </typeparam>
            <typeparam name="TMediaInfo">
            A <see cref="T:OpenGL.Objects.MediaInfo"/> that stored information about <typeparamref name="TMedia"/>
            </typeparam>
            <remarks>
            <para>
            Allow to access to <typeparamref name="TMedia"/> information easily, by using:
            - <see cref="M:OpenGL.Objects.MediaCodec`4.GetBriefDescription(System.String)"/>
            - <see cref="M:OpenGL.Objects.MediaCodec`4.GetLongDescription(System.String)"/>
            - <see cref="M:OpenGL.Objects.MediaCodec`4.GetFormatsFromUrl(System.String)"/>
            - <see cref="M:OpenGL.Objects.MediaCodec`4.GetFileExtensions(System.String)"/>
            </para>
            <para>
            The <typeparamref name="TMedia"/> can be specified using a URL string, that follows the pattern:
            {UrlType}://
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.#ctor(System.String)">
            <summary>
            Construct a <see cref="!:MediaCodec&lt;TPlugin,TMedia,TMediaInfo&gt;"/>, loading plugins from current directory.
            </summary>
            <param name='pluginFactoryType'>
            Plugin factory type used for loading managed plugins. If it null, only unmanaged plugins
            will be loaded.
            </param>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.#ctor(System.String,System.String)">
            <summary>
            Construct a <see cref="!:OpenGL.MediaCodec&lt;TPlugin,TMedia,TMediaInfo&gt;"/>, loading plugins from current directory and optionally
            from a directory path specified via environment.
            </summary>
            <param name="pluginFactoryType">
            Plugin factory type used for loading managed plugins. If it null, only unmanaged plugins
            will be loaded.
            </param>
            <param name="environDir">
            Environment variable name used for getting an additional directory from where load plugins.
            </param>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.GetBriefDescription(System.String)">
            <summary>
            Gets the brief description of a media format.
            </summary>
            <param name='mediaFormat'>
            A <see cref="T:System.String"/> that specify the media format.
            </param>
            <returns>
            The brief description of <paramref name="mediaFormat"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.GetLongDescription(System.String)">
            <summary>
            Gets the long description of a media format.
            </summary>
            <param name='mediaFormat'>
            A <see cref="T:System.String"/> that specify the media format.
            </param>
            <returns>
            The long description of <paramref name="mediaFormat"/>.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.MediaCodec`4.SupportedReadFormats">
            <summary>
            Gets the supported read formats.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that specify all media formats supported for reading.
            </value>
        </member>
        <member name="P:OpenGL.Objects.MediaCodec`4.SupportedWriteFormats">
            <summary>
            Gets the supported media for writing.
            </summary>
            <value>
            A set of media formats that specify all media formats supported for reading.
            </value>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.GetFormatsFromUrl(System.String)">
            <summary>
            Gets the possible media formats from URL.
            </summary>
            <param name="url">
            A <see cref="T:System.String"/> that specify the URL where media is located.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> enumerating all possible media formats given <paramref name="url"/>. This
            method could return an empty enumeration.
            </returns>
            <exception cref='T:System.ArgumentNullException'>
            Is thrown when an argument passed to a method is invalid because it is <see langword="null" /> .
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.GetFileExtensions(System.String)">
            <summary>
            Gets the file extensions for the specified media format.
            </summary>
            <param name="format">
            A <see cref="T:System.String"/> that specify the format of the media to query extensions.
            </param>
            <returns>
            The file extensions usually used for the <paramref name="format"/>. This method can return an
            empty enumeration.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.GetFormatFromExtension(System.String)">
            <summary>
            Get the media format derived from the media input string.
            </summary>
            <param name="input">
            A <see cref="T:System.String"/> that specify the media input string where the media is located (that
            is usually a file path).
            </param>
            <returns>
            It returns the media format if any known media format recognize a proper pattern in <paramref name="input"/>, otherwise
            it returns null.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.GetReadFileDialogFilter">
            <summary>
            Construct a string suitable for <see cref="!:Windows.Forms.OpenFileDialog.Filter"/> property.
            </summary>
            <returns>
            It returns a string specifying the file filter usable on dialogs selecting a file for reading media
            managed by this MediaCodec instance.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.GetWriteFileDialogFilter(System.String[]@)">
            <summary>
            Construct a string suitable for <see cref="!:Windows.Forms.SaveFileDialog.Filter"/> property.
            </summary>
            <returns>
            It returns a string specifying the file filter usable on dialogs selecting a file for writing media
            managed by this MediaCodec instance.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.ExtractDescriptions(System.Type)">
            <summary>
            Extracts the media descriptions via reflection on a <see cref="T:System.Type"/>.
            </summary>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.Dictionary`2"/> mapping all known media formats with the relative
            <see cref="T:OpenGL.Objects.MediaFormatAttribute"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="type"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.MediaCodec`4.mCodecDescriptions">
            <summary>
            The media format descriptions.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaCodec`4.PluginName">
            <summary>
            String value used for filtering the available plugin list by the plugin name.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.CreateDefaultMediaCodecCriteria">
            <summary>
            Creates the default media codec criteria.
            </summary>
            <returns>
            The default <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> for this <see cref="!:MediaCodec&lt;TPlugin,TMedia,TMediaInfo&gt;"/>. The
            object returned by this method will be used for Load and Save methods when a <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> is not
            specified.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.FilterReadPlugins(System.Collections.Generic.List{`0},`3)">
            <summary>
            Filters the plugins (used for reading) by criteria.
            </summary>
            <param name="plugins">
            A <see cref="T:System.Collections.Generic.List`1"/> that contains all available plugins.
            </param>
            <param name="criteria">
            A <see cref="!:TMediaCodecCriteria"/> that specify the plugin filtering criteria.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.List`1"/> that satisfy the criteria <paramref name="criteria"/>.
            </returns>
            <exception cref='T:System.ArgumentNullException'>
            Exception thrown if <paramref name="plugins"/> of <paramref name="criteria"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.FilterReadPlugins(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Filters the plugins (used for reading) by media format.
            </summary>
            <param name="plugins">
            A <see cref="T:System.Collections.Generic.List`1"/> that contains all available plugins.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that specify the criteria for filtering.
            </param>
            <returns>
            The plugins which can read <see cref="!:format"/>.
            </returns>
            <exception cref='T:System.ArgumentNullException'>
            Is thrown when an argument passed to a method is invalid because it is <see langword="null" /> .
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.FilterWritePlugins(System.Collections.Generic.List{`0},`3)">
            <summary>
            Filters the plugins (used for reading) by criteria.
            </summary>
            <returns>
            The read plugins.
            </returns>
            <param name='plugins'>
            The actual plugin list.
            </param>
            <param name='criteria'>
            Criteria.
            </param>
            <exception cref='T:System.ArgumentNullException'>
            Is thrown when an argument passed to a method is invalid because it is <see langword="null" /> .
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.FilterWritePlugins(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Filters the plugins (used for writing) to media format.
            </summary>
            <param name='plugins'>
            The actual plugin list.
            </param>
            <param name="format">
            </param>
            <returns>
            The plugins which can read media with format <paramref name="format"/>.
            </returns>
            <exception cref='T:System.ArgumentNullException'>
            Is thrown when an argument passed to a method is invalid because it is <see langword="null" /> .
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.QueryInfo(System.String)">
            <summary>
            Query media informations.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the file path where media data is stored.
            </param>
            <returns>
            A <typeparamref name="TMediaInfo"/> containing information about the specified media.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.QueryInfo(System.String,`3)">
            <summary>
            Query media informations.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the file path where media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <typeparamref name="TMediaInfo"/> containing information about the specified media.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.QueryInfo(System.Uri)">
            <summary>
            Query media informations.
            </summary>
            <param name="uri">
            A <see cref="T:System.Uri"/> that specify the resource location where media data is stored.
            </param>
            <returns>
            A <typeparamref name="TMediaInfo"/> containing information about the specified media.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.QueryInfo(System.Uri,`3)">
            <summary>
            Query media informations.
            </summary>
            <param name="uri">
            A <see cref="T:System.Uri"/> that specify the resource location where media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <typeparamref name="TMediaInfo"/> containing information about the specified media.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.QueryInfo(System.IO.Stream)">
            <summary>
            Query media informations.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <returns>
            A <typeparamref name="TMediaInfo"/> containing information about the specified media.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.QueryInfo(System.IO.Stream,`3)">
            <summary>
            Query media informations.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            A <typeparamref name="TMediaInfo"/> containing information about the specified media.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.Load(System.String)">
            <summary>
            Load media from a local file.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the resource path where the media data is stored.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.Load(System.String,`3)">
            <summary>
            Load media from a local file.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the resource path where the media data is stored.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Eception thrown if no media plugin can open <paramref name="path"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.Load(System.String,System.String,`3)">
            <summary>
            Load media from a local file.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the resource path where the media data is stored.
            </param>
            <param name="format">
            The <see cref="T:System.String"/> which defines the format of the stream data.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.Load(System.IO.Stream,System.String)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="format">
            The <see cref="T:System.String"/> which defines the format of the stream data.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.Load(System.IO.Stream,System.String,`3)">
            <summary>
            Load media from stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> where the media data is stored.
            </param>
            <param name="format">
            The <see cref="T:System.String"/> which defines the format of the stream data.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an media stream.
            </param>
            <returns>
            An <typeparamref name="TMedia"/> holding the media data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="stream"/> or <paramref name="criteria"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="stream"/> is not readable or seekable.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no plugin is available for <paramref name="format"/> (filtered by
            <paramref name="criteria"/>) or all plugins are not able to load media from
            <paramref name="stream"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Exception thrown if <paramref name="format"/> is not supported by any loaded plugin.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.Save(System.String,`1,System.String,`3)">
            <summary>
            Save media to a <see cref="!:IO.Stream"/>.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the file path where media data is stored.
            </param>
            <param name="media">
            A <typeparamref name="TMedia"/> that holds the data to be stored.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that specify the media format to used for saving <paramref name="media"/>.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an image stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if at least one of the parameters <paramref name="path"/> or <paramref name="media"/>
            is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This exception is thrown if no plugin cannot save the image <paramref name="media"/> on <paramref name="path"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.Save(System.IO.Stream,`1,System.String,`3)">
            <summary>
            Save media to a <see cref="!:IO.Stream"/>.
            </summary>
            <param name="stream">
            A <see cref="!:IO.Stream"/> that stores the media data.
            </param>
            <param name="media">
            A <typeparamref name="TMedia"/> that holds the data to be stored.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that specify the media format to used for saving <paramref name="media"/>.
            </param>
            <param name="criteria">
            A <see cref="T:OpenGL.Objects.MediaCodecCriteria"/> that specify parameters for loading an image stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if at least one of the parameters <paramref name="stream"/> or <paramref name="media"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if <paramref name="stream"/> cannot be seek or cannot be written.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This exception is thrown if no plugin cannot save the media <paramref name="media"/> on the stream <paramref name="stream"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.GetLocalUriPath(System.Uri)">
            <summary>
            Gets the local URI path.
            </summary>
            <param name='uri'>
            A <see cref="T:System.Uri"/> that specify the resource (local or remote).
            </param>
            <returns>
            The local path of the file representing the resource specified by <paramref name="uri"/>.
            </returns>
            <exception cref='T:System.ArgumentNullException'>
            Exception thrown if <paramref name="uri"/> is null.
            </exception>
            <remarks>
            This method will download locally the resource localized with <paramref name="uri"/>, if it is
            a remote one.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.MediaCodec`4.LoadManagedPlugin(System.String,System.String)">
            <summary>
            Loads a managed plugin type implementation from a dynamically loaded library.
            </summary>
            <param name="pluginPath">
            A <see cref="T:System.String"/> that specify the path of the dynamically loaded library.
            </param>
            <param name="pluginFactoryType">
            A <see cref="T:System.String"/> that specify the full name of the type that create the plugin. This type
            shall have a method named CreatePlugin which returns a <typeparamref name="TPlugin"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="pluginPath"/> or <paramref name="pluginFactoryType"/> are null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            This exception is thrown if the file <paramref name="pluginPath"/> cannot be found.
            </exception>
            <exception cref="T:System.IO.FileLoadException">
            This exception is thrown if the file <paramref name="pluginPath"/> cannot be loaded.
            </exception>
            <exception cref="T:System.BadImageFormatException">
            This exception is thrown if the file <paramref name="pluginPath"/> is not a valid assembly.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.MediaCodecCriteria">
            <summary>
            Generic media codec criteria.
            </summary>
            <remarks>
            <para>
            Classes deriving from <see cref="!:MediaCodec&lt;TPlugin,TMedia,TMediaInfo&gt;"/> needs a generic method for specifying
            a set of parameters to be passed with specific media codec plugin implementation.
            </para>
            <para>
            This class is the container of parameters used by <see cref="!:MediaCodec&lt;TPlugin,TMedia,TMediaInfo&gt;"/>. Parameters
            are identified with a generic invariant string, while the parameter is a generic object.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.MediaCodecCriteria.Set(System.String,System.Object)">
            <summary>
            Define a criteria.
            </summary>
            <param name="criteriaName">
            A <see cref="T:System.String"/> that specify the criteria value name.
            </param>
            <param name="value">
            A <see cref="T:System.Object"/> that specify the criteria value. It can null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <see cref="!:criteriaName"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodecCriteria.Reset(System.String)">
            <summary>
            Undefine a criteria.
            </summary>
            <param name="criteriaName">
            A <see cref="T:System.String"/> that specify the criteria value name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <see cref="!:criteriaName"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodecCriteria.IsSet(System.String)">
            <summary>
            Determine whether a criteria is defined.
            </summary>
            <param name="criteriaName">
            A <see cref="T:System.String"/> that specify the criteria value name.
            </param>
            <returns>
            It returns a boolean value indicating whether the criteria <see cref="!:criteriaName"/> is
            actually defined.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <see cref="!:criteriaName"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodecCriteria.Get``1(System.String)">
            <summary>
            Get the criteria value.
            </summary>
            <typeparam name="T">
            The type of the criterial value.
            </typeparam>
            <param name="criteriaName">
            A <see cref="T:System.String"/> that specify the criteria value name.
            </param>
            <returns>
            It returns the value corresponding to the criterial <paramref name="criteriaName"/>.
            </returns>
            <remarks>
            <para>
            This routine try to make the value associated with the criteria <paramref name="criteriaName"/> compatible with
            the type <typeparamref name="T"/>. In the case the value is not exacttly <typeparamref name="T"/>, it checks whether
            the value is a <see cref="T:System.IConvertible"/>; if the <typeparamref name="T"/> is a <see cref="T:System.IConvertible"/> too then
            the value is converted into a <typeparamref name="T"/> using <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/>.
            </para>
            <para>
            Using the above strategy, it is possible to manage numeric values without caring about the specific value type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="criteriaName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="criteriaName"/> is not defined or the associated value is not compatible with
            the type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.MediaCodecCriteria._Criteria">
            <summary>
            Map between criteria and its value.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.MediaCodecCriteria.Item(System.String)">
            <summary>
            Get and set a codec criteria.
            </summary>
            <param name="criteriaName">
            A <see cref="T:System.String"/> that specify the criteria value name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <see cref="!:criteriaName"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.MediaCodecCriteria.ToString">
            <summary>
            Stringify this MediaCodecCriteria.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this MediaCodecCriteria.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.MediaFormatAttribute">
            <summary>
            Media format attribute.
            </summary>
            <remarks>
            This attribute is used to describe a media. Actually supported media types are:
            - Still images (by means of <see cref="!:OpenGL.Raster.ImageFormat"/>
            - Elementary video streams (by means of <see cref="!:OpenGL.Video.VideoFormat"/>
            - Multimedia streams (by means of <see cref="!:OpenGL.Video.VideoContainerFormat"/>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.MediaFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:OpenGL.MediaFormatAttribute"/> class.
            </summary>
            <param name='shortDescr'>
            A <see cref="T:System.String"/> that specify the short description of the media.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="shortDescr"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.MediaFormatAttribute.ShortDescription">
            <summary>
            The media format short description. This field is always defined.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaFormatAttribute.LongDescription">
            <summary>
            The media long description. This field can be null.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaFormatAttribute.FileExtensions">
            <summary>
            A list of file extensions, pipe ('|') separated, usually used for this format. This field can be null.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaFormatAttribute.MediaPattern">
            <summary>
            The media URL pattern regular expression.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaFormatAttribute.Abstract">
            <summary>
            Flag indicating whether this format is abstract (not real format, i.e. Unknown).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.MediaFormatAttribute.MatchPattern(System.String)">
            <summary>
            Matchs an URL pattern for this media format.
            </summary>
            <param name='input'>
            A <see cref="T:System.String"/> that specify the pattern to match.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="input"/> can match the media format extensions.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.MediaInfo">
            <summary>
            Generic media information.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.MediaInfo.#ctor">
            <summary>
            Construct a MediaInfo.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.MediaInfo.DetectTagInformation">
            <summary>
            Collect information about information tags.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaInfo._TagInfo">
            <summary>
            Generic tag collection.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.MediaInfo.TagCount">
            <summary>
            The count of tags defined in this MediaInfo.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.MediaInfo.Tags">
            <summary>
            The complete list of Tags included in this MediaInfo.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.MediaInfo.HasTag(System.String)">
            <summary>
            Determine whether this MediaInfo has defined a specific tag.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> which identify a tag.
            </param>
        </member>
        <member name="M:OpenGL.Objects.MediaInfo.SetTag(System.String,System.Object)">
            <summary>
            Set a tag to this ImageInfo
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> which identify a tag.
            </param>
            <param name="value">
            A <see cref="T:System.Object"/> which define the tag value.
            </param>
        </member>
        <member name="M:OpenGL.Objects.MediaInfo.GetTag``1(System.String)">
            <summary>
            Get a tag value from this ImageInfo.
            </summary>
            <typeparam name="T">
            The type of the tag value.
            </typeparam>
            <param name="id">
            A <see cref="T:System.String"/> which identify a tag.
            </param>
            <returns>
            It returns the value of the tag.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.MediaInfo._Tags">
            <summary>
            Generic tag collection.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaInfo.TagComment">
            <summary>
            The media comment.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaInfo.TagAcquisitionArtist">
            <summary>
            The person who has acquired the media.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaInfo.TagAcquisitionDevice">
            <summary>
            The device used for acquiring the media.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.MediaInfoTagAttribute">
            <summary>
            Attribute that specify contraints for fields
            </summary>
        </member>
        <member name="M:OpenGL.Objects.MediaInfoTagAttribute.#ctor">
            <summary>
            Construct a MediaInfoTagAttribute.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.MediaInfoTagAttribute.#ctor(System.Type)">
            <summary>
            Construct a MediaInfoTagAttribute that specify the tag value type.
            </summary>
            <param name="valueType">
            A <see cref="T:System.Type"/> that specify the tag value type.
            </param>
        </member>
        <member name="P:OpenGL.Objects.MediaInfoTagAttribute.TagType">
            <summary>
            The type of the tag value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaInfoTagAttribute.DefaultValue">
            <summary>
            The default value of the tag.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.MediaInfoTagAttribute._TagType">
            <summary>
            The type of the tag value.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.PluginLoader`1">
            <summary>
            Utility class to load external plugins.
            </summary>
            <typeparam name="T">
            A type (typically an interface) implementing <see cref="T:OpenGL.Objects.IPlugin"/> interface. This type represent
            the actually implemented plugin interface.
            </typeparam>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:OpenGL.Objects.PluginLoader`1"/>, loading pluging from current working directory.
            </summary>
            <param name='pluginFactoryType'>
            Plugin factory type used for loading managed plugins. If it null, only unmanaged plugins
            will be loaded.
            </param>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.#ctor(System.String,System.String)">
            <summary>
            Construct a <see cref="T:OpenGL.Objects.PluginLoader`1"/>, loading pluging from current directory and optionally
            from a directory path specified via environment.
            </summary>
            <param name="pluginFactoryType">
            Plugin factory type used for loading managed plugins. If it null, only unmanaged plugins
            will be loaded.
            </param>
            <param name="environDir">
            Environment variable name used for getting an additional directory from where load plugins.
            </param>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.RegisterPlugin(`0)">
            <summary>
            Register manually a plugin.
            </summary>
            <param name="plug">
            A generic type collected as available plugin.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="plug"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="plug"/> is not available on the current platform. This is determined
            by calling <see cref="M:OpenGL.Objects.IPlugin.CheckAvailability"/>.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.UnregisterPlugin(`0)">
            <summary>
            Unregisters manually the plugin.
            </summary>
            <param name='plug'>
            A generic type collected as available plugin.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="plug"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="plug"/> is not registered.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.GetPlugin(System.String)">
            <summary>
            Directly get a registered plugin instance by its name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:OpenGL.Objects.PluginLoader`1.Plugins">
            <summary>
            Loaded and available plugins.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.PluginLoader`1._Plugins">
            <summary>
            Loaded plugins.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.BatchLoadPlugins(System.String,System.String)">
            <summary>
            Load every available plugin in the specified directory path.
            </summary>
            <param name='pluginDir'>
            Plugin dir.
            </param>
            <param name='pluginFactoryType'>
            Plugin factory type.
            </param>
            <returns>
            It returns an enumeration of available plugins.
            </returns>
            <exception cref='T:System.ArgumentNullException'>
            Exception thrown if <paramref name="pluginDir"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.LoadPlugin(System.String,System.String)">
            <summary>
            Loads a plugin from a dynamically loaded library.
            </summary>
            <param name='pluginPath'>
            A <see cref="T:System.String"/> that specify the path of the dynamically loaded library.
            </param>
            <param name='pluginFactoryType'>
            A <see cref="T:System.String"/> that specify the full name of the type that create the plugin. This type
            shall have a method named CreatePlugin which returns a <typeparamref name="T"/>. This value is required
            only for managed plugin implementations.
            </param>
            <returns>
            The plugin.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.LoadManagedPlugin(System.String,System.String)">
            <summary>
            Loads a managed plugin type implementation from a dynamically loaded library.
            </summary>
            <param name="pluginPath">
            A <see cref="T:System.String"/> that specify the path of the dynamically loaded library.
            </param>
            <param name="pluginFactoryType">
            A <see cref="T:System.String"/> that specify the full name of the type that create the plugin. This type
            shall have a method named CreatePlugin which returns a <typeparamref name="T"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="pluginPath"/> or <paramref name="pluginFactoryType"/> are null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            This exception is thrown if the file <paramref name="pluginPath"/> cannot be found.
            </exception>
            <exception cref="T:System.IO.FileLoadException">
            This exception is thrown if the file <paramref name="pluginPath"/> cannot be loaded.
            </exception>
            <exception cref="T:System.BadImageFormatException">
            This exception is thrown if the file <paramref name="pluginPath"/> is not a valid assembly.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.PluginLoader`1.LoadUnmanagedPlugin(System.String)">
            <summary>
            Loads an unmanaged plugin type implementation from a dynamically loaded library.
            </summary>
            <param name="pluginPath">
            A <see cref="T:System.String"/> that specify the path of the dynamically loaded library.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="pluginPath"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Query.#ctor(OpenGL.QueryTarget)">
            <summary>
            Construct a QueryObject specify its target.
            </summary>
            <param name="target"></param>
        </member>
        <member name="F:OpenGL.Objects.Query.ThisObjectClass">
            <summary>
            Buffer object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Query.ObjectClass">
            <summary>
            Buffer object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Query.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this BufferObject really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this BufferObject exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this BufferObject (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Query.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a BufferObject name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this buffer object name.
            </param>
            <returns>
            It returns a valid object name for this BufferObject.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Query.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a BufferObject name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this buffer object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
        </member>
        <member name="T:OpenGL.Objects.RenderBuffer">
            <summary>
            Framebuffer attachable render buffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.RenderBuffer.#ctor(OpenGL.Objects.RenderBuffer.Type,OpenGL.PixelLayout,System.UInt32,System.UInt32)">
            <summary>
            Construct a render buffer.
            </summary>
            <param name="type">
            A <see cref="T:OpenGL.Objects.RenderBuffer.Type"/> that specify the type of the buffer. This parameter
            influence the framebuffer attachment, and the possible formats.
            </param>
            <param name="internalFormat">
            A <see cref="T:OpenGL.PixelLayout"/> that specify the internal OpenGL format for this
            RenderBuffer. From OpenGL 3.2 specification:
            @verbatim
            Implementations are required to support the same internal formats for renderbuffers
            as the required formats for textures enumerated in section 3.8.1, with the exception
            of the color formats labelled “texture-only”. Requesting one of these internal
            formats for a renderbuffer will allocate at least the internal component sizes and
            exactly the component types shown for that format in tables 3.12- 3.13.
            @endverbatim
            </param>
        </member>
        <member name="T:OpenGL.Objects.RenderBuffer.Type">
            <summary>
            Buffer type.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer.Type.Color">
            <summary>
            Color buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer.Type.Depth">
            <summary>
            Depth buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer.Type.Stencil">
            <summary>
            Stencil buffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer.Type.DepthStencil">
            <summary>
            Packed depth and stencil buffer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.RenderBuffer.BufferType">
            <summary>
            Render buffer type.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.RenderBuffer.Width">
            <summary>
            RenderBuffer width.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.RenderBuffer.Height">
            <summary>
            RenderBuffer width.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer._Type">
            <summary>
            Render buffer type.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer._Width">
            <summary>
            RenderBuffer width.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer._Height">
            <summary>
            RenderBuffer width.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.RenderBuffer.Allocate(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32)">
            <summary>
            Allocate this RenderBuffer.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocation.
            </param>
            <param name="w">
            A <see cref="T:System.Int32"/> that specify the width of the renderbuffer.
            </param>
            <param name="h">
            A <see cref="T:System.Int32"/> that specify the height of the renderbuffer.
            </param>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer._InternalFormat">
            <summary>
            Render buffer internal format.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.RenderBuffer.ThisObjectClass">
            <summary>
            Render buffer object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.RenderBuffer.ObjectClass">
            <summary>
            Render buffer object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.RenderBuffer.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this RenderBuffer really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this RenderBuffer exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this RenderBuffer (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.RenderBuffer.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a RenderBuffer name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns a valid object name for this RenderBuffer.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.RenderBuffer.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.RenderBuffer.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a RenderBuffer name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Resource">
            <summary>
            Any resource that manage a considerable amount of resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Resource.#ctor">
            <summary>
            Construct a Resource.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Resource.CheckResourceLeaks(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Resource.GetResourceConstructorStackTrace">
            <summary>
            Determine the GraphicsResource constructor stack trace.
            </summary>
            <returns>
            It returns the stack trace wat the moment of construction of thsi GraphicsResource.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.Resource._ConstructorStackTrace">
            <summary>
            The stack trace at construction time.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Resource._LivingResources">
            <summary>
            Collect living RenderResources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Resource.LinkResource(OpenGL.Objects.IResource)">
            <summary>
            Link a resource used by this UserGraphicsResource.
            </summary>
            <param name="resource">
            The <see cref="T:OpenGL.Objects.IResource"/> that will be linked by this UserGraphicsResource. It will be referenced till
            this instance disposition. You should not manually reference this instance for the UserGraphicsResource lifetime.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="resource"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Resource.UnlinkResource(OpenGL.Objects.IResource)">
            <summary>
            Unlink a resource used by this UserGraphicsResource.
            </summary>
            <param name="resource">
            The <see cref="T:OpenGL.Objects.IResource"/> that will be unlinked from this UserGraphicsResource. It will be unreferenced.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="resource"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Resource.SwapResources``1(``0,``0@)">
            <summary>
            Replace a linked resource with another one.
            </summary>
            <typeparam name="T">
            Any type implementing <see cref="T:OpenGL.Objects.IResource"/>
            </typeparam>
            <param name="value">
            The <typeparamref name="T"/> that replace the current resource.
            </param>
            <param name="current">
            The <typeparamref name="T"/> currently linked to this Resource.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Resource._Resources">
            <summary>
            Resources used by this UserGraphicsResource.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Resource.ProcedureLogDelegate">
            <summary>
            Delegate used for logging using application procedures.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Resource.RegisterApplicationLogDelegate(OpenGL.Objects.Resource.ProcedureLogDelegate)">
            <summary>
            Register a callback used to notify the application about a procedure log.
            </summary>
            <param name="callback">
            The <see cref="T:OpenGL.Objects.Resource.ProcedureLogDelegate"/> used to notify application about a procedure log event.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Resource._ProcLogCallbacks">
            <summary>
            Delegate for logging using application framework.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Resource.LogEnabled">
            <summary>
            Flag used for enabling/disabling procedure logging.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Resource._ProcLogEnabled">
            <summary>
            Flag used for enabling/disabling procedure logging.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Resource.Log(System.String,System.Object[])">
            <summary>
            Log a procedure call.
            </summary>
            <param name="format">
            A <see cref="T:System.String"/> that specifies the format string.
            </param>
            <param name="args">
            An array of objects that specifies the arguments of the <paramref name="format"/>.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Resource.RefCount">
            <summary>
            Number of shared instances of this IGraphicsResource.
            </summary>
            <remarks>
            The reference count shall be initially 0 on new instances.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Resource.IncRef">
            <summary>
            Increment the shared IGraphicsResource reference count.
            </summary>
            <remarks>
            Incrementing the reference count for this resource prevents the system to dispose this instance.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Resource.DecRef">
            <summary>
            Decrement the shared IGraphicsResource reference count.
            </summary>
            <remarks>
            Decrementing the reference count for this resource could cause this instance disposition. In the case
            the reference count equals 0 (with or without decrementing it), this instance will be disposed.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Resource.ResetRefCount">
            <summary>
            Reset the reference count of this instance.
            </summary>
            <remarks>
            <para>
            This should be used in normal code.
            </para>
            <para>
            This routine could be useful in the case the deep-copoy implementation uses <see cref="M:System.Object.MemberwiseClone"/>,
            indeed copying the reference count.
            </para>
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.Resource._RefCount">
            <summary>
            The count of references for this GraphicsResource.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Resource.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Resource.IsDisposed">
            <summary>
            Get whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Resource.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:OpenGL.Boolean"/> indicating whether this method is called by <see cref="M:OpenGL.Objects.Resource.Dispose"/>. If it is false,
            this method is called by the finalizer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Resource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            <para>
            Derived classes can extend the resource disposition by overriding the method <see cref="M:OpenGL.Objects.Resource.Dispose(System.Boolean)"/>.
            </para>
            <para>
            The finalize will be suppressed by calling this method.
            </para>
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.Resource._Disposed">
            <summary>
            Flag indicating that this instance has been disposed.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ResourceCollection`1">
            <summary>
            Generic collection for referencing <see cref="T:OpenGL.Objects.IResource"/> instances.
            </summary>
            <typeparam name="T">
            A class that implements the <see cref="T:OpenGL.Objects.IResource"/> interface.
            </typeparam>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.AddRange(System.Collections.IEnumerable)">
            <summary>
            Add a set of items to this collection.
            </summary>
            <param name="items">
            The set to add to this collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="items"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a set of items to this collection.
            </summary>
            <param name="items">
            The set to add to this collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="items"/> is null.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.ResourceCollection`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.Add(`0)">
            <summary>
            Adds an item to this collection.
            </summary>
            <param name="item">
            The object to add to this collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="item"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.Clear">
            <summary>
            Removes all items from ththis collection.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.Contains(`0)">
            <summary>
            Determines whether this collection contains a specific value.
            </summary>
            <param name="item">
            The object to locate in this collection.
            </param>
            <returns>
            It returns true if item is found in this collection; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this collection.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            exception thrown if <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if array is multidimensional. or <paramref name="arrayIndex"/> is equal to or greater than the length of array; or
            the number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination
            array; or Type T cannot be cast automatically to the type of the destination array.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this collection.
            </summary>
            <param name="item">
            The object to remove from this collection.</param>
            <returns>
            It returns true if item was successfully removed from this collection; otherwise, false. This method also
            returns false if item is not found in the this collection.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.ResourceCollection`1.Count">
            <summary>
            Gets the number of elements contained in this collection.
            </summary>
            <returns>
            The number of elements contained in this collection.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.ResourceCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
            <returns>
            It returns true if this collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.ResourceCollection`1._Resources">
            <summary>
            The collection of resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ResourceCollection`1.IsDisposed">
            <summary>
            Get whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:OpenGL.Boolean"/> indicating whether this method is called by <see cref="M:OpenGL.Objects.ResourceCollection`1.Dispose"/>. If it is false,
            this method is called by the finalizer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ResourceCollection`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ResourceCollection`1._Disposed">
            <summary>
            Flag indicating that this instance has been disposed.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderAttributeType">
            <summary>
            An enumeration listing all supported types of a shader attribute.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Float">
            <summary>
            A single single-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Vec2">
            <summary>
            A vector of two single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Vec3">
            <summary>
            A vector of three single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Vec4">
            <summary>
            A vector of four single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat2x2">
            <summary>
            A matrix of two rows and two columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat3x3">
            <summary>
            A matrix of three rows and three columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat4x4">
            <summary>
            A matrix of four rows and four columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat2x3">
            <summary>
            A matrix of three rows and two columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat2x4">
            <summary>
            A matrix of four rows and two columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat3x2">
            <summary>
            A matrix of two rows and three columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat3x4">
            <summary>
            A matrix of four rows and three columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat4x2">
            <summary>
            A matrix of four rows and two columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Mat4x3">
            <summary>
            A matrix of four rows and three columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Int">
            <summary>
            A single signed integer value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.IntVec2">
            <summary>
            A vector of two signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.IntVec3">
            <summary>
            A vector of three signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.IntVec4">
            <summary>
            A vector of four signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.UInt">
            <summary>
            A single unsigned integer value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.UIntVec2">
            <summary>
            A vector of two unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.UIntVec3">
            <summary>
            A vector of three unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.UIntVec4">
            <summary>
            A vector of four unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.Double">
            <summary>
            A single double-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleVec2">
            <summary>
            A vector of two double-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleVec3">
            <summary>
            A vector of three double-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleVec4">
            <summary>
            A vector of four double-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat2x2">
            <summary>
            A matrix of two rows and two columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat3x3">
            <summary>
            A matrix of three rows and three columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat4x4">
            <summary>
            A matrix of four rows and four columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat2x3">
            <summary>
            A matrix of three rows and two columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat2x4">
            <summary>
            A matrix of four rows and two columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat3x2">
            <summary>
            A matrix of two rows and three columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat3x4">
            <summary>
            A matrix of four rows and three columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat4x2">
            <summary>
            A matrix of two rows and four columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderAttributeType.DoubleMat4x3">
            <summary>
            A matrix of three rows and four columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderAttributeTypeExtensions">
            <summary>
            Extension methods for <see cref="T:OpenGL.Objects.ShaderAttributeType"/> enumeration.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderAttributeTypeExtensions.GetVertexBaseType(OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Get the array components base type of the vertex array buffer item.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating  the type of the components of
            the vertex array buffer item.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderAttributeTypeExtensions.GetArrayLength(OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Get the number of components of the vertex array buffer item.
            </summary>
            <param name="shaderAttributeType">
            A <see cref="T:OpenGL.Objects.ShaderAttributeType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns the count of the components of the vertex array buffer item. It will be a value
            from 1 (inclusive) to 4 (inclusive). For matrices, this value indicates the matrix height (column-major order).
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderAttributeTypeExtensions.GetArrayRank(OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Get the rank of the vertex array buffer item (that is, the number of <i>vec4</i> attributes requires).
            </summary>
            <param name="shaderAttributeType">
            A <see cref="T:OpenGL.Objects.ShaderAttributeType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns the rank of the vertex array buffer item. It will be a value
            from 1 (inclusive) to 4 (inclusive). For matrices, this value indicates the matrix width (column-major order),
            while for simpler types the value will be 1.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderAttributeTypeExtensions.IsArraySimpleType(OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Get whether a <see cref="T:OpenGL.Objects.ShaderAttributeType"/> is a simple type (float, int, ...).
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ShaderAttributeType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="vertexArrayType"/> is a simple type.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderAttributeTypeExtensions.IsArrayVectorType(OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Get whether a <see cref="T:OpenGL.Objects.ShaderAttributeType"/> is a vector type (vec2, vec3, ...).
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ShaderAttributeType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="vertexArrayType"/> is a vector type.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderAttributeTypeExtensions.IsArrayMatrixType(OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Get whether a <see cref="T:OpenGL.Objects.ShaderAttributeType"/> is a matrix type (mat2, mat4, ...).
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ShaderAttributeType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="vertexArrayType"/> is a matrix type.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderAttributeTypeExtensions.GetMatrixColumnType(OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Get the correponding type for the column of the matrix type.
            </summary>
            <param name="vertexArrayType">
            A <see cref="T:OpenGL.Objects.ShaderAttributeType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="vertexArrayType"/> is a matrix type.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.ShaderCompilerContext">
            <summary>
            Shader compiler parameters abstraction..
            </summary>
            <remarks>
            <para>
            This class shall group all elements which influence the compilation process:
            - Shading Language version
            - Preprocessor symbols (i.e. #define statements)
            - Preprocessor include paths
            - Extension directives (i.e. #extension statements)
            - Feedback buffer format
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.#ctor">
            <summary>
            Default compilation context.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.#ctor(System.String[])">
            <summary>
            Default compilation context.
            </summary>
            <param name="defines">
            The list of preprocessor definitions included in each shader source.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.#ctor(Khronos.KhronosVersion,System.String[])">
            <summary>
            Compilation context that specify GLSL version and preprocessor definitions.
            </summary>
            <param name="version">
            The <see cref="T:Khronos.KhronosVersion"/> used for shader object compilation.
            </param>
            <param name="defines">
            The list of preprocessor definitions included in each shader source.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.#ctor(OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Copy another compilation context.
            </summary>
            <param name="otherCompilerContext">
            The <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> to be copied into in this instance.
            </param>
        </member>
        <member name="P:OpenGL.Objects.ShaderCompilerContext.ShaderVersion">
            <summary>
            The shading language version used by compiler.
            </summary>
            <remarks>
            If the property is set to null, the property will be defined as <see cref="!:GraphicsContext.CurrentGLSLVersion"/>. In this way the
            value of this property will always specify a concrete GLSL version value.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ShaderCompilerContext._ShaderVersion">
            <summary>
            The shading language version used by compiler.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderCompilerContext.Defines">
            <summary>
            #define preprocessor directives used for compilation.
            </summary>
            <remarks>
            Each item in the returned list should be a single symbol (implictly defined to 1).
            Using the returned reference, you can manipulate directly the preprocessor symbols.
            By setting this property, reset the entire symbols set, but the returned reference doesn't change.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ShaderCompilerContext._Define">
            <summary>
            #define preprocessor directives used for compilation.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.SetIncludePaths(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the include paths.
            </summary>
            <param name="paths">
            An ordered string collection that specify the list of the paths used
            for resolving shader inclusion by usinh <i>#include</i> preprocessor directive.
            </param>
            <remarks>
            This method reset the entire include path used by compiler.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.ShaderCompilerContext.Includes">
            <summary>
            Ordered paths for relative #include preprocessor directives.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderCompilerContext._Includes">
            <summary>
            Ordered paths for relative #include preprocessor directives.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ShaderCompilerContext.Extensions">
            <summary>
            The extensions behavior used for compiling a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
            <remarks>
            This property determine the default extension behavior for each object attached to
            a <see cref="T:OpenGL.Objects.ShaderProgram"/>; however, each <see cref="T:OpenGL.Objects.Shader"/> can override
            the behavior for its compilation.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.ShaderCompilerContext.FeedbackVaryingsFormat">
            <summary>
            Get/set the feedback varyings format.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderCompilerContext._FeedbackVaryingsFormat">
            <summary>
            The feedback varyings format.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.op_Equality(OpenGL.Objects.ShaderCompilerContext,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> to compare with <paramref name="right"/>.
            </param>
            <param name="right">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> to compare with <paramref name="left"/>.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="left"/> equals <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.op_Inequality(OpenGL.Objects.ShaderCompilerContext,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> to compare with <paramref name="right"/>.
            </param>
            <param name="right">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> to compare with <paramref name="left"/>.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="left"/> doesn't equals <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.Equals(OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Indicates whether the this Matrix is equal to another Matrix.
            </summary>
            <param name="other">
            A ShaderCompilerContext to compare with this object.
            </param>
            <returns>
            It returns true if the this Matrix is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderCompilerContext.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.ShaderException">
            <summary>
            Exception thrown from classed used for shader operations.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderException.#ctor(System.String)">
            <summary>
            Construct a RenderException specifying a message.
            </summary>
            <param name="message">
            A <see cref="T:System.String"/> that specify an additional message.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderException.#ctor(System.String,System.Object[])">
            <summary>
            Construct a ShaderException specifying the message to format.
            </summary>
            <param name="format">
            A <see cref="T:System.String"/> that specify an additional message format string.
            </param>
            <param name="args">
            A <see cref="T:System.Object[]"/> that specify formatted arguments in <paramref name="format"/>.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ShaderExtension">
            <summary>
            Shader program extension.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderExtension.#ctor">
            <summary>
            Parameterless constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderExtension.#ctor(System.String,OpenGL.Objects.ShaderExtensionBehavior)">
            <summary>
            Construct a ShaderExtension specifying the extension name and behavior.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderExtension.Name">
            <summary>
            The interface name.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderExtension.Behavior">
            <summary>
            The shader extension requested behavior.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderExtensionBehavior">
            <summary>
            Enumeration that specify the shader exception behavior..
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderExtensionBehavior.Require">
            <summary>
            Behave as specified by the extension extension_name.
            </summary>
            <remarks>
            Give an error on the #extension if the extension extension_name is not supported, or if all is specified.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ShaderExtensionBehavior.Enable">
            <summary>
            Behave as specified by the extension extension_name.
            </summary>
            <remarks>
            <para>
            Warn on the #extension if the extension extension_name is not supported.
            </para>
            <para>
            Give an error on the #extension if all is specified.
            </para>
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ShaderExtensionBehavior.Warn">
            <summary>
            Behave as specified by the extension extension_name, except issue warnings
            on any detectable use of that extension, unless such use is supported by other
            enabled or required extensions.
            </summary>
            <remarks>
            If all is specified, then warn on all detectable uses of any extension used.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.ShaderExtensionBehavior.Disable">
            <summary>
            Behave (including issuing errors and warnings) as if the extension
            extension_name is not part of the language definition.
            </summary>
            <remarks>
            <para>
            If all is specified, then behavior must revert back to that of the non-extended
            core version of the language being compiled to.
            </para>
            <para>
            Warn on the #extension if the extension extension_name is not supported.
            </para>
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.ShaderInclude">
            <summary>
            Shader source string which can be included in other shader objects by means of #include preprocessor directive.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.#ctor(System.String)">
            <summary>
            Construct a ShaderInclude specifying only its path.
            </summary>
            <param name="resourcePath">
            A <see cref="T:System.String"/> that specify the path used for including the include source string
            using GLSL #include preprocessor directive.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown is <paramref name="resourcePath"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="resourcePath"/> is not rooted (i.e. it doesn't start with '/' character), or if
            it specify a directory path (i.e. it ends with '/' character) or if its value contains invalid path
            characters ('\n', '\t', '"', '&lt;', or '&gt;').
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Construct a ShaderInclude specifying its path and the relative source lines.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the path used for including the include source string
            using GLSL #include preprocessor directive.
            </param>
            <param name="source">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that specify the shader include source text.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown is <paramref name="path"/> or <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="path"/> is not rooted (i.e. it doesn't start with '/' character), or if
            it specify a directory path (i.e. it ends with '/' character) or if its value contains invalid path
            characters ('\n', '\t', '"', '&lt;', or '&gt;').
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.LoadSource(System.IO.Stream)">
            <summary>
            Load the shader source from a stream.
            </summary>
            <param name="sourceStream">
            A <see cref="T:System.IO.Stream"/>that holds the source lines.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown in the case <paramref name="sourceStream"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.LoadSource(System.String)">
            <summary>
            Load the shader source from an embedded resource
            </summary>
            <param name="resourcePath">
            A <see cref="T:System.String"/> that specify the embedded resource path.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="resourcePath"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if no embedded resource can be found.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.LoadSource(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load the shader include source from a string.
            </summary>
            <param name="sourceStrings">
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that specify the shader source strings.
            </param>
        </member>
        <member name="P:OpenGL.Objects.ShaderInclude.IncludePath">
            <summary>
            Path used for including this ShaderInclude source string.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderInclude._IncludePath">
            <summary>
            Path used for including this ShaderInclude source string.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderInclude._InvalidPathChars">
            <summary>
            Invalid characters for path specification.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderInclude.Source">
            <summary>
            Include source strings.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderInclude._SourceStrings">
            <summary>
            Include source strings.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderInclude.IsUploaded">
            <summary>
            Flag indicating whether this object is compiled.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderInclude.ThisObjectClass">
            <summary>
            Shader include object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderInclude.ObjectClass">
            <summary>
            Shader include object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this BufferObject really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this object exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this BufferObject (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns always false, since the named strings does not have an actual name.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this ShaderObject resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShaderInclude.Delete(OpenGL.Objects.GraphicsContext)">
            <summary>
            Delete this ShaderInclude.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ShaderIncludeLibrary">
            <summary>
            Shader include library.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderIncludeLibrary.#ctor">
            <summary>
            Construct a ShaderIncludeLibrary.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderIncludeLibrary.IsPathDefined(System.String)">
            <summary>
            Determine whether an include source have a specific path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify an include file path.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="path"/> specify an include file.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.ShaderIncludeLibrary._IncludeFileSystem">
            <summary>
            Map between paths and include source strings.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderIncludeLibrary.ThisObjectClass">
            <summary>
            Shader include object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShaderIncludeLibrary.ObjectClass">
            <summary>
            Shader include object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderIncludeLibrary.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            <para>
            This implementation returns always false.
            </para>
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShaderIncludeLibrary.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ShaderPreprocessor">
            <summary>
            Preprocess GLSL source code.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderPreprocessor.Stage">
            <summary>
            Text processing stages.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessor.Stage.Includes">
            <summary>
            Process #include directives.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessor.Stage.Conditionals">
            <summary>
            Process conditional directives.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessor.Stage.All">
            <summary>
            All implemented stages.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessor.Process(System.Collections.Generic.IEnumerable{System.String},OpenGL.Objects.ShaderCompilerContext,OpenGL.Objects.ShaderIncludeLibrary,OpenGL.Objects.ShaderPreprocessor.Stage)">
            <summary>
            Process a source using the preprocessor.
            </summary>
            <param name="shaderSource"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.ShaderPreprocessor.IncludeProcessorContext">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessor.IncludeProcessorContext.CurrentPath">
            <summary>
            Current preprocessor path.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessor.ProcessIncludes(System.Collections.Generic.IEnumerable{System.String},OpenGL.Objects.ShaderCompilerContext,OpenGL.Objects.ShaderIncludeLibrary)">
            <summary>
            Process shader source lines to resolve #include directives.
            </summary>
            <param name="shaderSource">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that specify the shader source lines. Null items in the enumeration
            will be ignored.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specify the compiler parameteres.
            </param>
            <param name="includeLibrary">
            A <see cref="T:OpenGL.Objects.ShaderIncludeLibrary"/> determining the shader include file system.
            </param>
            <returns>
            It returns the processed source lines <paramref name="shaderSource"/>, but without any #include directive. Each #include
            directive will be replaced by the corresponding text depending on <paramref name="cctx"/>.
            </returns>
            <remarks>
            <para>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="includeLibrary"/>, <paramref name="cctx"/> or <paramref name="shaderSource"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessor._RegexInclude">
            <summary>
            Regular expression used for recognizing #include preprocessor directives.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessor._RegexIncludeAngular">
            <summary>
            Regular expression used for recognizing #include preprocessor directives.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessor._RegexIncludePathSplit">
            <summary>
            Regular expression used for recognizing #include preprocessor directives.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShaderPreprocessor.ProcessConditionals(System.Collections.Generic.IEnumerable{System.String},OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Process a source using the preprocessor.
            </summary>
            <param name="shaderSource">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that specified the shader source to be processed.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> defining the GLSL compilation parameters.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.List`1"/>, which is the result of the processing of <paramref name="shaderSource"/>.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.ShaderPreprocessor._RegexPreprocessorExpression">
            <summary>
            Regular expression used for recognizing #include preprocessor directives.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Shader">
            <summary>
            Shader object.
            </summary>
            <remarks>
            <para>
            A Shader is a function library allowing to compose a ShaderProgram. The
            Shader is characterized by its source code; the source code has to be
            compiled, before being linked with a ShaderProgram instance. A single Shader
            could be linked with one or more ShaderProgram instances. Once linked, it doesn't
            have the reason to be allocated anymore (except for reuse in another program linkage).
            </para>
            <para>
            A Shader instance has a main class, which determine the execution stage of the code,
            when the formed ShaderProgram is executed. The avaialable classes depends on the current
            OpenGL implementation; at the current state, the shader object class is determined
            by the enumeration <see cref="T:OpenGL.ShaderType"/>.
            </para>
            <para>
            This class automatically builds the source code of each Shader. The generated source code
            has the following strings:
            - Standard shader header
            - Linked shader program preprocessor definitions (conditional symbols)
            - This shader source strings
            
            The standard header is composed from standard pragmas (current shader version, debug or
            optimization pragmas). This source in invariant.
            
            Shader program preprocessor definitions are supplied by the ShaderProgram holding the
            Shader. Indeed preprocessor definitions are shared between every Shader linked
            with the same ShaderProgram.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Shader.#ctor(OpenGL.ShaderType)">
            <summary>
            Construct a Shader defining its main class.
            </summary>
            <param name="shaderStage">
            A <see cref="T:OpenGL.ShaderType"/> indicating the shader stage of this Shader.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Shader.ObjectStage">
            <summary>
            Shader object stage.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Shader.SourcePath">
            <summary>
            Get source path (actual or fictive, used for shader source identification).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Shader._SourcePath">
            <summary>
            Shader source file path, if any.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Shader.AppendSourceStrings(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Append a constant array of strings.
            </summary>
            <param name="sourceLines">
            A <see cref="!:List&lt;string&gt;"/> representing the current shader source.
            </param>
            <param name="source">
            An <see cref="!:IEnumerable&lt;string&gt;"/> which represents the source for be appended
            at the end of the source <paramref name="sourceLines"/>.
            </param>
            <remarks>
            This is a simple utility routine will appends an array of strings to a source lines list.
            This routine automatically add the end-of-line character for each string in <paramref name="source"/>.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Shader.LoadSourceLines(System.IO.Stream)">
            <summary>
            Load the shader source lines from a stream.
            </summary>
            <param name="sourceStream">
            A <see cref="T:System.IO.Stream"/>that holds the source lines.
            </param>
            <returns>
            It returns a <see cref="!:List&lt;string&gt;"/> that represent the loaded source lines.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown in the case <paramref name="sourceStream"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Shader.LoadSourceLines(System.String)">
            <summary>
            Load the shader source from an embedded resource
            </summary>
            <param name="resourcePath">
            A <see cref="T:System.String"/> that specify the embedded resource path.
            </param>
            <returns>
            It returns a <see cref="!:List&lt;string&gt;"/> that represent the loaded source lines.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="resourcePath"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if no embedded resource can be found.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Shader.CleanSource(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clean the source code lines.
            </summary>
            <param name="sourceLines">
            </param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.Shader._RegexBackslashNewline">
            <summary>
            Regular expression for matching backslashes before EOL.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Shader._RegexCppCommentLine">
            <summary>
            Regular expression for matching C++ comments.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Shader._RegexCCommentLine">
            <summary>
            Regular expression for matching C comments.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Shader.LoadSource(System.IO.Stream)">
            <summary>
            Load the shader source from a stream.
            </summary>
            <param name="sourceStream">
            A <see cref="T:System.IO.Stream"/>that holds the source lines.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown in the case <paramref name="sourceStream"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Shader.LoadSource(System.String)">
            <summary>
            Load the shader source from an embedded resource
            </summary>
            <param name="resourcePath">
            A <see cref="T:System.String"/> that specify the embedded resource path.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="resourcePath"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if no embedded resource can be found.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Shader.LoadSource(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load the shader source from a string.
            </summary>
            <param name="sourceStrings">
            A <see cref="!:IEnumerator&lt;string&gt;"/> that specify the shader source strings.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Shader._SourceStrings">
            <summary>
            Shader object source strings.
            </summary>
            <remarks>
            The strings specified using this member compose the partial source to be
            compiled. 
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.Shader.CompiledStrings">
            <summary>
            The source strings effectively used for compilation.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Shader.GenerateSource(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Generate Shader source.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for the compilation process.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specify the information required for compiling this Shader.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.List`1"/> which represent this Shader source. This source text is ready to be compiled.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Shader.Compile(OpenGL.Objects.GraphicsContext)">
            <summary>
            Compiles this Shader.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> holding the required resources.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Shader.IsCompiled">
            <summary>
            Flag indicating whether this object is compiled.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Shader.GetInfoLog">
            <summary>
            Gets the informational log.
            </summary>
            <returns>
            It returns a <see cref="T:System.Text.StringBuilder"/> containing warning and error messages of the last
            compilation of this Shader.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.Shader._CompilationParams">
            <summary>
            ShaderCompilerContext used for compilation.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Shader.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Create this Shader.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specify compiler parameters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="cctx"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Shader.ThisObjectClass">
            <summary>
            Shader object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Shader.ObjectClass">
            <summary>
            Shader object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Shader.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this Shader really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this Shader exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this Shader (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Shader.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create this Shader.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Shader.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a Shader name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns a valid object name for this Shader.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Shader.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this Shader resource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Shader.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a Shader name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ShadersLibrary">
            <summary>
            Shaders library.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShadersLibrary.Include">
            <summary>
            Shader include object.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Include.Path">
            <summary>
            The path of the shader object source.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Include.Resource">
            <summary>
            Preprocessor symbols affecting the shader object compilation.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Includes">
            <summary>
            List of paths specifying shader include sources.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShadersLibrary.SymbolList">
            <summary>
            Utility class for serializing shader object symbol list.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShadersLibrary.Object">
            <summary>
            Shader object.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Object.Resource">
            <summary>
            The path of the shader object source.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Object.Stage">
            <summary>
            Shader object stage. Meaninful only if used under /ShadersLibrary/Programs.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Object.TestStage">
            <summary>
            Shader object stages used for testing compilation. Multiple stages are specified by
            separating with spaces stage identifiers (<see cref="T:OpenGL.ShaderType"/>).
            </summary>
        </member>
        <member name="P:OpenGL.Objects.ShadersLibrary.Object.Stages">
            <summary>
            Shader object stages used for testing compilation.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Object.Symbols">
            <summary>
            Preprocessor symbols affecting the shader object compilation.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Object.Create">
            <summary>
            Create a shader object from this Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Object.Create(OpenGL.ShaderType)">
            <summary>
            Create a shader object from this Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Object.GetHashInfo(System.Text.StringBuilder,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            
            </summary>
            <param name="cctx"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Objects">
            <summary>
            List of <see cref="T:OpenGL.Objects.ShadersLibrary.Object"/> instances describing the available shader objects in library.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.GetObject(System.String)">
            <summary>
            Get the definition of a object.
            </summary>
            <param name="objectId">
            A <see cref="T:System.String"/> that specifies the object identifier.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ShadersLibrary.Object"/> describing the object identified with <paramref name="objectId"/>, or null if not found.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.ShadersLibrary.ProgramTag">
            <summary>
            Shader program tag.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.ProgramTag.#ctor(OpenGL.Objects.ShadersLibrary.Program)">
            <summary>
            Create a ProgramTag from a <see cref="T:OpenGL.Objects.ShadersLibrary.Program"/>.
            </summary>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShadersLibrary.Program"/> that specifies how to build the shader.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.ProgramTag.#ctor(OpenGL.Objects.ShadersLibrary.Program,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Create a ProgramTag from a <see cref="T:OpenGL.Objects.ShadersLibrary.Program"/>.
            </summary>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShadersLibrary.Program"/> that specifies how to build the shader.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.ProgramTag.Id">
            <summary>
            The program identifier.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.ProgramTag.CompilerContext">
            <summary>
            Shader compiler paramaters.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShadersLibrary.Attribute">
            <summary>
            Shader program attribute.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Attribute.Name">
            <summary>
            Attribute name.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Attribute.Semantic">
            <summary>
            Attribute semantic.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Attribute.Location">
            <summary>
            Attribute location.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Attribute.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Utility for setting default values on deserialization.
            </summary>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> of the deserializer.
            </param>
        </member>
        <member name="T:OpenGL.Objects.ShadersLibrary.Uniform">
            <summary>
            Shader program uniform.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Uniform.Name">
            <summary>
            Uniform name.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Uniform.Semantic">
            <summary>
            Uniform semantic.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShadersLibrary.Program">
            <summary>
            Shader program.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Program.Id">
            <summary>
            The identifier of the shader program.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Program.Objects">
            <summary>
            Object linked to this shader program.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Program.Attributes">
            <summary>
            Active attributes.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Program.Uniforms">
            <summary>
            Active uniforms.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Program.Extensions">
            <summary>
            GLSL extensions.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Program.Create">
            <summary>
            Create a program from this Program.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Program.Create(OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Create a program from this Program.
            </summary>
            <param name="cctx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Program.GetHashInfo(OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            
            </summary>
            <param name="cctx"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary.Programs">
            <summary>
            List of <see cref="T:OpenGL.Objects.ShadersLibrary.Program"/> instances describing the available shader programs in library.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.GetPrograms">
            <summary>
            Get the programs identifier available in this ShaderLibrary.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.GetProgram(System.String)">
            <summary>
            Get the definition of a program.
            </summary>
            <param name="programId">
            A <see cref="T:System.String"/> that specifies the program identifier.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ShadersLibrary.Program"/> describing the program identified with <paramref name="programId"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.CreateProgramTag(System.String)">
            <summary>
            Create a <see cref="T:OpenGL.Objects.ShadersLibrary.ProgramTag"/> used for creating (lazily) a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
            <param name="programId">
            A <see cref="T:System.String"/> that specifies the program identifier.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ShadersLibrary.ProgramTag"/> for creating the program identified with <paramref name="programId"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.CreateProgramTag(System.String,OpenGL.Objects.ShaderCompilerContext)">
            <summary>
            Create a <see cref="T:OpenGL.Objects.ShadersLibrary.ProgramTag"/> used for creating (lazily) a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
            <param name="programId">
            A <see cref="T:System.String"/> that specifies the program identifier.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specifies *additional* parameters to be applied/merged to the default
            compiler parameters.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ShadersLibrary.ProgramTag"/> for creating the program identified with <paramref name="programId"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.CreateProgramTag(System.String,System.String[])">
            <summary>
            Create a <see cref="T:OpenGL.Objects.ShadersLibrary.ProgramTag"/> used for creating (lazily) a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
            <param name="programId">
            A <see cref="T:System.String"/> that specifies the program identifier.
            </param>
            <param name="cctx">
            A <see cref="T:OpenGL.Objects.ShaderCompilerContext"/> that specifies *additional* parameters to be applied/merged to the default
            compiler parameters.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ShadersLibrary.ProgramTag"/> for creating the program identified with <paramref name="programId"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Load(System.IO.Stream)">
            <summary>
            Load a ShadersLibrary from a Stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> that reads a <see cref="T:OpenGL.Objects.ShadersLibrary"/> information.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ShadersLibrary"/> read from <paramref name="stream"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Save(System.IO.Stream)">
            <summary>
            Save this ShadersLibrary to a Stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> that reads a <see cref="T:OpenGL.Objects.ShadersLibrary"/> information.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary._Serializer">
            <summary>
            The ShadersLibrary serialized.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Load(System.String)">
            <summary>
            Load a ShadersLibrary from an embedded resource.
            </summary>
            <param name="resourcePath">
            A <see cref="T:System.String"/> that specify the embedded resource path.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ShadersLibrary"/> read from <paramref name="resourcePath"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="resourcePath"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if no embedded resource can be found.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.ShadersLibrary.Instance">
            <summary>
            Get the only instance of <see cref="T:OpenGL.Objects.ShadersLibrary"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Merge(System.String)">
            <summary>
            Merge a ShaderLibrary loaded from an embedded resource with <see cref="P:OpenGL.Objects.ShadersLibrary.Instance"/>.
            </summary>
            <param name="resourcePath">
            A <see cref="T:System.String"/> that specify the embedded resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.ShadersLibrary.Merge(OpenGL.Objects.ShadersLibrary)">
            <summary>
            Merge a ShaderLibrary loaded from an embedded resource with <see cref="P:OpenGL.Objects.ShadersLibrary.Instance"/>.
            </summary>
            <param name="shadersLibrary">
            A <see cref="T:OpenGL.Objects.ShadersLibrary"/> that specify the embedded resources.
            </param>
        </member>
        <member name="F:OpenGL.Objects.ShadersLibrary._ShadersLibrary">
            <summary>
            The reference instance of <see cref="T:OpenGL.Objects.ShadersLibrary"/>.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.ShaderUniformType">
            <summary>
            The types available in a ShaderPrograms.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Float">
            <summary>
            A single single-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Vec2">
            <summary>
            A vector of two single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Vec3">
            <summary>
            A vector of three single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Vec4">
            <summary>
            A vector of four single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Double">
            <summary>
            A single double-precision floating-point value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleVec2">
            <summary>
            A vector of two double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleVec3">
            <summary>
            A vector of three double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleVec4">
            <summary>
            A vector of four double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Int">
            <summary>
            A single signed integer value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntVec2">
            <summary>
            A vector of two signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntVec3">
            <summary>
            A vector of three signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntVec4">
            <summary>
            A vector of four signed integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UInt">
            <summary>
            A single unsigned integer value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UIntVec2">
            <summary>
            A vector of two unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UIntVec3">
            <summary>
            A vector of three unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UIntVec4">
            <summary>
            A vector of four unsigned integer values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Bool">
            <summary>
            A single boolean value.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.BoolVec2">
            <summary>
            A vector of two boolean values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.BoolVec3">
            <summary>
            A vector of three boolean values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.BoolVec4">
            <summary>
            A vector of four boolean values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat2x2">
            <summary>
            A matrix of two rows and two columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat3x3">
            <summary>
            A matrix of three rows and three columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat4x4">
            <summary>
            A matrix of four rows and four columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat2x3">
            <summary>
            A matrix of three rows and two columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat2x4">
            <summary>
            A matrix of four rows and two columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat3x2">
            <summary>
            A matrix of two rows and three columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat3x4">
            <summary>
            A matrix of four rows and three columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat4x2">
            <summary>
            A matrix of four rows and two columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Mat4x3">
            <summary>
            A matrix of four rows and three columns of single-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat2x2">
            <summary>
            A matrix of two rows and two columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat3x3">
            <summary>
            A matrix of three rows and three columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat4x4">
            <summary>
            A matrix of four rows and four columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat2x3">
            <summary>
            A matrix of three rows and two columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat2x4">
            <summary>
            A matrix of four rows and two columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat3x2">
            <summary>
            A matrix of two rows and three columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat3x4">
            <summary>
            A matrix of four rows and three columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat4x2">
            <summary>
            A matrix of four rows and two columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.DoubleMat4x3">
            <summary>
            A matrix of four rows and three columns of double-precision floating-point values.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler1D">
            <summary>
            Texture 1D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler2D">
            <summary>
            Texture 2D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler3D">
            <summary>
            Texture 3D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.SamplerCube">
            <summary>
            Texture cube sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler2DRect">
            <summary>
            Texture rectangle sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler1DShadow">
            <summary>
            Depth texture 1D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler2DShadow">
            <summary>
            Depth texture 2D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.SamplerCubeShadow">
            <summary>
            Depth texture cube sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler2DRectShadow">
            <summary>
            Depth texture rectangle sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler1DArray">
            <summary>
            Texture 1D array sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler2DArray">
            <summary>
            Texture 2D array sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.SamplerCubeMapArray">
            <summary>
            Texture 2D array sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler1DArrayShadow">
            <summary>
            Depth texture 1D array sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler2DArrayShadow">
            <summary>
            Depth texture 2D array sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler2DMultisample">
            <summary>
            Multisample texture 2D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.Sampler2DMultisampleArray">
            <summary>
            Multisample texture 2D array sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.SamplerBuffer">
            <summary>
            Texture buffer sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntSampler1D">
            <summary>
            Texture 1D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntSampler2D">
            <summary>
            Texture 2D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntSampler2DRect">
            <summary>
            Texture rectangle sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntSampler3D">
            <summary>
            Texture 3D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntSamplerCube">
            <summary>
            Texture cube sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntSampler1DArray">
            <summary>
            Texture 1D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.IntSampler2DArray">
            <summary>
            Texture 2D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UIntSampler1D">
            <summary>
            Texture 1D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UIntSampler2D">
            <summary>
            Texture 2D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UIntSampler2DRect">
            <summary>
            Texture rectangle sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UIntSampler3D">
            <summary>
            Texture 3D sampler.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.ShaderUniformType.UIntSamplerCube">
            <summary>
            Texture cube sampler.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.BlendState">
            <summary>
            Blend render state (buffer group, color).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.#ctor">
            <summary>
            Construct a default BlendState (blending disabled).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.#ctor(OpenGL.BlendEquationMode,OpenGL.BlendingFactor,OpenGL.BlendingFactor)">
            <summary>
            Construct a BlendState with unified RGB/Alpha function.
            </summary>
            <param name="equation">
            A <see cref="T:OpenGL.BlendEquationMode"/> flag indicating which equation to used for blending.
            </param>
            <param name="srcFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to the source color (including alpha).
            </param>
            <param name="dstFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to the destination color (including alpha).
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.#ctor(OpenGL.BlendEquationMode,OpenGL.BlendingFactor,OpenGL.BlendingFactor,OpenGL.ColorRGBAF)">
            <summary>
            Construct a BlendState with unified RGB/Alpha function.
            </summary>
            <param name="equation">
            A <see cref="T:OpenGL.BlendEquationMode"/> flag indicating which equation to used for blending.
            </param>
            <param name="srcFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to the source color (including alpha).
            </param>
            <param name="dstFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to the destination color (including alpha).
            </param>
            <param name="constColor">
            A <see cref="T:OpenGL.ColorRGBAF"/> that specify the constant color used in blending functions.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.#ctor(OpenGL.BlendEquationMode,OpenGL.BlendEquationMode,OpenGL.BlendingFactor,OpenGL.BlendingFactor,OpenGL.BlendingFactor,OpenGL.BlendingFactor)">
            <summary>
            Construct a BlendState with separated RGB/Alpha functions.
            </summary>
            <param name="rgbEquation">
            A <see cref="T:OpenGL.BlendEquationMode"/> flag indicating which equation to used for blending RGB color components.
            </param>
            <param name="alphaEquation">
            A <see cref="T:OpenGL.BlendEquationMode"/> flag indicating which equation to used for blending Alpha color component.
            </param>
            <param name="srcRgbFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to the source color (alpha component excluded).
            </param>
            <param name="srcAlphaFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to only the source alpha component.
            </param>
            <param name="dstRgbFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to the destination color (alpha component excluded).
            </param>
            <param name="dstAlphaFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to only the destination alpha component.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.#ctor(OpenGL.BlendEquationMode,OpenGL.BlendEquationMode,OpenGL.BlendingFactor,OpenGL.BlendingFactor,OpenGL.BlendingFactor,OpenGL.BlendingFactor,OpenGL.ColorRGBAF)">
            <summary>
            Construct a BlendState with separated RGB/Alpha functions.
            </summary>
            <param name="rgbEquation">
            A <see cref="T:OpenGL.BlendEquationMode"/> flag indicating which equation to used for blending RGB color components.
            </param>
            <param name="alphaEquation">
            A <see cref="T:OpenGL.BlendEquationMode"/> flag indicating which equation to used for blending Alpha color component.
            </param>
            <param name="srcRgbFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to the source color (alpha component excluded).
            </param>
            <param name="srcAlphaFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to only the source alpha component.
            </param>
            <param name="dstRgbFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to the destination color (alpha component excluded).
            </param>
            <param name="dstAlphaFactor">
            A <see cref="T:OpenGL.BlendingFactor"/> that specify the scaling factors applied to only the destination alpha component.
            </param>
            <param name="constColor">
            A <see cref="T:OpenGL.ColorRGBAF"/> that specify the constant color used in blending functions.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.#ctor(OpenGL.Objects.GraphicsContext)">
            <summary>
            Construct the current BlendState.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> defining this GraphicsState.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.Enabled">
            <summary>
            Determine whether the blending is enabled.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.EquationSeparated">
            <summary>
            Determine whether blending equation is separated for RGB and Alpha components.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.RgbEquation">
            <summary>
            Blend equation for RGB components.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.AlphaEquation">
            <summary>
            Blend equation for alpha components.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.FunctionSeparated">
            <summary>
            Determine whether blending function is separated for RGB and Alpha components.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.SrcFactor">
            <summary>
            Source blending factor.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.DstFactor">
            <summary>
            Destination blending factor.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.RgbSrcFactor">
            <summary>
            RGB source blending factor.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.RgbDstFactor">
            <summary>
            RGB destination blending factor.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.AlphaSrcFactor">
            <summary>
            Alpha source blending factor.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.AlphaDstFactor">
            <summary>
            Alpha destination blending factor.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.BlendColor">
            <summary>
            Constant blending color.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.IsSupportedEquation(OpenGL.BlendEquationMode)">
            <summary>
            Determine whether a blending function is supported.
            </summary>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.IsSupportedFunction(OpenGL.BlendingFactor)">
            <summary>
            Determine whether a blending function is supported.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._Enabled">
            <summary>
            Enabled flag.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._RgbEquation">
            <summary>
            Blend equation for RGB components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._AlphaEquation">
            <summary>
            Blend equation for alpha components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._RgbSrcFactor">
            <summary>
            RGB source blending factor.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._RgbDstFactor">
            <summary>
            RGB destination blending factor.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._AlphaSrcFactor">
            <summary>
            Alpha source blending factor.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._AlphaDstFactor">
            <summary>
            Alpha destination blending factor.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._BlendColor">
            <summary>
            Constant blending color.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.DefaultState">
            <summary>
            The system default state for BlendState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.AlphaBlending">
            <summary>
            The default state for alpha blending.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState.StateId">
            <summary>
            The identifier of the state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.BlendState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.BlendState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Set ShaderProgram state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="sProgram"/>.
            </param>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.BlendState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.State.BlendState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.State.CullFaceState">
            <summary>
            Culling face state
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.#ctor">
            <summary>
            Construct a default CullFaceState (front face is CCW, culling backfaces).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.#ctor(OpenGL.FrontFaceDirection)">
            <summary>
            Construct a CullFaceState, specifying front face and disabling culling.
            </summary>
            <param name="frontFace">
            A <see cref="!:FrontFace"/> that determine how front faces are determined.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.#ctor(OpenGL.CullFaceMode)">
            <summary>
            Construct a CullFaceState, enabling front/back face culling (front face is defaulted to CCW).
            </summary>
            <param name="culledFace">
            A <see cref="T:OpenGL.CullFaceMode"/> that specify which faces are culled.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.#ctor(OpenGL.FrontFaceDirection,OpenGL.CullFaceMode)">
            <summary>
            Construct a CullFaceState, specifying front face and enabling culling of the specified faces.
            </summary>
            <param name="frontFace">
            A <see cref="T:OpenGL.FrontFaceDirection"/> that specify how front faces are determined.
            </param>
            <param name="culledFace">
            A <see cref="T:OpenGL.CullFaceMode"/> that specify which faces are culled.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.#ctor(OpenGL.Objects.GraphicsContext)">
            <summary>
            Construct the current CullFaceState.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> defining this GraphicsState.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.CullFaceState.FrontFaceMode">
            <summary>
            Front face determination mode property.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.CullFaceState.Culling">
            <summary>
            Cull enabled flag.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.CullFaceState.CulledFace">
            <summary>
            Face culled.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.CullFaceState._FrontFaceMode">
            <summary>
            Front face determination
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.CullFaceState._Enabled">
            <summary>
            Enabled flag.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.CullFaceState._CulledFace">
            <summary>
            Face culled.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.CullFaceState.DefaultState">
            <summary>
            The system default state for CullFaceState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.CullFaceState.StateId">
            <summary>
            The identifier of the state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.CullFaceState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.CullFaceState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.CullFaceState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.CullFaceState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Set ShaderProgram state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="program"/>.
            </param>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.CullFaceState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.State.CullFaceState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.State.DepthTestState">
            <summary>
            Depth test render state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.DepthTestState.#ctor">
            <summary>
            Construct a default DepthTestState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.DepthTestState.#ctor(OpenGL.DepthFunction)">
            <summary>
            Construct a DepthTestState.
            </summary>
            <param name="depthFunction">
            A <see cref="T:OpenGL.DepthFunction"/> that specify the test function to apply.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.DepthTestState.#ctor(OpenGL.Objects.GraphicsContext)">
            <summary>
            Construct the current DepthTestState.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> defining this GraphicsState.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.DepthTestState.Enabled">
            <summary>
            Get or set the enable flag of the depth test.
            </summary>
            <remarks>
            The default value is <see cref="F:OpenGL.DepthFunction.Less"/>.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.State.DepthTestState._Enabled">
            <summary>
            Depth test enabled flag.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.DepthTestState.Function">
            <summary>
            Get or set the depth test function.
            </summary>
            <remarks>
            The default value is <see cref="F:OpenGL.DepthFunction.Less"/>.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.State.DepthTestState._Function">
            <summary>
            Depth test function.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.DepthTestState.DefaultState">
            <summary>
            The system default state for DepthTestState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.DepthTestState.StateId">
            <summary>
            The identifier of the state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.DepthTestState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.DepthTestState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.DepthTestState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.DepthTestState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.DepthTestState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply this depth test render state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="program"/>.
            </param>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.DepthTestState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.DepthTestState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.DepthTestState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.State.DepthTestState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.State.GraphicsState">
            <summary>
            Generic render state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.#ctor">
            <summary>
            Construct a GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.#ctor(System.Boolean)">
            <summary>
            Construct a GraphicsState, specifying whether it is inheritable.
            </summary>
            <param name="inheritable"></param>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.NextStateIndex">
            <summary>
            Get the next state index.
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.GetStateCount">
            <summary>
            Get the total number of <see cref="T:OpenGL.Objects.State.IGraphicsState"/> implementations.
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.State.GraphicsState._StateIndex">
            <summary>
            The current state index for GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.op_Equality(OpenGL.Objects.State.GraphicsState,OpenGL.Objects.State.GraphicsState)">
            <summary>
            Compare two GraphicsState for equality
            </summary>
            <param name="state1">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare with <paramref name="state2"/>.
            </param>
            <param name="state2">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare with <paramref name="state1"/>.
            </param>
            <returns>
            It returns true if <paramref name="state1"/> equals to <paramref name="state2"/>, otherwise false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.op_Inequality(OpenGL.Objects.State.GraphicsState,OpenGL.Objects.State.GraphicsState)">
            <summary>
            Compare two GraphicsState for equality
            </summary>
            <param name="state1">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare with <paramref name="state2"/>.
            </param>
            <param name="state2">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare with <paramref name="state1"/>.
            </param>
            <returns>
            It returns true if <paramref name="state1"/> equals to <paramref name="state2"/>, otherwise false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.State.GraphicsState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.GraphicsState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.GraphicsState.IsContextBound">
            <summary>
            Flag indicating whether the state is context-bound.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.GraphicsState.IsProgramBound">
            <summary>
            Flag indicating whether the state can be applied on a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Create or update resources defined by this IGraphicsState, based on the associated <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <param name="shaderProgram">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> that will be used in conjunction with this IGraphicsState.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.Delete">
            <summary>
            Dispose resources allocated by <see cref="M:OpenGL.Objects.State.GraphicsState.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply the render state define by this IGraphicsState.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used in conjuction with <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> holding the uniform state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.Push">
            <summary>
            Performs a deep copy of this <see cref="T:OpenGL.Objects.State.IGraphicsState"/>.
            </summary>
            <returns>
            It returns the equivalent of this <see cref="T:OpenGL.Objects.State.IGraphicsState"/>, but all objects referenced
            are not referred by both instances.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.GraphicsState.StateIdentifier"/> of this state.
            </param>
            <remarks>
            <para>
            After a call to this routine, this IGraphicsState store the union of the previous information
            and of the information of <paramref name="state"/>.
            </para>
            <para>
            The semantic of the merge result is dependent on the actual implementation of this IGraphicsState. Normally
            the merge method will copy <paramref name="state"/> into this IGraphicsState, but other state could do
            different operations.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.State.GraphicsState._Inheritable">
            <summary>
            Flag indicating whether this state is inheritable.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.GraphicsStateSet">
            <summary>
            A set of GraphicsState.
            </summary>
            <remarks>
            <para>
            This class collects <see cref="T:OpenGL.Objects.State.GraphicsState"/> instances to specify a set of parameters that affect drawing
            operations. Each <see cref="T:OpenGL.Objects.State.GraphicsState"/> instance is applied, replacing the previous state having the same
            type (<see cref="P:OpenGL.Objects.State.IGraphicsState.StateIdentifier"/>).
            </para>
            <para>
            Usually rendering operations are ordered by the state they requires, and the order is meant to
            minimize the state changes. The state is applied only if the actually one is different to the one
            to be applied. This operation is performed using Merge method.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.GetDefaultSet">
            <summary>
            Factory method for getting the default render state set.
            </summary>
            <returns>
            It returns a GraphicsStateSet representing the default state set.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.GetCurrentStateSet(OpenGL.Objects.GraphicsContext)">
            <summary>
            Factory method for getting the current render state set.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> defining the state vector.
            </param>
            <returns>
            It returns a GraphicsStateSet representing the currently active state vector.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.DefineState(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Define/override a state.
            </summary>
            <param name="renderState">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> that specify how the render state is modified.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.UndefineState(System.Int32)">
            <summary>
            Undefine a state.
            </summary>
            <param name="stateId">
            A <see cref="T:System.String"/> that identify a specific state to undefine.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.IsDefinedState(System.Int32)">
            <summary>
            Determine whether a specific state is defined in this set.
            </summary>
            <param name="stateId">
            A <see cref="T:System.String"/> that identify a specific state.
            </param>
            <returns>
            It returns a boolean value indicating whether a state is defined in this GraphicsStateSet.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.State.GraphicsStateSet.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="stateId"></param>
            <returns></returns>
        </member>
        <member name="P:OpenGL.Objects.State.GraphicsStateSet.States">
            <summary>
            An enumerable of the states collected by this GraphicsStateSet.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.GraphicsStateSet._RenderStates">
            <summary>
            The set of GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.Apply(OpenGL.Objects.GraphicsContext)">
            <summary>
            Apply the set of GraphicsState collected by this instance.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> defining the state vector.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply the set of GraphicsState collected by this instance.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> defining the state vector.
            </param>
            <param name="program">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> defining the uniform state. This value can be null.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.Push">
            <summary>
            Clone this GraphicsStateSet.
            </summary>
            <returns>
            It returns a deep copy of this GraphicsStateSet.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSet.Merge(OpenGL.Objects.State.GraphicsStateSet)">
            <summary>
            Merge this state set with another one.
            </summary>
            <param name="stateSet">
            A <see cref="T:OpenGL.Objects.State.GraphicsStateSet"/> to be merged with this GraphicsStateSet.
            </param>
            <remarks>
            <para>
            After a call to this routine, this GraphicsStateSet store the union of the previous information
            and of the information of <paramref name="stateSet"/>.
            </para>
            <para>
            The semantic of the merge result is dependent by each <see cref="T:OpenGL.Objects.State.IGraphicsState"/> defined in both
            state sets.
            </para>
            <para>
            In the case a kind of GraphicsState is defined only in this GraphicsStateSet, the specific state remains
            unchanged, except when the state is not inheritable; in this case the specific state will be undefined.
            </para>
            <para>
            In the case a kind of GraphicsState is defined only in <paramref name="stateSet"/>, that state will be
            defined equally in this GraphicsStateSet.
            </para>
            <para>
            In the case a kind of GraphicsState is defined by both state sets, the state defined in this GraphicsStateSet
            will be merged with the one defined in <paramref name="stateSet"/>, by calling <see cref="M:OpenGL.Objects.State.IGraphicsState.Merge(OpenGL.Objects.State.IGraphicsState)"/>.
            </para>
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.State.GraphicsStateSetStack">
            <summary>
            A stack of <see cref="T:OpenGL.Objects.State.GraphicsStateSet"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSetStack.#ctor">
            <summary>
            Construct a GraphicsStateSetStack.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSetStack.#ctor(OpenGL.Objects.GraphicsContext)">
            <summary>
            Construct a GraphicsStateSetStack representing the current state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> to query the state.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.GraphicsStateSetStack.Current">
            <summary>
            Get the current <see cref="T:OpenGL.Objects.State.GraphicsStateSet"/> on top of this stack.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSetStack.Push">
            <summary>
            Push a copy of the current state set onto the stack.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSetStack.Push(OpenGL.Objects.State.GraphicsStateSet)">
            <summary>
            Push a copy of the current state set onto the stack.
            </summary>
            <param name="mergedState">
            A <see cref="T:OpenGL.Objects.State.GraphicsStateSet"/> to be merged on current render state set after having pushed it
            onto the stack.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSetStack.Pop">
            <summary>
            Pop the current state on top of the stack.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.GraphicsStateSetStack.Clear">
            <summary>
            Remove every element on this stack.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.GraphicsStateSetStack._StateSetStack">
            <summary>
            The GraphicsStateSet stack.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.IGraphicsState">
            <summary>
            Interface implemented by those object able to determine the graphics state.
            </summary>
            <remarks>
            <para>
            A render state is the union of the OpenGL context state (blend, depth, etc...) and a shader uniform state, both used
            for rendering.
            </para>
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.State.IGraphicsState.StateIdentifier">
            <summary>
            The identifier of this IGraphicsState implementation.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.IGraphicsState.StateIndex">
            <summary>
            Unique index assigned to this IGraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.IGraphicsState.IsContextBound">
            <summary>
            Flag indicating whether the state is applied to a <see cref="T:OpenGL.Objects.GraphicsContext"/>.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.IGraphicsState.IsProgramBound">
            <summary>
            Flag indicating whether the state can be applied on a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.IGraphicsState.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Create or update resources defined by this IGraphicsState, based on the associated <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <param name="shaderProgram">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> that will be used in conjunction with this IGraphicsState.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.IGraphicsState.Delete">
            <summary>
            Dispose resources allocated by <see cref="M:OpenGL.Objects.State.IGraphicsState.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.IGraphicsState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply the render state defined by this IGraphicsState.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used in conjuction with <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> holding the uniform state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.IGraphicsState.Push">
            <summary>
            Push/copy this state onto the stack, to be restored later.
            </summary>
            <returns>
            It returns the most appropriate IGraphicsState for managing a set of state on a stack structure.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.IGraphicsState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one, generally after a <see cref="M:OpenGL.Objects.State.IGraphicsState.Push"/> execution.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.IGraphicsState.StateIdentifier"/> of this state.
            </param>
            <remarks>
            <para>
            After a call to this routine, this IGraphicsState store the union of the previous information
            and of the information of <paramref name="state"/>.
            </para>
            <para>
            The semantic of the merge result is dependent on the actual implementation of this IGraphicsState. Normally
            the merge method will copy <paramref name="state"/> into this IGraphicsState, but other state could do
            different operations.
            </para>
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.State.MaterialState">
            <summary>
            OpenGL.Net light shading model.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.MaterialState.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.MaterialState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.MaterialState.Material">
            <summary>
            Light model global parameters.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.MaterialState.Material.#ctor(OpenGL.ColorRGBAF)">
            <summary>
            Construct a Material with a specific diffuse color.
            </summary>
            <param name="diffuse"></param>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.Material.Ambient">
            <summary>
            The ambient color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.Material.Emissive">
            <summary>
            The emissive color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.Material.Diffuse">
            <summary>
            The diffuse color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.Material.Specular">
            <summary>
            The specular color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.Material.Shininess">
            <summary>
            Material shininess.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.MaterialState.Material.ApplyState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.String)">
            <summary>
            Apply this MaterialState
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.FrontMaterial">
            <summary>
            The front face material
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.FrontMaterialEmissionTexture">
            <summary>
            The front face material texture for emission component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState._FrontMaterialEmissionTexture">
            <summary>
            The front face material texture for emission component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.FrontMaterialEmissionTexCoord">
            <summary>
            The front face material texture for emission component, if any.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.FrontMaterialDiffuseTexture">
            <summary>
            The front face material texture for diffuse component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState._FrontMaterialDiffuseTexture">
            <summary>
            The front face material texture for diffuse component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.FrontMaterialDiffuseTexCoord">
            <summary>
            The front face material texture for diffuse component, if any.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.FrontMaterialNormalTexture">
            <summary>
            The front face material texture for normal component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState._FrontMaterialNormalTexture">
            <summary>
            The front face material texture for normal component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.FrontMaterialNormalTexCoord">
            <summary>
            The front face material texture for normal component, if any.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.FrontMaterialSpecularTexture">
            <summary>
            The front face material texture for specular component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState._FrontMaterialSpecularTexture">
            <summary>
            The front face material texture for specular component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.FrontMaterialSpecularTexCoord">
            <summary>
            The front face material texture for specular component, if any.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.FrontMaterialAmbientTexture">
            <summary>
            The front face material texture for ambient component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState._FrontMaterialAmbientTexture">
            <summary>
            The front face material texture for ambient component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.FrontMaterialAmbientTexCoord">
            <summary>
            The front face material texture for ambient component, if any.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.FrontMaterialDisplacementTexture">
            <summary>
            The front face material texture for displacement component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState._FrontMaterialDisplacementTexture">
            <summary>
            The front face material texture for displacement component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.FrontMaterialDisplacementTexCoord">
            <summary>
            The front face material texture for displacement component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.FrontMaterialDisplacementFactor">
            <summary>
            The front face material texture for displacement component, if any.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState.StateId">
            <summary>
            The identifier for the TransformState derived classes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.IsContextBound">
            <summary>
            Flag indicating whether the state is context-bound.
            </summary>
            <remarks>
            It returns always true, since it supports also fixed pipeline.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.IsProgramBound">
            <summary>
            Flag indicating whether the state can be applied on a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.MaterialState.Delete">
            <summary>
            Dispose resources allocated by <see cref="!:Create(GraphicsContext, ShaderProgram)"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.MaterialState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply this MaterialState
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.MaterialState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.MaterialState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.MaterialState.UniformState">
            <summary>
            Get the uniform state associated with this instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.MaterialState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.State.MaterialState._UniformProperties">
            <summary>
            The uniform state of this TransformState.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.LightsState">
            <summary>
            OpenGL.Net light shading model.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.LightsState.LightModelType">
            <summary>
            Light model global parameters.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.LightModelType.#ctor">
            <summary>
            Construct a LightModelType with the default ambient light.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.LightModelType.#ctor(OpenGL.ColorRGBAF)">
            <summary>
            Construct a LightModelType with a specific ambient light.
            </summary>
            <param name="ambientLighting"></param>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.LightModelType.AmbientLighting">
            <summary>
            The ambient lighting.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.LightModelType.ApplyState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.String)">
            <summary>
            Apply this MaterialState
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="T:OpenGL.Objects.State.LightsState.Light">
            <summary>
            Abstract light.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.Light.AmbientColor">
            <summary>
            Light ambient color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.Light.DiffuseColor">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.Light.SpecularColor">
            <summary>
            Light specular color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.Light.ShadowMapIndex">
            <summary>
            Shadow map index.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.Light.ShadowMapMvp">
            <summary>
            Shadow map model-view-projection for light-space.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.Light.ShadowMap2D">
            <summary>
            Shadow map (2D).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.Light.ApplyState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.String)">
            <summary>
            Apply this Light
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="T:OpenGL.Objects.State.LightsState.LightDirectional">
            <summary>
            Directional light.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.LightDirectional.Direction">
            <summary>
            The light position vector (used by directional and spot lights).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.LightDirectional.HalfVector">
            <summary>
            The light half-vector (used by directional lights).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.LightDirectional.ApplyState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.String)">
            <summary>
            Apply this Light
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="T:OpenGL.Objects.State.LightsState.LightPoint">
            <summary>
            Point light.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.LightPoint.Position">
            <summary>
            The light position vector (used by point and spot lights).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.LightPoint.AttenuationFactors">
            <summary>
            The light attenuation factors (X: constant; Y: linear; Z: quadratic; used by point and spot lights).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.LightPoint.ApplyState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.String)">
            <summary>
            Apply this Light
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="T:OpenGL.Objects.State.LightsState.LightSpot">
            <summary>
            Spot light.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.LightSpot.Direction">
            <summary>
            The light position vector (used by directional and spot lights).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.LightSpot.FallOff">
            <summary>
            The spot fall-off parameters (X: fall-off angle in degrees; Y: fall-off exponent, used by spot lights).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.LightSpot.ApplyState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.String)">
            <summary>
            Apply this Light
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.LightModel">
            <summary>
            Get or set the actual light model parameters.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState._LightModel">
            <summary>
            The actual light model parameters.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.Lights">
            <summary>
            Lights
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.LightsInternal">
            <summary>
            Lights state array.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.LightsCount">
            <summary>
            The enabled lights count.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState.StateId">
            <summary>
            The identifier for the TransformState derived classes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.IsContextBound">
            <summary>
            Flag indicating whether the state is context-bound.
            </summary>
            <remarks>
            It returns always true, since it supports also fixed pipeline.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.IsProgramBound">
            <summary>
            Flag indicating whether the state can be applied on a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.UniformBlockTag">
            <summary>
            The tag the identifies the uniform block.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply this TransformState.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.Push">
            <summary>
            Performs a deep copy of this <see cref="T:OpenGL.Objects.State.IGraphicsState"/>.
            </summary>
            <returns>
            It returns the equivalent of this <see cref="T:OpenGL.Objects.State.IGraphicsState"/>, but all objects referenced
            are not referred by both instances.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.LightsState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.LightsState.UniformState">
            <summary>
            Get the uniform state associated with this instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.LightsState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.State.LightsState._UniformProperties">
            <summary>
            The uniform state of this TransformState.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.PixelAlignmentState">
            <summary>
            Depth test render state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PixelAlignmentState.#ctor">
            <summary>
            Construct a default PixelAlignmentState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PixelAlignmentState.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a PixelAlignmentState specifying the pack/unpack alignments.
            </summary>
            <param name="packAlign"></param>
            <param name="unpackAlign"></param>
        </member>
        <member name="P:OpenGL.Objects.State.PixelAlignmentState.PackAlignment">
            <summary>
            Get or set the pixel pack alignment (GPU to CPU).
            </summary>
            <remarks>
            The default value is 4.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.State.PixelAlignmentState._PackAlignment">
            <summary>
            Pixel pack alignment.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PixelAlignmentState.UnpackAlignment">
            <summary>
            Get or set the pixel unpack alignment (CPU to GPU).
            </summary>
            <remarks>
            The default value is 4.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.State.PixelAlignmentState._UnpackAlignment">
            <summary>
            Pixel pack alignment.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PixelAlignmentState.DefaultState">
            <summary>
            The system default state for PixelAlignmentState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PixelAlignmentState.StateId">
            <summary>
            The identifier of the state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PixelAlignmentState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PixelAlignmentState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PixelAlignmentState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PixelAlignmentState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PixelAlignmentState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply this depth test render state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="program"/>.
            </param>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.PixelAlignmentState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.PixelAlignmentState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.PixelAlignmentState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.State.PixelAlignmentState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.State.PolygonModeState">
            <summary>
            Specify how polygons are rasterized.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonModeState.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonModeState.#ctor(OpenGL.PolygonMode)">
            <summary>
            
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonModeState.#ctor(OpenGL.Objects.GraphicsContext)">
            <summary>
            Construct the current PolygonModeState.
            </summary>
            <param name='ctx'>
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> holding the polygon mode state.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonModeState.RasterMode">
            <summary>
            Specify how polygon is rasterized.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonModeState._RasterMode">
            <summary>
            Specify how polygon is rasterized.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonModeState.DefaultState">
            <summary>
            The system default state for BlendState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonModeState.StateId">
            <summary>
            The identifier of the state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonModeState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonModeState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonModeState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonModeState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonModeState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Set ShaderProgram state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="sProgram"/>.
            </param>
            <param name="sProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonModeState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.PolygonModeState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonModeState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonModeState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.State.PolygonOffsetState">
            <summary>
            Specify how polygons are rasterized.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonOffsetState.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonOffsetState.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="factor"></param>
            <param name="units"></param>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonOffsetState.#ctor(OpenGL.Objects.State.PolygonOffsetState.Mode,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="modes"></param>
            <param name="factor"></param>
            <param name="units"></param>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonOffsetState.#ctor(OpenGL.Objects.GraphicsContext)">
            <summary>
            Construct the current PolygonOffsetState.
            </summary>
            <param name='ctx'>
            Context.
            </param>
        </member>
        <member name="T:OpenGL.Objects.State.PolygonOffsetState.Mode">
            <summary>
            Modes affected by this state.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState.Mode.None">
            <summary>
            No offset.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState.Mode.Point">
            <summary>
            Offset applied to rasterized points.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState.Mode.Line">
            <summary>
            Offset applied to rasterized lines.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState.Mode.Fill">
            <summary>
            Offset applied to rasterized polygons.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState.Mode.All">
            <summary>
            Offset applied to rasterized fragments.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonOffsetState.Modes">
            <summary>
            Modes affected by the polygon offset.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState._Modes">
            <summary>
            Modes affected
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonOffsetState.Factor">
            <summary>
            Specify the offset applied to depth of the polygon.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState._Factor">
            <summary>
            Specifies a scale factor that is used to create a variable depth offset for each polygon.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonOffsetState.Units">
            <summary>
            Specify the units of <see cref="P:OpenGL.Objects.State.PolygonOffsetState.Factor"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState._Units">
            <summary>
            Is multiplied by an implementation-specific value to create a constant depth offset.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonOffsetState.DefaultState">
            <summary>
            The system default state for PolygonOffsetState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState.StateId">
            <summary>
            The identifier for the blend state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonOffsetState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonOffsetState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PolygonOffsetState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PolygonOffsetState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonOffsetState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Set ShaderProgram state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="program"/>.
            </param>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonOffsetState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.PolygonOffsetState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.PolygonOffsetState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.State.PrimitiveRestartState">
            <summary>
            Specify the primitive restart parameters.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PrimitiveRestartState.#ctor">
            <summary>
            Construct the default PrimitiveRestartState (disabled primitive restart, restart index equals to 0).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PrimitiveRestartState.#ctor(System.UInt32)">
            <summary>
            Construct an enabled PrimitiveRestartState specifying the restart index.
            </summary>
            <param name="restartIndex">
            The <see cref="T:System.UInt32"/> that specifies the primitive restart index.
            </param>
        </member>
        <member name="F:OpenGL.Objects.State.PrimitiveRestartState.Enabled">
            <summary>
            Flag indicating whether the primitive restart feature is enabled.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PrimitiveRestartState.RestartIndex">
            <summary>
            Index value used for restarting the primitive.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PrimitiveRestartState.DefaultState">
            <summary>
            The system default state for PrimitiveRestartState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PrimitiveRestartState.StateId">
            <summary>
            The identifier for the blend state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PrimitiveRestartState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PrimitiveRestartState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.PrimitiveRestartState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.PrimitiveRestartState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.PrimitiveRestartState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Set ShaderProgram state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="program"/>.
            </param>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.PrimitiveRestartState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.PrimitiveRestartState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.PrimitiveRestartState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.State.ShaderUniformStateBase">
            <summary>
            Class describing a partial uniform state of a <see cref="T:OpenGL.Objects.ShaderProgram"/>
            </summary>
            <remarks>
            This class is able to setup <see cref="T:OpenGL.Objects.ShaderProgram"/> uniform state by detecting fields and properties of derived
            classes having the <see cref="T:OpenGL.Objects.State.ShaderUniformStateBase.ShaderUniformStateAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.State.ShaderUniformStateBase.ShaderUniformStateAttribute">
            <summary>
            Attribute applied to those fields that are bound to a shader program uniform state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.ShaderUniformStateAttribute.#ctor">
            <summary>
            Assumes that the name is prefixes with a prefix framework-reserved ("glo_").
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.ShaderUniformStateAttribute.#ctor(System.String)">
            <summary>
            Assumes that the name is prefixes with a prefix framework-reserved ("glo_").
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformStateBase.ShaderUniformStateAttribute.UniformName">
            <summary>
            A specific name of the uniform variable. If null, the name is implicit.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.ShaderUniformStateBase.GetUniformValueDelegate">
            <summary>
            Delegate used for getting the uniform variable value.
            </summary>
            <param name="instance">
            The <see cref="T:System.Object"/> that specify the instance defining <paramref name="memberInfo"/>.
            </param>
            <param name="memberInfo">
            The <see cref="T:System.Reflection.MemberInfo"/> that is used to get the uniform value.
            </param>
            <returns>
            It returns an object that specify the value of the underlying uniform variable.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.GetFieldUniformValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            The <see cref="T:OpenGL.Objects.State.ShaderUniformStateBase.GetUniformValueDelegate"/> implementation for fields.
            </summary>
            <param name="instance">
            The <see cref="T:System.Object"/> that specify the instance defining <paramref name="memberInfo"/>.
            </param>
            <param name="memberInfo">
            The <see cref="T:System.Reflection.MemberInfo"/> that is used to get the uniform value.
            </param>
            <returns>
            It returns an object that specify the value of the underlying uniform variable.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.GetPropertyUniformValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            The <see cref="T:OpenGL.Objects.State.ShaderUniformStateBase.GetUniformValueDelegate"/> implementation for properties.
            </summary>
            <param name="instance">
            The <see cref="T:System.Object"/> that specify the instance defining <paramref name="memberInfo"/>.
            </param>
            <param name="memberInfo">
            The <see cref="T:System.Reflection.MemberInfo"/> that is used to get the uniform value.
            </param>
            <returns>
            It returns an object that specify the value of the underlying uniform variable.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember">
            <summary>
            Context used for compositing all information required for getting the uniform state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember.#ctor(System.String)">
            <summary>
            Basic constructor.
            </summary>
            <param name="uniformName"></param>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember.#ctor(System.String,System.Reflection.MemberInfo,OpenGL.Objects.State.ShaderUniformStateBase.GetUniformValueDelegate)">
            <summary>
            Construct a UniformStateMember.
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specifies the name of the uniform variable.
            </param>
            <param name="memberInfo">
            The <see cref="T:System.Reflection.MemberInfo"/> that specify the uniform state variable.
            </param>
            <param name="getUniformValueDelegate">
            The <see cref="T:OpenGL.Objects.State.ShaderUniformStateBase.GetUniformValueDelegate"/> used for getting the uniform state from <paramref name="memberInfo"/>.
            </param>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember.UniformName">
            <summary>
            The name of the uniform variable.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember._Member">
            <summary>
            The underlying member that specify the uniform state variable.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember.GetValueDelegate">
            <summary>
            The <see cref="T:OpenGL.Objects.State.ShaderUniformStateBase.GetUniformValueDelegate"/> used for getting the uniform state from <see cref="F:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember._Member"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember.GetUniformType">
            <summary>
            Get the <see cref="T:System.Type"/> of the uniform value.
            </summary>
            <returns>
            It returns the <see cref="T:System.Type"/> corresponding to the uniform value.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember.GetUniformValue(System.Object)">
            <summary>
            Get the uniform variable value.
            </summary>
            <param name="instance">
            The <see cref="T:System.Object"/> that specify the instance defining <paramref name="memberInfo"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.DetectUniformProperties(System.Type)">
            <summary>
            Utility routine for detecting fields and properties which value is bound to a shader program uniform
            state.
            </summary>
            <param name="shaderUniformStateType">
            The <see cref="T:System.Type"/> that is defining the fields and properties to be linked with the uniform state.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.Dictionary`2"/> that associate uniform variable names with
            the relative <see cref="T:OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember"/>, which define access to backing properties for getting uniform
            variable values.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformStateBase.UniformState">
            <summary>
            Get the uniform state associated with this instance.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformStateBase._TypeUniformState">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.ApplyState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.String)">
            <summary>
            Apply this state to a shader program.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used to share common state between shaders.
            </param>
            <param name="shaderProgram">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> that specify this uniform state.
            </param>
            <param name="uniformScope">
            A <see cref="T:System.String"/> that specify the scope the uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.ApplyState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.IShaderUniformContainer,System.String,System.Collections.Generic.IEnumerable{OpenGL.Objects.State.ShaderUniformStateBase.UniformStateMember},System.Object)">
            <summary>
            Apply this state to a shader program.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used to share common state between shaders.
            </param>
            <param name="uniformContainer">
            A <see cref="T:OpenGL.Objects.IShaderUniformContainer"/> that specify this uniform state.
            </param>
            <param name="uniformScope">
            A <see cref="T:System.String"/> that specify the scope the uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.ApplyUniform(OpenGL.Objects.GraphicsContext,OpenGL.Objects.IShaderUniformContainer,System.String,System.Object)">
            <summary>
            Set a single uniform, optionally structured.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used to share common state between shaders.
            </param>
            <param name="uniformContainer">
            A <see cref="T:OpenGL.Objects.IShaderUniformContainer"/> that specify this uniform state.
            </param>
            <param name="uniformPattern"></param>
            <param name="uniformValue"></param>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformStateBase.UniformBlockTag">
            <summary>
            The tag the identifies the uniform block.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformStateBase.UniformBuffer">
            <summary>
            The buffer holding the uniform state. If the state is shared among multiple programs, the block layout must be
            "shared", in order to grant the same uniform layout across all programs sharing the state.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformStateBase._UniformBuffer">
            <summary>
            The buffer holding the uniform state. If the state is shared among multiple programs, the block layout must be
            "shared", in order to grant the same uniform layout across all programs sharing the state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformStateBase.IsContextBound">
            <summary>
            Flag indicating whether the state is context-bound.
            </summary>
            <remarks>
            It returns always false.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformStateBase.IsProgramBound">
            <summary>
            Flag indicating whether the state can be applied on a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Create or update resources defined by this IGraphicsState, based on the associated <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <param name="shaderProgram">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> that will be used in conjunction with this IGraphicsState.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.Delete">
            <summary>
            Dispose resources allocated by <see cref="M:OpenGL.Objects.State.ShaderUniformStateBase.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply this depth test render state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="!:StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformStateBase.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.State.ShaderUniformState">
            <summary>
            Class describing a partial uniform state of a <see cref="T:OpenGL.Objects.ShaderProgram"/>
            </summary>
            <remarks>
            This class is able to setup <see cref="T:OpenGL.Objects.ShaderProgram"/> uniform state by detecting fields and properties of derived
            classes having the <see cref="!:ShaderUniformStateAttribute"/> attribute.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformState.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="stateId">
            A <see cref="T:System.String"/> that specifies the state identifier.
            </param>
        </member>
        <member name="T:OpenGL.Objects.State.ShaderUniformState.UniformStateVariable">
            <summary>
            Context used for compositing all information required for getting the uniform state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformState.UniformStateVariable.#ctor(System.String,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specifies the name of the uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformState.UniformStateVariable.GetUniformType">
            <summary>
            Get the <see cref="T:System.Type"/> of the uniform value.
            </summary>
            <returns>
            It returns the <see cref="T:System.Type"/> corresponding to the uniform value.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformState.UniformStateVariable.GetUniformValue(System.Object)">
            <summary>
            Get the uniform variable value.
            </summary>
            <param name="instance">
            The <see cref="T:System.Object"/> that specify the instance defining <paramref name="memberInfo"/>.
            </param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformState.UniformStateVariable.UniformValue">
            <summary>
            Get or set the uniform value.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShaderUniformState.SetUniformState(System.String,System.Object)">
            <summary>
            Set uniform variable state.
            </summary>
            <param name="uniformName">
            
            </param>
            <param name="value">
            
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformState.StateIdentifier">
            <summary>
            Get the identifier of this ShaderUniformState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformState._StateId">
            <summary>
            The identifier of this ShaderUniformState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShaderUniformState.UniformState">
            <summary>
            Get the uniform state associated with this instance.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShaderUniformState._UniformProperties">
            <summary>
            The uniform state of this TransformState.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.ShadowsState">
            <summary>
            OpenGL.Net shadow shading model.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShadowsState.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShadowsState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShadowsState.AddShadowMap(OpenGL.Objects.Texture2D,OpenGL.Matrix4x4f)">
            <summary>
            Add a shadow map to ths state.
            </summary>
            <param name="shadowMap">
            The <see cref="T:OpenGL.Objects.Texture2D"/> that specifies the shadow map texture.
            </param>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specifies the model-view-projection-bias matrix to transform vertex
            from object-space to light-space.
            </param>
        </member>
        <member name="T:OpenGL.Objects.State.ShadowsState.ShadowMap2DContext">
            <summary>
            Shadow map based on 2D texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShadowsState.ShadowMap2DContext.#ctor(OpenGL.Objects.Texture2D,OpenGL.Matrix4x4f)">
            <summary>
            Construct a ShadowMap2DContext.
            </summary>
            <param name="shadowMap">
            The <see cref="T:OpenGL.Objects.Texture2D"/> that specifies the shadow map texture.
            </param>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specifies the model-view-projection-bias matrix to transform vertex
            from object-space to light-space.
            </param>
        </member>
        <member name="F:OpenGL.Objects.State.ShadowsState.ShadowMap2DContext.ShadowMap">
            <summary>
            The shadow map backend (2D texture).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShadowsState.ShadowMap2DContext.ModelViewProjectionBias">
            <summary>
            The model-view-projection-bias matrix to transform vertex from object-space to light-space.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShadowsState._ShadowMap2D">
            <summary>
            List of shadow maps, based on 2D texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.ShadowMap2D">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.ShadowMap2DMvp">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.ShadowMap2DCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShadowsState.StateId">
            <summary>
            The identifier for the TransformState derived classes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ShadowsState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.IsContextBound">
            <summary>
            Flag indicating whether the state is context-bound.
            </summary>
            <remarks>
            It returns always true, since it supports also fixed pipeline.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.IsProgramBound">
            <summary>
            Flag indicating whether the state can be applied on a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShadowsState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply this TransformState.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ShadowsState.Push">
            <summary>
            Performs a deep copy of this <see cref="T:OpenGL.Objects.State.IGraphicsState"/>.
            </summary>
            <returns>
            It returns the equivalent of this <see cref="T:OpenGL.Objects.State.IGraphicsState"/>, but all objects referenced
            are not referred by both instances.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.State.ShadowsState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.ShadowsState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.ShadowsState.UniformState">
            <summary>
            Get the uniform state associated with this instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ShadowsState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.State.ShadowsState._UniformProperties">
            <summary>
            The uniform state of this TransformState.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.State.TransformState">
            <summary>
            State tracking the transformation state.
            </summary>
            <remarks>
            <para>
            The transform state exposes a set of matrices that are dedicated of the transformation of three-dimensional
            points and vectors in order to project them onto the screen:
            - Projection
            - Model-view
            - Normal
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.State.TransformState.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.DefaultState">
            <summary>
            The system default state for PixelAlignmentState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.Projection">
            <summary>
            The actual model-view matrix used for transforming vertex arrays space.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.ModelView">
            <summary>
            The actual model-view matrix used for transforming vertex arrays space.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.ModelViewProjection">
            <summary>
            The actual model-view-projection matrix used for drawing vertex arrays.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.TransformState._ModelViewProjection">
            <summary>
            Backend value for ModelViewProjection.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.NormalMatrix">
            <summary>
            The normal matrix, derived from <see cref="P:OpenGL.Objects.State.TransformState.ModelView"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.TransformState.StateId">
            <summary>
            The identifier for the TransformState derived classes.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.TransformState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.IsContextBound">
            <summary>
            Flag indicating whether the state is context-bound.
            </summary>
            <remarks>
            It returns always true, since it supports also fixed pipeline.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.IsProgramBound">
            <summary>
            Flag indicating whether the state can be applied on a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.TransformState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Apply this TransformState.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="shaderProgram"/>.
            </param>
            <param name="shaderProgram">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.TransformState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.TransformState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.TransformState.UniformState">
            <summary>
            Get the uniform state associated with this instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.TransformState.ToString">
            <summary>
            Represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/> for logging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:OpenGL.Objects.State.GraphicsState"/>.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.State.TransformState._UniformProperties">
            <summary>
            The uniform state of this TransformState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ViewportState.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct the ViewportState representing the current state.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that specifies
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ViewportState.#ctor(OpenGL.Objects.GraphicsContext)">
            <summary>
            Construct the ViewportState representing the current state.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that specifies
            </param>
        </member>
        <member name="P:OpenGL.Objects.State.ViewportState.Position">
            <summary>
            Get the position of the viewport.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ViewportState.Size">
            <summary>
            Get the size of the viewport.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ViewportState._Viewport">
            <summary>
            Viewport coordinates.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ViewportState.StateId">
            <summary>
            The identifier for the blend state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ViewportState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ViewportState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.ViewportState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.ViewportState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.ViewportState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Set ShaderProgram state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="program"/>.
            </param>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ViewportState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.ViewportState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.ViewportState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.State.WriteMaskState">
            <summary>
            Specify how fragments are rasterized on the current framebuffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.WriteMaskState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.WriteMaskState.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Construct a WriteMaskState for masking color and depth buffers.
            </summary>
            <param name="colorMask"></param>
            <param name="depthMask"></param>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState.ColorMaskR">
            <summary>
            Color mask, for R color component.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState.ColorMaskG">
            <summary>
            Color mask, for G color component.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState.ColorMaskB">
            <summary>
            Color mask, for B color component.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState.ColorMaskA">
            <summary>
            Color mask, for A color component.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.WriteMaskState.ColorMask">
            <summary>
            Color mask, all color components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState.DepthMask">
            <summary>
            Flag indicating whether masking writes to depth component of the framebuffer.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState.StencilMaskFront">
            <summary>
            Stencil mask, for front faces.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState.StencilMaskBack">
            <summary>
            Stencil mask, for back faces.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.WriteMaskState.StencilMask">
            <summary>
            Stencil mask, for all face directions.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.WriteMaskState.DefaultState">
            <summary>
            The system default state for WriteMaskState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.WriteMaskState.NonColorMaskState">
            <summary>
            WriteMaskState masking color writing.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState.StateId">
            <summary>
            The identifier for the blend state.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.WriteMaskState.StateIdentifier">
            <summary>
            The identifier of this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.WriteMaskState.StateSetIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.State.WriteMaskState.StateIndex">
            <summary>
            Unique index assigned to this GraphicsState.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.State.WriteMaskState._StateIndex">
            <summary>
            The index for this GraphicsState.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.State.WriteMaskState.Apply(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Set ShaderProgram state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> which has defined the shader program <paramref name="program"/>.
            </param>
            <param name="program">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> which has the state set.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.WriteMaskState.Merge(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Merge this state with another one.
            </summary>
            <param name="state">
            A <see cref="T:OpenGL.Objects.State.IGraphicsState"/> having the same <see cref="P:OpenGL.Objects.State.WriteMaskState.StateIdentifier"/> of this state.
            </param>
        </member>
        <member name="M:OpenGL.Objects.State.WriteMaskState.Equals(OpenGL.Objects.State.IGraphicsState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Objects.State.GraphicsState"/> to compare to this GraphicsState.
            </param>
            <returns>
            It returns true if the current object is equal to <paramref name="other"/>.
            </returns>
            <remarks>
            <para>
            This method test only whether <paramref name="other"/> type equals to this type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            This exception is thrown if the parameter <paramref name="other"/> is null.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Tessellator">
            <summary>
            Class for tessellating polygons using GLU.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Tessellator.#ctor">
            <summary>
            Construct a Tessellator.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Tessellator._Tess">
            <summary>
            Tessellator handle.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Tessellator._DelegatePins">
            <summary>
            Delegates pinned.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Tessellator.BeginPolygon">
            <summary>
            Begin a polygon.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Tessellator.EndPolygon">
            <summary>
            End a polygon started with <see cref="E:OpenGL.Objects.Tessellator.Begin"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Tessellator.AddContour(OpenGL.Vertex2f[],OpenGL.Vertex3f)">
            <summary>
            Add a contour to the current polygon.
            </summary>
            <param name="contourVertices">
            
            </param>
        </member>
        <member name="M:OpenGL.Objects.Tessellator.AddContour(OpenGL.Vertex3f[],OpenGL.Vertex3f)">
            <summary>
            Add a contour to the current polygon.
            </summary>
            <param name="contourVertices">
            
            </param>
        </member>
        <member name="M:OpenGL.Objects.Tessellator.AddContour(OpenGL.Vertex3d[],OpenGL.Vertex3d)">
            <summary>
            Add a contour to the current polygon.
            </summary>
            <param name="contourVertices">
            
            </param>
        </member>
        <member name="F:OpenGL.Objects.Tessellator._CountourLocks">
            <summary>
            Collection of <see cref="T:OpenGL.MemoryLock"/> instances used for fixing countour
            vertices to be tessellated. Release when tessellation process has ended.
            </summary>
        </member>
        <member name="E:OpenGL.Objects.Tessellator.Begin">
            <summary>
            Event raised when the tessellator begin to generate a primitive.
            </summary>
        </member>
        <member name="E:OpenGL.Objects.Tessellator.End">
            <summary>
            Event raised when the tessellator ends a primitive.
            </summary>
        </member>
        <member name="E:OpenGL.Objects.Tessellator.Vertex">
            <summary>
            Event raised when the tessellator ends a primitive.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Texture">
            <summary>
            Texture.
            </summary>
            <remarks>
            <para>
            Textures are object holding a set of data, that can be accessed within a shader using a set of coordinates. Textures classes
            derives from <see cref="T:OpenGL.Objects.Texture"/>, which define a base implementation without specifying the texture dimensionality.
            </para>
            <para>
            Texture can be one dimensional (<see cref="T:OpenGL.Objects.Texture1D"/>), two dimensional (<see cref="T:OpenGL.Objects.Texture2D"/>), three dimensional
            (<see cref="T:OpenGL.Objects.Texture3D"/>), cube mapped (<see cref="T:OpenGL.Objects.TextureCube"/>).
            </para>
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.Texture.PixelLayout">
            <summary>
            Texture pixel format (internal format).
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.BaseSize">
            <summary>
            Texture size, in pixels, of the level 0 of the texture. In the case the level 0 is not defined,
            find the closest mipmap and guess the level 0 size from it supposing a mipmap-complete case.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.Size">
            <summary>
            Texture size, in pixels, of the base level of the texture.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the mipmap level specified by <see cref="P:OpenGL.Objects.Texture.BaseLevel"/> is not defined.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.Texture.Width">
            <summary>
            Texture width, in pixels, of the base level of the texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.Height">
            <summary>
            Texture height, in pixels, of the base level of the texture.
            </summary>
            <remarks>
            In case the Texture implementation does not have two or more dimension, it shall return 1.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.Texture.Depth">
            <summary>
            Texture depth, in pixels, of the base level of the texture.
            </summary>
            <remarks>
            In case the Texture implementation does not have three or more dimension, it shall return 1.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Texture.CheckCapabilities(System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Check whether the texture extents are compatible with context capabilities.
            </summary>
            <param name="caps">
            A <see cref="!:GraphicsCapabilities"/> determining the underlying texture capabilities.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="depth">
            A <see cref="T:System.UInt32"/> that specify the texture depth.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> that specify the texture internal format.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="caps"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/>, <paramref name="height"/> or <paramref name="depth"/> is greater than
            the maximum allowed for the specific texture target.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="caps"/>, and <paramref name="width"/>, <paramref name="height"/>
            or <paramref name="depth"/> is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture.IsPowerOfTwo(System.UInt32)">
            <summary>
            Determine whether an integer is a power-of-two value.
            </summary>
            <param name="x">
            A <see cref="T:System.UInt32"/> that specify the value to test.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="x"/> is a power-of-two value.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Texture.Get(OpenGL.Objects.GraphicsContext,OpenGL.PixelLayout,OpenGL.TextureTarget,System.UInt32)">
            <summary>
            Download Texture data to an Image instance.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for downloading texture data.
            </param>
            <param name="pixelType">
            A <see cref="T:OpenGL.PixelLayout"/> determining the pixel format of the downloaded data.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture.TextureTarget"/> that specify the texture target.
            </param>
            <param name="level">
            A <see cref="T:System.UInt32"/> that specify the texture level.
            </param>
            <returns>
            It return the <see cref="T:OpenGL.Objects.Image"/> holding the content of this texture.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Texture.MipmapBaseLevel">
            <summary>
            Get the level indicating the base mipmap level defined.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.MipmapMaxLevel">
            <summary>
            Get the level indicating the maximum mipmap level defined.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.HasMipMapLevel(System.UInt32)">
            <summary>
            Determine whether a specific mipmap level is defined.
            </summary>
            <param name="level">
            A <see cref="T:System.UInt32"/> that specify the mipmap level to test.
            </param>
            <returns>
            It returns a boolean value indicating whether the mipmap level <paramref name="level"/> is defined.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Texture.IsMipmapComplete">
            <summary>
            Get whether this Texture is mipmap-complete.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Texture.Mipmap">
            <summary>
            Mipmap properties.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.Mipmap.InternalFormat">
            <summary>
            Internal format of the mipmap.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.Mipmap.Size">
            <summary>
            Size of the mipmap (width, height and depth components).
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.MipmapLevels">
            <summary>
            Texture mipmaps level count (including the base level).
            </summary>
            <remarks>
            <para>
            If this texture is not defined, this property shall return 0.
            </para>
            <para>
            If texture target doesn't support mipmapping, this property shall return 1, if it is defined.
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Texture.GetMipmapCompleteLevels(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Get the texture mipmaps level count, given ipotethic texture size.
            </summary>
            <param name="w">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="h">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> that specify the texture depth.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Texture.SetMipmap(OpenGL.PixelLayout,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Define texture mipmap level properties.
            </summary>
            <param name="pixelFormat">
            The <see cref="P:OpenGL.Objects.Texture.PixelLayout"/> that specify the texture mipmap internal format.
            </param>
            <param name="w">
            A <see cref="T:System.UInt32"/> that specify the width of the texture mipmap.
            </param>
            <param name="h">
            A <see cref="T:System.UInt32"/> that specify the height of the texture mipmap.
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> that specify the depth of the texture mipmap.
            </param>
            <param name="lod">
            A <see cref="T:System.UInt32"/> that specify the level texture mipmap.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture.GetMipmapSize(System.UInt32)">
            <summary>
            Compute a texture mipmap size.
            </summary>
            <param name="lod">
            A <see cref="T:System.UInt32"/> that specify the mipmap level.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Vertex3ui"/> that contains the mipmap width, height and depth.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.Texture._Mipmaps">
            <summary>
            Mipmaps properties.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.AutomaticMipmaps">
            <summary>
            Generate mipmaps for this Texture.
            </summary>
            <remarks>
            The mipmaps are generated when executing <see cref="!:Create(GraphicsContext)"/>.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Texture.GenerateMipmaps(OpenGL.Objects.GraphicsContext,OpenGL.TextureTarget)">
            <summary>
            Generate mipmaps for this Texture, replacing mipmaps level from 1 to <see cref="P:OpenGL.Objects.Texture.MipmapLevels"/> - 1.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for mipmapping definition.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture.TextureTarget"/> indicating the target for generating
            bitmaps.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture.IsGenerateMipmapSupported(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether Texture mipmaps generation is supported. Otherwise NOT emulated.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> creating this Texture.
            </param>
            <returns>
            It returns whether Texture mipmaps generation is supported by <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Texture.BaseLevel">
            <summary>
            Get or set the level indicating the base mipmap level used for drawing (the largest one).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture._BaseLevel">
            <summary>
            The index of the lowest (base) define mipmap level.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture._MipmapMinLevelDirty">
            <summary>
            Flag for indicating whether <see cref="F:OpenGL.Objects.Texture._BaseLevel"/> has changed.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.MaxLevel">
            <summary>
            Get or set the level indicating the maximum mipmap level used for drawing (the smallest one).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture._MaxLevel">
            <summary>
            The index of the highest (base) define mipmap level.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture._MipmapMaxLevelDirty">
            <summary>
            Flag for indicating whether <see cref="F:OpenGL.Objects.Texture._MaxLevel"/> has changed.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.SyncMipmapLevelRange(OpenGL.Objects.GraphicsContext)">
            <summary>
            Guess the best values for <paramref name="BaseLevel"/> and <paramref name="MaxLevel"/>.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that has created this texture.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture.SetMipmapLevelRange(OpenGL.Objects.GraphicsContext)">
            <summary>
            Set texture mipmapping levels (base and maximum).
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that has created this texture.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture.SamplerParams">
            <summary>
            Texture unit parameters applied to the bound texture unit. Ignored if <see cref="P:OpenGL.Objects.Texture.Sampler"/> is not null.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.Sampler">
            <summary>
            The texture sampler applied to the bound texture unit. It can be null; in this case the texture unit
            will apply <see cref="F:OpenGL.Objects.Texture.SamplerParams"/>.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture._Sampler">
            <summary>
            Texture sampler parameters.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Texture.SwizzleValue">
            <summary>
            Texture swizzled components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.SwizzleValue.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.SwizzleValue.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.SwizzleValue.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.SwizzleValue.Green">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.SwizzleValue.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.SwizzleValue.Alpha">
            <summary>
            Alpha.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.Swizzle(OpenGL.Objects.Texture.SwizzleValue,OpenGL.Objects.Texture.SwizzleValue,OpenGL.Objects.Texture.SwizzleValue,OpenGL.Objects.Texture.SwizzleValue)">
            <summary>
            Set texture swizzle.
            </summary>
            <param name="r">
            A <see cref="T:OpenGL.Objects.Texture.SwizzleValue"/> that specifies the source of the swizzled red component.
            </param>
            <param name="g">
            A <see cref="T:OpenGL.Objects.Texture.SwizzleValue"/> that specifies the source of the swizzled green component.
            </param>
            <param name="b">
            A <see cref="T:OpenGL.Objects.Texture.SwizzleValue"/> that specifies the source of the swizzled blue component.
            </param>
            <param name="a">
            A <see cref="T:OpenGL.Objects.Texture.SwizzleValue"/> that specifies the source of the swizzled alpha component.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Texture.SwizzleRed">
            <summary>
            Get or set the swizzle map for red component.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.SwizzleGreen">
            <summary>
            Get or set the swizzle map for green component.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.SwizzleBlue">
            <summary>
            Get or set the swizzle map for blue component.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.SwizzleAlpha">
            <summary>
            Get or set the swizzle map for alpha component.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture._Swizzle">
            <summary>
            Texture textel swizzle setup.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture._SwizzleDirty">
            <summary>
            Flag indicating whether the swizzle has changed.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.ApplySwizzle(OpenGL.Objects.GraphicsContext)">
            <summary>
            Apply texture swizzle, if required and supported.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> that has created this texture.
            </param>
        </member>
        <member name="P:OpenGL.Objects.Texture.IsDirty">
            <summary>
            Get whether the Texture has data to be updated.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Texture.Technique">
            <summary>
            Technique for creating Texture layer(s).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.Technique.#ctor(OpenGL.Objects.Texture)">
            <summary>
            Construct a Technique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture"/> affected by this Technique.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Texture.Technique._Texture">
            <summary>
            The <see cref="T:OpenGL.Objects.Texture"/> affected by this Technique.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.Technique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture.Technique.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.SetTechnique(OpenGL.Objects.Texture.Technique)">
            <summary>
            Set the technique used for creating and updating this Texture.
            </summary>
            <param name="technique">
            The <see cref="T:OpenGL.Objects.Texture.Technique"/> that specify the method creating/updating this Texture.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="technique"/> is null.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.Texture._Techniques">
            <summary>
            Technique used for creating this texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.Immutable">
            <summary>
            Get or set whether this Texture is immutable (GL_ARB_texture_storage support).
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture._Immutable">
            <summary>
            Flag indicating whether this Texture is immutable (GL_ARB_texture_storage).
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.ImmutableFix">
            <summary>
            Determine whether immutable texture has been defined.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.IsImmutableSupported(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether immutable Texture is supported. Otherwise emulated.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> creating this Texture.
            </param>
            <returns>
            It returns whether immutable storage is supported by <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Texture.TextureTarget">
            <summary>
            Determine the derived Texture target.
            </summary>
            <remarks>
            In the case a this Texture is defined by multiple targets (i.e. cube map textures), this property
            shall returns always 0.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.Texture.DefaultTextureUnit">
            <summary>
            Get the index of the default texture unit associated with this Texture. It is <see cref="F:System.UInt32.MaxValue"/>
            to indicate that no texture unit is associated with this Texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.GetTextureUnit(OpenGL.Objects.GraphicsContext)">
            <summary>
            Get the index of the texture unit associated with this Texture. IN the case the Texture has no texture unit associated,
            bound this Texture onto the most appropriate texture unit.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.Texture.GetBindingTarget(OpenGL.Objects.GraphicsContext)">
            <summary>
            Get the identifier of the binding point.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture._ActiveTextureUnits">
            <summary>
            Index of the active texture units on which this texture is bound.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.SamplerType">
            <summary>
            Uniform sampler type for managing this Texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture.ThisObjectClass">
            <summary>
            Texture object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture.ObjectClass">
            <summary>
            Texture object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this Texture really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this Texture exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this Texture (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a Texture name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns a valid object name for this Texture.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.Texture.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a Texture name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this GraphicsResource resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Texture1D">
            <summary>
            One dimensional texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.#ctor">
            <summary>
            Construct an undefined Texture1D.
            </summary>
            <remarks>
            <para>
            It creates Texture object which has not defined extents, internal format and textels. To define this texture, call one
            of Create" methods (except <see cref="!:Create(GraphicsContext)"/>).
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.#ctor(System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create Texture1D data, defining only the extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> is greater than the maximum allowed for 1D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by the current context and <paramref name="width"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.#ctor(OpenGL.Objects.GraphicsContext,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create Texture1D data, defining only the extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture. If it null, the current context
            will be used.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> is greater than the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/> and <paramref name="width"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Texture1D.EmptyTechnique">
            <summary>
            Technique defining an empty texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.EmptyTechnique.#ctor(OpenGL.Objects.Texture1D,System.UInt32,OpenGL.PixelLayout,System.UInt32)">
            <summary>
            Construct a EmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture1D"/> affected by this Technique.
            </param>
            <param name="level">
            The specific level of the target to define. Defaults to zero.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="width">
            The width of the texture.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture1D.EmptyTechnique._Texture1d">
            <summary>
            The <see cref="T:OpenGL.Objects.Texture1D"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture1D.EmptyTechnique._Level">
            <summary>
            The specific level of the target to define. Defaults to zero.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture1D.EmptyTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture1D.EmptyTechnique._Width">
            <summary>
            Texture width.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.EmptyTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.Create(System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create a Texture1D, defining the texture extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> is greater than the maximum allowed for 1D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.Create(OpenGL.Objects.GraphicsContext,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create Texture1D data, defining only the extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> is greater than the maximum allowed for 1D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/>, and <paramref name="width"/> is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Texture1D.ImageTechnique">
            <summary>
            Technique defining a texture based on image.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.ImageTechnique.#ctor(OpenGL.Objects.Texture1D,OpenGL.PixelLayout,OpenGL.Objects.Image)">
            <summary>
            Construct a ImageTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture1D"/> affected by this Technique.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="image">
            The <see cref="T:OpenGL.Objects.Image"/> that holds the texture data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.ImageTechnique.#ctor(OpenGL.Objects.Texture1D,System.UInt32,OpenGL.PixelLayout,OpenGL.Objects.Image)">
            <summary>
            Construct a ImageTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture1D"/> affected by this Technique.
            </param>
            <param name="level">
            The specific level of the target to define. Defaults to zero.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="image">
            The <see cref="T:OpenGL.Objects.Image"/> that holds the texture data.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture1D.ImageTechnique._Texture1d">
            <summary>
            The <see cref="T:OpenGL.Objects.Texture1D"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture1D.ImageTechnique._Level">
            <summary>
            The specific level of the target to define. Defaults to zero.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture1D.ImageTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture1D.ImageTechnique._Image">
            <summary>
            The image that represents the texture data.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.ImageTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.ImageTechnique.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.Create(OpenGL.Objects.Image)">
            <summary>
            Create Texture1D data from a Image instance.
            </summary>
            <param name="image">
            An <see cref="T:OpenGL.Objects.Image"/> holding the texture data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="image"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> pixel data is not allocated (i.e. image not defined).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> width or height are greater than the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="image"/> width or height are
            not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> format (<see cref="!:Image.PixelFormat"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Image)">
            <summary>
            Create Texture1D from a Image instance.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture. If it null, the current context
            will be used.
            </param>
            <param name="image">
            An <see cref="T:OpenGL.Objects.Image"/> holding the texture data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="image"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> pixel data is not allocated (i.e. image not defined).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> width or height are greater than the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/> (or the current context if <paramref name="ctx"/> is
            null), and <paramref name="image"/> width or height are not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> format (<see cref="!:Image.PixelFormat"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture1D.CreateFromResource(System.String,System.String)">
            <summary>
            Create Texture1D data from an embedded resource.
            </summary>
            <param name="resourcePath">
            An <see cref="T:System.String"/> that specify the embedded resource path.
            </param>
            <param name="format">
            An <see cref="T:System.String"/> that specify the embedded resource image format.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="resourcePath"/> or <paramref name="format"/> is null.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.Texture1D.BaseSize">
            <summary>
            Texture size, in pixels, of the level 0 of the texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture1D.TextureTarget">
            <summary>
            Determine the derived Texture target.
            </summary>
            <remarks>
            In the case a this Texture is defined by multiple targets (i.e. cube map textures), this property
            shall returns always 0.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.Texture1D.SamplerType">
            <summary>
            Uniform sampler type for managing this Texture.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Texture2D">
            <summary>
            Two dimensional texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.#ctor">
            <summary>
            Construct an undefined Texture2D.
            </summary>
            <remarks>
            <para>
            It creates Texture object which has not defined extents, internal format and textels. To define this texture, call one
            of Create" methods (except <see cref="!:Create(GraphicsContext)"/>).
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.#ctor(System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create Texture2D data, defining only the extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by the current context and <paramref name="width"/>
            or <paramref name="height"/> is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.#ctor(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create Texture2D data, defining only the extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture. If it null, the current context
            will be used.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/> (or by the current context is <paramref name="ctx"/> is
            null), and <paramref name="width"/> or <paramref name="height"/> is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Texture2D.EmptyTechnique">
            <summary>
            Technique defining an empty mutable texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.EmptyTechnique.#ctor(OpenGL.Objects.Texture2D,OpenGL.TextureTarget,System.UInt32,OpenGL.PixelLayout,System.UInt32,System.UInt32)">
            <summary>
            Construct a EmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture2D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="level">
            The specific level of the target to be defined.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="width">
            The width of the texture.
            </param>
            <param name="height">
            The height of the texture.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.EmptyTechnique._Texture2d">
            <summary>
            The <see cref="T:OpenGL.Objects.Texture2D"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.EmptyTechnique._Target">
            <summary>
            The texture target to use for creating the empty texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.EmptyTechnique._Level">
            <summary>
            The specific level of the target to define. Defaults to zero.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.EmptyTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.EmptyTechnique._Width">
            <summary>
            Texture width.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.EmptyTechnique._Height">
            <summary>
            Texture height.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.EmptyTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.Texture2D.ImmutableEmptyTechnique">
            <summary>
            Technique defining an immutable empty texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.ImmutableEmptyTechnique.#ctor(OpenGL.Objects.Texture2D,OpenGL.TextureTarget,OpenGL.PixelLayout,System.UInt32,System.UInt32)">
            <summary>
            Construct a ImmutableEmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture2D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="width">
            The width of the texture.
            </param>
            <param name="height">
            The height of the texture.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.ImmutableEmptyTechnique.#ctor(OpenGL.Objects.Texture2D,OpenGL.TextureTarget,OpenGL.PixelLayout,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Construct a ImmutableEmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture2D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="width">
            The width of the texture.
            </param>
            <param name="height">
            The height of the texture.
            </param>
            <param name="levels">
            A <see cref="T:System.UInt32"/> that specify the number of levels defining the texture.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.ImmutableEmptyTechnique._MipmapLevels">
            <summary>
            Texture mipmaps levels.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.ImmutableEmptyTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create a Texture2D, defining the texture extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create Texture2D data, defining only the extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/>, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create a Texture2D, defining the texture extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <param name="level">
            A <see cref="T:System.UInt32"/> that specify the texture level to create/update.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create Texture2D data, defining only the extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="level">
            A <see cref="T:System.UInt32"/> that specify the texture level to create/update.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/>, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(System.UInt32,System.UInt32,OpenGL.PixelLayout,System.UInt32)">
            <summary>
            Create a Texture2D, defining the texture extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,OpenGL.PixelLayout,System.UInt32)">
            <summary>
            Create Texture2D data, defining only the extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/>, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Texture2D.ImageTechnique">
            <summary>
            Technique defining a texture based on image.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.ImageTechnique.#ctor(OpenGL.Objects.Texture2D,OpenGL.TextureTarget,OpenGL.PixelLayout,OpenGL.Objects.Image)">
            <summary>
            Construct a EmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture2D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="level">
            The specific level of the target to define. Defaults to zero.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="image">
            The <see cref="T:OpenGL.Objects.Image"/> holding the texture data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.ImageTechnique.#ctor(OpenGL.Objects.Texture2D,OpenGL.TextureTarget,System.UInt32,OpenGL.PixelLayout,OpenGL.Objects.Image)">
            <summary>
            Construct a EmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture2D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="level">
            The specific level of the target to define. Defaults to zero.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="image">
            The <see cref="T:OpenGL.Objects.Image"/> holding the texture data.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.ImageTechnique._Texture2d">
            <summary>
            The <see cref="T:OpenGL.Objects.Texture2D"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.ImageTechnique._Target">
            <summary>
            The texture target to use for creating the empty texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.ImageTechnique._Level">
            <summary>
            The specific level of the target to define. Defaults to zero.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.ImageTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D.ImageTechnique._Image">
            <summary>
            The image that represents the texture data.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.ImageTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.ImageTechnique.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(OpenGL.Objects.Image)">
            <summary>
            Create Texture2D data from a Image instance.
            </summary>
            <param name="image">
            An <see cref="T:OpenGL.Objects.Image"/> holding the texture data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="image"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> pixel data is not allocated (i.e. image not defined).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> width or height are greater than the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="image"/> width or height are
            not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> format (<see cref="!:Image.PixelFormat"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Image)">
            <summary>
            Create Texture2D from a Image instance.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture. If it null, the current context
            will be used.
            </param>
            <param name="image">
            An <see cref="T:OpenGL.Objects.Image"/> holding the texture data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="image"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> pixel data is not allocated (i.e. image not defined).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> width or height are greater than the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/> (or the current context if <paramref name="ctx"/> is
            null), and <paramref name="image"/> width or height are not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> format (<see cref="!:Image.PixelFormat"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Create(OpenGL.Objects.Image,System.UInt32)">
            <summary>
            Create Texture2D data from a Image instance.
            </summary>
            <param name="image">
            An <see cref="T:OpenGL.Objects.Image"/> holding the texture data.
            </param>
            <param name="level">
            A <see cref="T:System.UInt32"/> that specify the texture level to create/update.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="image"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> pixel data is not allocated (i.e. image not defined).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> width or height are greater than the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="image"/> width or height are
            not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> format (<see cref="!:Image.PixelFormat"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.LoadAsync(System.String)">
            <summary>
            Load asynchronously from a file.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specify the path of the image to load.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.CancelLoadAsync">
            <summary>
            Cancel a <see cref="M:OpenGL.Objects.Texture2D.LoadAsync(System.String)"/> execution.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D._LoadTask">
            <summary>
            Current load task.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture2D._LoadTaskCancel">
            <summary>
            Cancellation token used for cancelling <see cref="F:OpenGL.Objects.Texture2D._LoadTask"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture2D.Get(OpenGL.Objects.GraphicsContext,OpenGL.PixelLayout,System.UInt32)">
            <summary>
            Download Texture2D data to an Image instance.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for downloading texture data.
            </param>
            <param name="pixelFormat">
            A <see cref="T:OpenGL.PixelLayout"/> determining the pixel format of the downloaded data.
            </param>
            <param name="level">
            A <see cref="T:System.UInt32"/> that specify the texture level.
            </param>
            <returns>
            It return the <see cref="T:OpenGL.Objects.Image"/> holding the content of this texture.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.Texture2D.BaseSize">
            <summary>
            Texture size, in pixels, of the level 0 of the texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.Texture2D.TextureTarget">
            <summary>
            Determine the derived Texture target.
            </summary>
            <remarks>
            In the case a this Texture is defined by multiple targets (i.e. cube map textures), this property
            shall returns always 0.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.Texture2D.SamplerType">
            <summary>
            Uniform sampler type for managing this texture.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.Texture3D">
            <summary>
            Three dimensional texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.#ctor">
            <summary>
            Construct an undefined Texture3D.
            </summary>
            <remarks>
            <para>
            It creates Texture object which has not defined extents, internal format and textels. To define this texture, call one
            of Create" methods (except <see cref="M:OpenGL.Objects.Texture3D.Create(OpenGL.Objects.GraphicsContext)"/>).
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.#ctor(System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Construct a Texture3D, defining the texture extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="depth">
            A <see cref="T:System.UInt32"/> that specify the texture depth.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.#ctor(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Construct a Texture3D, defining the texture extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="depth">
            A <see cref="T:System.UInt32"/> that specify the texture depth.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Texture3D.EmptyTechnique">
            <summary>
            Technique defining an empty texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.EmptyTechnique.#ctor(OpenGL.Objects.Texture3D,OpenGL.TextureTarget,System.UInt32,OpenGL.PixelLayout,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Construct a EmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture3D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture3D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="width">
            The width of the texture.
            </param>
            <param name="height">
            The height of the texture.
            </param>
            <param name="depth">
            The depth of the texture.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.EmptyTechnique._Texture3d">
            <summary>
            The <see cref="T:OpenGL.Objects.Texture3D"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.EmptyTechnique._Target">
            <summary>
            The texture target to use for creating the empty texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.EmptyTechnique._Level">
            <summary>
            The specific level of the target to define. Defaults to zero.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.EmptyTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.EmptyTechnique._Width">
            <summary>
            Texture width.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.EmptyTechnique._Height">
            <summary>
            Texture height.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.EmptyTechnique._Depth">
            <summary>
            Texture depth.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.EmptyTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.Create(System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create a Texture3D, defining the texture extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="depth">
            A <see cref="T:System.UInt32"/> that specify the texture depth.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.Create(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create a Texture3D, defining the texture extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="depth">
            A <see cref="T:System.UInt32"/> that specify the texture depth.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.Texture3D.ImageTechnique">
            <summary>
            Technique defining a texture based on images.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.ImageTechnique.#ctor(OpenGL.Objects.Texture3D,OpenGL.TextureTarget,OpenGL.PixelLayout,OpenGL.Objects.Image[])">
            <summary>
            Construct a EmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.Texture3D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.Texture3D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="images">
            The image set of the texture.
            </param>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.ImageTechnique._Texture3d">
            <summary>
            The <see cref="T:OpenGL.Objects.Texture3D"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.ImageTechnique._Target">
            <summary>
            The texture target to use for creating the empty texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.ImageTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.Texture3D.ImageTechnique._Images">
            <summary>
            The images that represents the texture data.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.ImageTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.ImageTechnique.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.Create(OpenGL.Objects.Image[],OpenGL.PixelLayout)">
            <summary>
            Create a Texture3D, defining the texture extents and the internal format.
            </summary>
            <param name="images">
            An array of <see cref="T:OpenGL.Objects.Image"/> that specify the texture data.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="images"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="images"/> has no items, or every item hasn't the same width and height.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if width, height or depth is greater than the maximum allowed for 3D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and width, height or depth 
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.Create(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Image[],OpenGL.PixelLayout)">
            <summary>
            Create a Texture3D, defining the texture extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="images">
            An array of <see cref="T:OpenGL.Objects.Image"/> that specify the texture data.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="images"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="images"/> has no items, or every item hasn't the same width and height.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if width, height or depth is greater than the maximum allowed for 3D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and width, height or depth 
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.Texture3D.TextureTarget">
            <summary>
            Determine the derived Texture target.
            </summary>
            <remarks>
            In the case a this Texture is defined by multiple targets (i.e. cube map textures), this property
            shall returns always 0.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.Texture3D.SamplerType">
            <summary>
            Uniform sampler type for managing this texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.Texture3D.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create this GraphicsResource, checking if the requires OpenGL extensions are.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object.
            </param>
        </member>
        <member name="T:OpenGL.Objects.TextureArray2D">
            <summary>
            Two dimensional array texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.#ctor">
            <summary>
            Construct an undefined TextureArray2D.
            </summary>
            <remarks>
            <para>
            It creates Texture object which has not defined extents, internal format and textels. To define this texture, call one
            of Create" methods (except <see cref="M:OpenGL.Objects.TextureArray2D.Create(OpenGL.Objects.GraphicsContext)"/>).
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.#ctor(System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create TextureArray2D data, defining only the extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="layers">
            A <see cref="T:System.UInt32"/> that specify the texture layers.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by the current context and <paramref name="width"/>
            or <paramref name="height"/> is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.TextureArray2D.EmptyTechnique">
            <summary>
            Technique defining an empty texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.EmptyTechnique.#ctor(OpenGL.Objects.TextureArray2D,OpenGL.TextureTarget,OpenGL.PixelLayout,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Construct a EmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureArray2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.TextureArray2D.TextureTarget"/> that specifies the texture target.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="width">
            The width of the texture.
            </param>
            <param name="height">
            The height of the texture.
            </param>
            <param name="layers">
            A <see cref="T:System.UInt32"/> that specifies the number of layers defining the texture array.
            </param>
            <param name="level">
            A <see cref="T:System.UInt32"/> that specifies the mipmap level affected.
            </param>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.EmptyTechnique._TextureArray2d">
            <summary>
            The <see cref="T:OpenGL.Objects.TextureArray2D"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.EmptyTechnique._Target">
            <summary>
            The texture target to use for creating the empty texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.EmptyTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.EmptyTechnique._Width">
            <summary>
            Texture width.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.EmptyTechnique._Height">
            <summary>
            Texture height.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.EmptyTechnique._Layers">
            <summary>
            Texture layers.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.EmptyTechnique._Level">
            <summary>
            Texture mipmap level.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.EmptyTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.TextureArray2D.ImmutableEmptyTechnique">
            <summary>
            Technique defining an immutable empty texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.ImmutableEmptyTechnique.#ctor(OpenGL.Objects.TextureArray2D,OpenGL.TextureTarget,OpenGL.PixelLayout,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Construct a ImmutableEmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureArray2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.TextureArray2D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="width">
            The width of the texture.
            </param>
            <param name="height">
            The height of the texture.
            </param>
            <param name="layers">
            A <see cref="T:System.UInt32"/> that specify the number of layers defining the texture array.
            </param>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.ImmutableEmptyTechnique.#ctor(OpenGL.Objects.TextureArray2D,OpenGL.TextureTarget,OpenGL.PixelLayout,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Construct a ImmutableEmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureArray2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.TextureArray2D.TextureTarget"/> that specify the texture target.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="width">
            The width of the texture.
            </param>
            <param name="height">
            The height of the texture.
            </param>
            <param name="layers">
            A <see cref="T:System.UInt32"/> that specify the number of layers defining the texture array.
            </param>
            <param name="levels">
            A <see cref="T:System.UInt32"/> that specify the number of levels defining the texture array.
            </param>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.ImmutableEmptyTechnique._MipmapLevels">
            <summary>
            Texture mipmaps levels.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.ImmutableEmptyTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.Create(System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create a TextureArray2D, defining the texture size (for level 0) and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width, in pixels.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height, in pixels.
            </param>
            <param name="layers">
            A <see cref="T:System.UInt32"/> that specify the number of layers defining the texture array.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.Create(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create Texture2D data, defining only the extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="layers">
            A <see cref="T:System.UInt32"/> that specify the number of layers defining the texture array.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/>, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.Create(System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout,System.UInt32)">
            <summary>
            Create a TextureArray2D, defining the texture size (for level 0) and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width, in pixels.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height, in pixels.
            </param>
            <param name="layers">
            A <see cref="T:System.UInt32"/> that specify the number of layers defining the texture array.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <param name="levels">
            A <see cref="T:System.UInt32"/> that specifies the number of mipmap levels to define.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> or <paramref name="levels"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.Create(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,System.UInt32,OpenGL.PixelLayout,System.UInt32)">
            <summary>
            Create a TextureArray2D, defining the texture size (for level 0) and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width, in pixels.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height, in pixels.
            </param>
            <param name="layers">
            A <see cref="T:System.UInt32"/> that specify the number of layers defining the texture array.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <param name="levels">
            A <see cref="T:System.UInt32"/> that specifies the number of mipmap levels to define.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> or <paramref name="levels"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="F:OpenGL.PixelLayout.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by current context, and <paramref name="width"/> or <paramref name="height"/>
            is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="T:OpenGL.Objects.TextureArray2D.ImageTechnique">
            <summary>
            Technique defining a texture based on image.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.ImageTechnique.#ctor(OpenGL.Objects.TextureArray2D,OpenGL.TextureTarget,OpenGL.PixelLayout,OpenGL.Objects.Image,System.UInt32)">
            <summary>
            Construct a ImageTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureArray2D"/> affected by this Technique.
            </param>
            <param name="target">
            A <see cref="P:OpenGL.Objects.TextureArray2D.TextureTarget"/> that specifies the texture target.
            </param>
            <param name="pixelFormat">
            The <see cref="T:OpenGL.PixelLayout"/> that specifies texture pixel format.
            </param>
            <param name="images">
            A <see cref="T:OpenGL.Objects.Image"/> that specifies the texture array image for the specified layer.
            </param>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.ImageTechnique._TextureArray2d">
            <summary>
            The <see cref="T:OpenGL.Objects.TextureArray2D"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.ImageTechnique._Target">
            <summary>
            The texture target to use for creating the empty texture.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.ImageTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.ImageTechnique._Image">
            <summary>
            The image that represents the texture data.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureArray2D.ImageTechnique._ImageLayer">
            <summary>
            The index of the texture array for <see cref="F:OpenGL.Objects.TextureArray2D.ImageTechnique._Image"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.ImageTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.ImageTechnique.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.Create(OpenGL.Objects.GraphicsContext,OpenGL.PixelLayout,OpenGL.Objects.Image,System.UInt32)">
            <summary>
            Create Texture2D from a Image instance.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture. If it null, the current context
            will be used.
            </param>
            <param name="image">
            An <see cref="T:OpenGL.Objects.Image"/> holding the texture data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="image"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> pixel data is not allocated (i.e. image not defined).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> width or height are greater than the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/> (or the current context if <paramref name="ctx"/> is
            null), and <paramref name="image"/> width or height are not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> format (<see cref="!:Image.PixelFormat"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.Create(OpenGL.Objects.GraphicsContext,OpenGL.PixelLayout,System.Drawing.Bitmap,System.UInt32)">
            <summary>
            Create Texture2D from a Image instance.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture. If it null, the current context
            will be used.
            </param>
            <param name="bitmap">
            An <see cref="T:System.Drawing.Bitmap"/> holding the texture data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception throw if <paramref name="bitmap"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="bitmap"/> pixel data is not allocated (i.e. image not defined).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="bitmap"/> width or height are greater than the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/> (or the current context if <paramref name="ctx"/> is
            null), and <paramref name="image"/> width or height are not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="image"/> format (<see cref="!:Image.PixelFormat"/> is not a supported internal format.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.TextureArray2D.TextureTarget">
            <summary>
            Determine the derived Texture target.
            </summary>
            <remarks>
            In the case a this Texture is defined by multiple targets (i.e. cube map textures), this property
            shall returns always 0.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.TextureArray2D.SamplerType">
            <summary>
            Uniform sampler type for managing this texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureArray2D.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create this GraphicsResource, checking if the requires OpenGL extensions are.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object.
            </param>
        </member>
        <member name="T:OpenGL.Objects.TextureCube">
            <summary>
            Cube texture.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.TextureCube.CubeFace">
            <summary>
            Enuemartion defining cube texture faces.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.CubeFace.XPositive">
            <summary>
            Positive X-axis face.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.CubeFace.XNegative">
            <summary>
            Negative X-axis face.
            </summary>s
        </member>
        <member name="F:OpenGL.Objects.TextureCube.CubeFace.YPositive">
            <summary>
            Positive Y-axis face.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.CubeFace.YNegative">
            <summary>
            Negative Y-axis face.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.CubeFace.ZPositive">
            <summary>
            Positive Z-axis face.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.CubeFace.ZNegative">
            <summary>
            Negative Z-axis face.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube._CubeTargets">
            <summary>
            TextureCube target ordering.
            </summary>
            <remarks>
            It must following <see cref="T:OpenGL.Objects.TextureCube.CubeFace"/>.
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.TextureCube.EmptyTechnique">
            <summary>
            Technique defining an empty texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureCube.EmptyTechnique.#ctor(OpenGL.Objects.TextureCube,OpenGL.PixelLayout,System.UInt32)">
            <summary>
            Construct a EmptyTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureCube"/> affected by this Technique.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="size">
            The size of the texture.
            </param>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.EmptyTechnique._TextureCube">
            <summary>
            The <see cref="T:OpenGL.Objects.TextureCube"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.EmptyTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.EmptyTechnique._Size">
            <summary>
            Texture size.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureCube.EmptyTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="T:OpenGL.Objects.TextureCube.ImageTechnique">
            <summary>
            Technique defining a texture based on image.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureCube.ImageTechnique.#ctor(OpenGL.Objects.TextureCube,OpenGL.PixelLayout,OpenGL.Objects.Image[])">
            <summary>
            Construct a ImageTechnique.
            </summary>
            <param name="texture">
            The <see cref="T:OpenGL.Objects.TextureCube"/> affected by this Technique.
            </param>
            <param name="pixelFormat">
            The texture pixel format.
            </param>
            <param name="images">
            The texture data.
            </param>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.ImageTechnique._TextureCube">
            <summary>
            The <see cref="T:OpenGL.Objects.TextureCube"/> affected by this Technique.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.ImageTechnique._PixelFormat">
            <summary>
            The internal pixel format of textel.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureCube.ImageTechnique._Images">
            <summary>
            The images that represents the texture data.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureCube.ImageTechnique.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create the texture, using this technique.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="P:OpenGL.Objects.TextureCube.BaseSize">
            <summary>
            Texture size, in pixels, of the level 0 of the texture.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.TextureCube.TextureTarget">
            <summary>
            Determine the derived Texture target.
            </summary>
            <remarks>
            In the case a this Texture is defined by multiple targets (i.e. cube map textures), this property
            shall returns always 0.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.TextureCube.SamplerType">
            <summary>
            Uniform sampler type for managing this Texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureCube.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create this GraphicsResource, checking if the requires OpenGL extensions are.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object.
            </param>
        </member>
        <member name="T:OpenGL.Objects.TextureRectangle">
            <summary>
            Two dimensional texture using rectangle coordinates.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureRectangle.#ctor">
            <summary>
            Construct an undefined TextureRectangle.
            </summary>
            <remarks>
            <para>
            It creates Texture object which has not defined extents, internal format and textels. To define this texture, call one
            of <see cref="M:OpenGL.Objects.Texture2D.Create(System.UInt32,System.UInt32,OpenGL.PixelLayout)"/> or <see cref="!:Texture2D.CreateLazy"/> methods (except <see cref="!:Texture2D.Create(GraphicsContext)"/>).
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.TextureRectangle.#ctor(System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create TextureRectangle data, defining only the extents and the internal format.
            </summary>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by the current context and <paramref name="width"/>
            or <paramref name="height"/> is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.TextureRectangle.#ctor(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32,OpenGL.PixelLayout)">
            <summary>
            Create TextureRectangle data, defining only the extents and the internal format.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this Texture. If it null, the current context
            will be used.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specify the texture width.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specify the texture height.
            </param>
            <param name="format">
            A <see cref="T:OpenGL.PixelLayout"/> determining the texture internal format.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> equals to <see cref="!:PixelFormat.None"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if <paramref name="ctx"/> is null and no context is current to the calling thread.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="width"/> or <paramref name="height"/> is greater than
            the maximum allowed for 2D textures.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if NPOT texture are not supported by <paramref name="ctx"/> (or by the current context is <paramref name="ctx"/> is
            null), and <paramref name="width"/> or <paramref name="height"/> is not a power-of-two value.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="format"/> is not a supported internal format.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.TextureRectangle.MipmapLevels">
            <summary>
            Texture mapmaps level count (including the base level).
            </summary>
            <remarks>
            <para>
            If this texture is not defined, this property shall return 0.
            </para>
            <para>
            If texture target doesn't support mipmapping, this property shall return 1, if it is defined.
            </para>
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.TextureRectangle.TextureTarget">
            <summary>
            Determine the derived Texture target.
            </summary>
            <remarks>
            In the case a this Texture is defined by multiple targets (i.e. cube map textures), this property
            shall returns always 0.
            </remarks>
        </member>
        <member name="P:OpenGL.Objects.TextureRectangle.SamplerType">
            <summary>
            Uniform sampler type for managing this Texture.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureRectangle.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create this GraphicsResource, checking if the requires OpenGL extensions are.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object.
            </param>
        </member>
        <member name="T:OpenGL.Objects.TextureUnit">
            <summary>
            Texture unit abstraction.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureUnit.#ctor(System.UInt32)">
            <summary>
            Construct a TextureUnit specifying its index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="F:OpenGL.Objects.TextureUnit.Index">
            <summary>
            The index of the TextureUnit.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureUnit.Activate(OpenGL.Objects.GraphicsContext)">
            <summary>
            Set this TextureUnit as the current one.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:OpenGL.Objects.TextureUnit.Bind(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Texture)">
            <summary>
            Bind a <see cref="P:OpenGL.Objects.TextureUnit.Texture"/> to this TextureUnit.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> managing this TextureUnit.
            </param>
            <param name="texture">
            The <see cref="P:OpenGL.Objects.TextureUnit.Texture"/> to be bound to this TextureUnit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="P:OpenGL.Objects.TextureUnit.Texture">
            <summary>
            Texture currently bound on texture unit.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureUnit._Texture">
            <summary>
            Texture currently bound on texture unit.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.TextureUnit.Bind(OpenGL.Objects.GraphicsContext,OpenGL.Objects.Sampler)">
            <summary>
            Bind a <see cref="P:OpenGL.Objects.TextureUnit.Sampler"/> to this TextureUnit.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> managing this TextureUnit.
            </param>
            <param name="sampler">
            The <see cref="P:OpenGL.Objects.TextureUnit.Sampler"/> to be bound to this TextureUnit. It can be null to break any previous
            binding.
            </param>
        </member>
        <member name="P:OpenGL.Objects.TextureUnit.Sampler">
            <summary>
            Sampler currently bound on texture unit.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.TextureUnit._Sampler">
            <summary>
            Texture currently bound on texture unit.
            </summary>
            <remarks>
            From specification: "If a sampler object that is currently bound to one or more texture units is deleted, it
            is as though BindSampler is called once for each texture unit to which the sampler is bound, with unit set to the texture
            unit and sampler set to zero."
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.TextureUnit.SamplerParameters(OpenGL.Objects.GraphicsContext)">
            <summary>
            Update sampler parameters, accorndly to <see cref="P:OpenGL.Objects.TextureUnit.Texture"/> and <see cref="P:OpenGL.Objects.TextureUnit.Sampler"/> properties.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> managing this TextureUnit.
            </param>
        </member>
        <member name="M:OpenGL.Objects.TextureUnit.TexParameters(OpenGL.TextureTarget,OpenGL.Objects.SamplerParameters)">
            <summary>
            Apply texture unit sampler parameteres, using compatibility methods.
            </summary>
            <param name="textureTarget">
            The <see cref="T:OpenGL.TextureTarget"/> that specifies the texture target to apply sampler.
            </param>
            <param name="texParameters">
            The <see cref="M:OpenGL.Objects.TextureUnit.SamplerParameters(OpenGL.Objects.GraphicsContext)"/> that specifies the parameters to be applied.
            </param>
        </member>
        <member name="F:OpenGL.Objects.TextureUnit._CurrentSamplerParams">
            <summary>
            Texture unit sampler parameters.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.UniformBuffer">
            <summary>
            A buffer object containing a set of uniform variables, which can be bound to a <see cref="T:OpenGL.Objects.ShaderProgram"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.#ctor(OpenGL.BufferUsage)">
            <summary>
            Construct an UniformBufferObject.
            </summary>
            <param name="hint">
            An <see cref="T:OpenGL.BufferUsage"/> that specify the data buffer usage hint.
            </param>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.#ctor(OpenGL.MapBufferUsageMask)">
            <summary>
            Construct an UniformBufferObject.
            </summary>
            <param name="usageMask">
            An <see cref="T:OpenGL.MapBufferUsageMask"/> that specify the buffer storage usage mask.
            </param>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.Create(System.UInt32)">
            <summary>
            Create this UniformBufferObject by specifing only the number of items.
            </summary>
            <param name="dataSize">
            A <see cref="T:System.UInt32"/> that specify the size of the data hold by this UniformBufferObject, in bytes.
            </param>
            <remarks>
            <para>
            Previous content of the client buffer is discarded.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="dataSize"/> is zero.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.Create(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Create this UniformBufferObject by specifing only the number of items.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used to define this UniformBufferObject.
            </param>
            <param name="dataSize">
            A <see cref="T:System.UInt32"/> that specify the size of the data hold by this UniformBufferObject, in bytes.
            </param>
            <remarks>
            <para>
            Previous content of the client buffer is discarded, if any was defined.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="dataSize"/> is zero.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.UniformBuffer.BindingIndex">
            <summary>
            Current binding point of the UniformBufferObject.
            </summary>
            <remarks>
            The UNIFORM_BUFFER target has a binding index.
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.UniformBuffer.UniformSegment">
            <summary>
            Uniform segment localizing an uniform buffer variable.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.UniformBuffer.UniformSegment.UniformIndex">
            <summary>
            The index of the uniform variable.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.UniformBuffer.UniformSegment.Type">
            <summary>
            The type of the uniform variable.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.UniformSegment.CheckType(System.Int32[])">
            <summary>
            Check uniform variable coherence.
            </summary>
            <param name="uniform">
            A <see cref="!:UniformBinding"/> that specify the uniform name to check.
            </param>
            <param name="uniformRequestTypes">
            A sequence of OpenGL constants that are the allowed types for the specified uniform.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the type of the uniform variable <paramref name="uniform"/> does not match any value specified by <paramref name="uniformRequestTypes"/>.
            </exception>
        </member>
        <member name="F:OpenGL.Objects.UniformBuffer.UniformSegment.Offset">
            <summary>
            The offset of the uniform variable from the beginning of the uniform buffer, in bytes.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.UniformBuffer.UniformSegment.ArrayStride">
            <summary>
            The stride between array elements, in case the uniform variable is an array variable, in bytes.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.UniformBuffer.UniformSegment.MatrixStride">
            <summary>
            The stride between matrix elements, in case the uniform variable is an array of matrix variable, in bytes.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.UniformBuffer.UniformSegment.RowMajor">
            <summary>
            The flag indicating whether the the matrix components are stored in row-major order.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.GetUniform(System.String)">
            <summary>
            Get the <see cref="T:OpenGL.Objects.UniformBuffer.UniformSegment"/> corresponding to the specified uniform variable name.
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specifies the uniform varialble name.
            </param>
            <returns>
            It returns the <see cref="T:OpenGL.Objects.UniformBuffer.UniformSegment"/> correponding to <paramref name="uniformName"/>, or null if
            no corrispondence was found.
            </returns>
        </member>
        <member name="F:OpenGL.Objects.UniformBuffer._UniformSegments">
            <summary>
            Maap between <see cref="T:OpenGL.Objects.UniformBuffer.UniformSegment"/> and uniform names.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.SetUniform(System.String,System.Single)">
            <summary>
            Set uniform state variable (floating-point variable).
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.SetUniform(System.String,OpenGL.Vertex2f)">
            <summary>
            Set uniform state variable (vec2 variable).
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.SetUniform(System.String,OpenGL.Vertex3f)">
            <summary>
            Set uniform state variable (vec3 variable).
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for operations.
            </param>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.SetUniform(System.String,OpenGL.Vertex4f)">
            <summary>
            Set uniform state variable (vec4 variable).
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.SetUniform(System.String,System.Single[])">
            <summary>
            Set uniform state variable (array of vec2 variable).
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="v">
            A <see cref="T:Single[]"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.SetUniform(System.String,OpenGL.Matrix3x3f)">
            <summary>
            Set uniform state variable (mat3 variable).
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="M:OpenGL.Objects.UniformBuffer.SetUniform(System.String,OpenGL.Matrix4x4f)">
            <summary>
            Set uniform state variable (mat4 variable).
            </summary>
            <param name="uniformName">
            A <see cref="T:System.String"/> that specify the variable name in the shader source.
            </param>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4f"/> holding the uniform variabile data.
            </param>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays">
            <summary>
            A collection of vertex arrays and vertex indices.
            </summary>
            <remarks>
            <para>
            Vertex arrays are collected by semantic or name. The array buffers corresponding to vertex attributes
            can have any memory layout (offset and interleaving).
            </para>
            <para>
            Vertex arrays are rendered using a collection of vertex elements. Each vertex element issue a rendering
            command, referencing the vertex array data directly or using a deferencing index.
            </para>
            <para>
            A vertex array can have associated a shader program, and an render state set. Those two objects defines
            the rendering result of the collected arrays.
            </para>
            </remarks>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.IVertexArray">
            <summary>
            Vertex array buffer interface.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IVertexArray.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Allocate resources used by this vertex array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.IVertexArray.Array">
            <summary>
            The <see cref="T:OpenGL.Objects.ArrayBufferBase"/> holding the array information.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.IVertexArray.ArraySection">
            <summary>
            The section of the array referred by this vertex array.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.IVertexArray.Length">
            <summary>
            Get the length of the vertex array.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IVertexArray.SetVertexAttribute(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram.AttributeBinding,System.String)">
            <summary>
            Set the vertex attribute.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="programAttrib">
            The <see cref="T:OpenGL.Objects.ShaderProgram.AttributeBinding"/> that specifies the attribute information.
            </param>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute which binds to this vertex array.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IVertexArray.GetElement``1(System.UInt32)">
            <summary>
            Get an element from the array, as defined in the underlying VertexArrayObject instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IVertexArray.SetElement``1(``0,System.UInt32)">
            <summary>
            Set an element from the array, as defined in the underlying VertexArrayObject instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.VertexArray">
            <summary>
            A vertex array buffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.VertexArray.#ctor(OpenGL.Objects.ArrayBufferBase,System.UInt32)">
            <summary>
            Construct an VertexArray for enabling vertex attribute.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> which defines a vertex array buffer.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the section of <paramref name="arrayBuffer"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.VertexArray.#ctor(System.Boolean)">
            <summary>
            Construct an VertexArray for disabling vertex attribute.
            </summary>
            <param name="reset">
            A <see cref="T:OpenGL.Boolean"/> that specify whether the vertex attribute should be disabled at the
            chance.
            </param>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.VertexArray.ArrayBuffer">
            <summary>
            The vertex array buffer object.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.VertexArray.ArraySectionIndex">
            <summary>
            The vertex array sub-buffer index.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.VertexArray.IsDirty">
            <summary>
            Dirty flag at vertex array level.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.VertexArray.EnableVertexAttribute(OpenGL.Objects.GraphicsContext,System.UInt32,OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Enable the generic vertex attribute.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which the shader program is bound.
            </param>
            <param name="attributeBinding">
            The <see cref="T:OpenGL.Objects.ShaderProgram.AttributeBinding"/> representing the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.VertexArray.DisableVertexAttribute(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Disable the generic vertex attribute.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which the shader program is bound.
            </param>
            <param name="attributeBinding">
            The <see cref="T:OpenGL.Objects.ShaderProgram.AttributeBinding"/> representing the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.VertexArray.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Allocate resources used by this vertex array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.VertexArray.Array">
            <summary>
            The <see cref="T:OpenGL.Objects.ArrayBufferBase"/> holding the array information.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.VertexArray.ArraySection">
            <summary>
            The section of the array referred by this vertex array.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.VertexArray.Length">
            <summary>
            Get the length of the vertex array.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.VertexArray.SetVertexAttribute(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram.AttributeBinding,System.String)">
            <summary>
            Set the vertex attribute.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="programAttrib">
            The <see cref="T:OpenGL.Objects.ShaderProgram.AttributeBinding"/> that specifies the attribute information.
            </param>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute which binds to this vertex array.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.VertexArray.Dispose">
            <summary>
            Dispose this VertexArray.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.DefaultVertexArray">
            <summary>
            A vertex default value.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.DefaultVertexArray.#ctor(OpenGL.Vertex4d)">
            <summary>
            Construct an DefaultVertexArray for disabling vertex attribute, but assigning a default attribute for those
            shader programs using the attribute all the same.
            </summary>
            <param name="defaultAttribValue">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> which defines a vertex array buffer.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the section of <paramref name="arrayBuffer"/>.
            </param>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.DefaultVertexArray.DefaultValue">
            <summary>
            Default vertex attribute value.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.DefaultVertexArray.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Allocate resources used by this vertex array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.DefaultVertexArray.Array">
            <summary>
            The <see cref="T:OpenGL.Objects.ArrayBufferBase"/> holding the array information.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.DefaultVertexArray.ArraySection">
            <summary>
            The section of the array referred by this vertex array.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.DefaultVertexArray.Length">
            <summary>
            Get the length of the vertex array.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.DefaultVertexArray.SetVertexAttribute(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram.AttributeBinding,System.String)">
            <summary>
            Set the vertex attribute.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="programAttrib">
            The <see cref="T:OpenGL.Objects.ShaderProgram.AttributeBinding"/> that specifies the attribute information.
            </param>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute which binds to this vertex array.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.DefaultVertexArray.Dispose">
            <summary>
            Dispose this VertexArray.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.InstancedVertexArray">
            <summary>
            An instanced vertex array buffer.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.InstancedVertexArray.#ctor(OpenGL.Objects.ArrayBufferBase,System.UInt32,System.UInt32)">
            <summary>
            Construct an InstancedVertexArray for enabling instanced vertex attribute.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> which defines a vertex array buffer.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the section of <paramref name="arrayBuffer"/>.
            </param>
            <param name="divisor">
            A <see cref="T:System.UInt32"/> that specify the number of instances that will pass between updates of the generic attribute.
            </param>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.InstancedVertexArray.Divisor">
            <summary>
            The number of instances that will pass between updates of the generic attribute.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.InstancedVertexArray.EnableVertexAttribute(OpenGL.Objects.GraphicsContext,System.UInt32,OpenGL.Objects.ShaderAttributeType)">
            <summary>
            Enable the generic vertex attribute.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> on which the shader program is bound.
            </param>
            <param name="attributeBinding">
            The <see cref="T:OpenGL.Objects.ShaderProgram.AttributeBinding"/> representing the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetArray(OpenGL.Objects.ArrayBufferBase,System.UInt32,System.String,System.String)">
            <summary>
            Set an array buffer to a shader attribute.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> that specify the contents of the array.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the <paramref name="arrayBuffer"/> sub-array index.
            </param>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the name of the attribute variable.
            </param>
            <param name="blockName">
            A <see cref="T:System.String"/> that specify the name of the attribute block encolosing <paramref name="semantic"/>. It
            can be null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="arrayBuffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception throw if <paramref name="arrayBuffer"/> has no items.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="sectionIndex"/> specify an invalid section of <paramref name="arrayBuffer"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="semantic"/> is null or is not a valid input name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetArray(OpenGL.Objects.ArrayBufferBase,System.String,System.String)">
            <summary>
            Set an array buffer to a shader attribute.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> that specify the contents of the array.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the <paramref name="arrayBuffer"/> sub-array index.
            </param>
            <param name="inputName">
            A <see cref="T:System.String"/> that specify the name of the input variable.
            </param>
            <param name="blockName">
            A <see cref="T:System.String"/> that specify the name of the input block encolosing <paramref name="inputName"/>. It
            can be null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="arrayBuffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception throw if <paramref name="arrayBuffer"/> has no items.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="inputName"/> is null or is not a valid input name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetArray(OpenGL.Objects.ArrayBufferBase,System.UInt32,System.String)">
            <summary>
            Set an array buffer to a shader attribute.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> that specify the contents of the array.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the <paramref name="arrayBuffer"/> sub-array index.
            </param>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the attribute semantic. Normally a constant of <see cref="T:OpenGL.Objects.VertexArraySemantic"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="arrayBuffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception throw if <paramref name="arrayBuffer"/> has no items.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="sectionIndex"/> specify an invalid section of <paramref name="arrayBuffer"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="semantic"/> is null or is not a valid semantic name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetArray(OpenGL.Objects.ArrayBufferBase,System.String)">
            <summary>
            Set an array buffer to a shader attribute.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> that specify the contents of the array.
            </param>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the attribute semantic. Normally a constant of <see cref="T:OpenGL.Objects.VertexArraySemantic"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="arrayBuffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception throw if <paramref name="arrayBuffer"/> has no items.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="semantic"/> is null or is not a valid semantic name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetArrayDefault(OpenGL.Vertex4d,System.String,System.String)">
            <summary>
            Set a default value to a shader attribute.
            </summary>
            <param name="defaultValue">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the default value of the attribute.
            </param>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the name of the attribute variable.
            </param>
            <param name="blockName">
            A <see cref="T:System.String"/> that specify the name of the input block encolosing <paramref name="inputName"/>. It
            can be null.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="inputName"/> is null or is not a valid input name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetArrayDefault(OpenGL.Vertex4d,System.String)">
            <summary>
            Set an array buffer to a shader attribute.
            </summary>
            <param name="defaultValue">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the default value of the attribute.
            </param>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the attribute semantic. Normally a constant of <see cref="T:OpenGL.Objects.VertexArraySemantic"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="semantic"/> is null or is not a valid semantic name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetInstancedArray(OpenGL.Objects.ArrayBufferBase,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            Link an array buffer to an attribute of this vertex array.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> that specify the contents of the array.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the <paramref name="arrayBuffer"/> sub-array index.
            </param>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the name of the attribute variable.
            </param>
            <param name="blockName">
            A <see cref="T:System.String"/> that specify the name of the attribute block encolosing <paramref name="semantic"/>. It
            can be null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="arrayBuffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception throw if <paramref name="arrayBuffer"/> has no items.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="sectionIndex"/> specify an invalid section of <paramref name="arrayBuffer"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="semantic"/> is null or is not a valid input name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetInstancedArray(OpenGL.Objects.ArrayBufferBase,System.UInt32,System.String,System.String)">
            <summary>
            Set an array buffer to this vertex array.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> that specify the contents of the array.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the <paramref name="arrayBuffer"/> sub-array index.
            </param>
            <param name="inputName">
            A <see cref="T:System.String"/> that specify the name of the input variable.
            </param>
            <param name="blockName">
            A <see cref="T:System.String"/> that specify the name of the input block encolosing <paramref name="inputName"/>. It
            can be null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="arrayBuffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception throw if <paramref name="arrayBuffer"/> has no items.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="inputName"/> is null or is not a valid input name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetInstancedArray(OpenGL.Objects.ArrayBufferBase,System.UInt32,System.UInt32,System.String)">
            <summary>
            Set an array buffer to this vertex array.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> that specify the contents of the array.
            </param>
            <param name="sectionIndex">
            A <see cref="T:System.UInt32"/> that specify the <paramref name="arrayBuffer"/> sub-array index.
            </param>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the attribute semantic. Normally a constant of <see cref="T:OpenGL.Objects.VertexArraySemantic"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="arrayBuffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception throw if <paramref name="arrayBuffer"/> has no items.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="sectionIndex"/> specify an invalid section of <paramref name="arrayBuffer"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="semantic"/> is null or is not a valid semantic name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetInstancedArray(OpenGL.Objects.ArrayBufferBase,System.UInt32,System.String)">
            <summary>
            Set an array buffer to this vertex array.
            </summary>
            <param name="arrayBuffer">
            A <see cref="T:OpenGL.Objects.ArrayBufferBase"/> that specify the contents of the array.
            </param>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the attribute semantic. Normally a constant of <see cref="T:OpenGL.Objects.VertexArraySemantic"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="arrayBuffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception throw if <paramref name="arrayBuffer"/> has no items.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="semantic"/> is null or is not a valid semantic name.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetVertexArray(OpenGL.Objects.VertexArrays.IVertexArray,System.String,System.String)">
            <summary>
            Set an array buffer object collected by this vertex array object.
            </summary>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays.VertexArray"/> that defined the vertex attribute buffer.
            </param>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute name.
            </param>
            <param name="blockName">
            A <see cref="T:System.String"/> that specify the attribute block declaring <paramref name="attributeName"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GetVertexArray(System.String,System.String)">
            <summary>
            Get an array buffer object collected by this vertex array object.
            </summary>
            <param name="attributeName">
            A <see cref="T:System.String"/> that specify the attribute name.
            </param>
            <param name="attributeBlock">
            A <see cref="T:System.String"/> that specify the attribute block declaring <paramref name="attributeName"/>.
            </param>
            <returns>
            It returns the array corresponding to the attribute having the name <paramref name="attributeName"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GetVertexArray(System.String)">
            <summary>
            Get an array buffer object collected by this vertex array object.
            </summary>
            <param name="semantic">
            A <see cref="T:System.String"/> that specify the attribute semantic.
            </param>
            <returns>
            It returns the array corresponding to the semantic <paramref name="semantic"/>.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.ArrayLength">
            <summary>
            The vertex array length, based on the property <see cref="!:ArrayBufferBase.GpuItemsCount"/> of the
            array objects compositing this vertex array.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.UpdateVertexArrayLength">
            <summary>
            The the minimum length of the arrays compositing this vertex array.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays._VertexArrayLength">
            <summary>
            Number of items of the collected buffer objects.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Validate">
            <summary>
            Validate this vertex array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.DrawArrays">
            <summary>
            Determine the actual <see cref="T:OpenGL.Objects.VertexArrays.IVertexArray"/> instances used for drawing.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays._VertexArrays">
            <summary>
            Array buffer objects required by this vertex array object.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.SemanticBlockName">
            <summary>
            Special name for the attributes relative to a semantic.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.#ctor">
            <summary>
            Construct an empty vertex array.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Draw(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Draw all elements.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="shader">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> used for drawing the vertex arrays.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Draw(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.Int32)">
            <summary>
            Draw a specific element set.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="shader">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> used for drawing the vertex arrays.
            </param>
            <param name="elementIndex">
            A <see cref="T:System.Int32"/> that specifies the index of the element to draw. If it is less than 0, it draws
            all elements set. The index can be obtained by the value returned by <see cref="M:OpenGL.Objects.VertexArrays.SetElementArray(OpenGL.PrimitiveType)"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Draw(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Draw a specific element set.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="shader">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> used for drawing the vertex arrays.
            </param>
            <param name="elementIndex">
            A <see cref="T:System.Int32"/> that specifies the index of the element to draw. If it is less than 0, it draws
            all elements set. The index can be obtained by the value returned by <see cref="M:OpenGL.Objects.VertexArrays.SetElementArray(OpenGL.PrimitiveType)"/>.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specifies the offset of the first element to draw.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies the number of items to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Draw(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,OpenGL.Objects.VertexArrays.IElement[])">
            <summary>
            Draw a specific element set.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="shader">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> used for drawing the vertex arrays.
            </param>
            <param name="elementIndex">
            A <see cref="T:System.Int32"/> that specifies the index of the element to draw. If it is less than 0, it draws
            all elements set. The index can be obtained by the value returned by <see cref="M:OpenGL.Objects.VertexArrays.SetElementArray(OpenGL.PrimitiveType)"/>.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetVertexArrayState(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Set the vertex arrays state for the shader program.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> on which the shader program is bound.
            </param>
            <param name="shaderProgram">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> on which the vertex arrays shall be bound.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.CheckVertexAttributes(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram)">
            <summary>
            Utility routine for checking the vertex array state.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> on which the shader program is bound.
            </param>
            <param name="shaderProgram">
            A <see cref="T:OpenGL.Objects.ShaderProgram"/> on which the vertex arrays shall be bound.
            </param>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays._VertexArrayState">
            <summary>
            Currently bound vertex array state.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.DrawInstanced(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Draw a number of instances of the attributes of this vertex array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="instances">
            A <see cref="T:System.UInt32"/> that specify the number of instances to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.DrawInstanced(OpenGL.Objects.GraphicsContext,OpenGL.Objects.ShaderProgram,System.UInt32)">
            <summary>
            Draw a number of instances of the attributes of this vertex array.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for rendering.
            </param>
            <param name="shader">
            The <see cref="T:OpenGL.Objects.ShaderProgram"/> used for drawing the vertex arrays.
            </param>
            <param name="instances">
            A <see cref="T:System.UInt32"/> that specify the number of instances to draw.
            </param>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays._FeedbackBuffer">
            <summary>
            The feedback buffer object that specify the feedback array buffers.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GenerateNormals(OpenGL.Objects.GraphicsContext)">
            <summary>
            Generate normals for the elements defined in this vertex array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This exception is thown in the case the vertex array does not defines the requires arrays. Normals
            generation requires user to allocate normal buffer following the other elements; and the position semantic
            must be defined and meaninfull.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GenerateTexCoords(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrayTexGenDelegate)">
            <summary>
            Generate texture coordinates for the elements defined in this vertex array.
            </summary>
            <param name="genTexCoordCallback">
            A <see cref="T:OpenGL.Objects.VertexArrayTexGenDelegate"/> used for generating texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GenerateTexCoords(OpenGL.Objects.GraphicsContext,OpenGL.Objects.IVertexArrayTexGen)">
            <summary>
            Generate texture coordinates for the elements defined in this vertex array.
            </summary>
            <param name="vertexArrayTexGen">
            A <see cref="T:OpenGL.Objects.IVertexArrayTexGen"/> used for generating texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GenerateTangents(OpenGL.Objects.GraphicsContext)">
            <summary>
            Generate tangents and bitangents for the elements defined in this vertex array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This exception is thown in the case the vertex array does not defines the requires arrays. Tangent and bitangents
            generation requires user to allocate relatives buffer following the other elements; and the position semantic
            and the texture coordinate semantic must be defined and meaninfull.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.CreateSphere(System.Single,System.Int32,System.Int32)">
            <summary>
            Create a sphere.
            </summary>
            <param name="radius">
            A <see cref="T:System.Single"/> that specifies the radius of the sphere.
            </param>
            <param name="slices">
            A <see cref="T:System.Int32"/> that specifies the number of horizontal subdivisions of the sphere.
            </param>
            <param name="stacks">
            A <see cref="T:System.Int32"/> that specifies the number of vertical subdivisions of the sphere.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexArrays"/> defining the following semantics:
            - Positions
            - Normals
            </returns>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GenerateSphere(System.Single,System.Int32,System.Int32,OpenGL.Vertex3f[]@,OpenGL.Vertex3f[]@,System.UInt16[]@,System.Int32@)">
            <summary>
            Utility method for <see cref="M:OpenGL.Objects.VertexArrays.CreateSphere(System.Single,System.Int32,System.Int32)"/>.
            </summary>
            <param name="radius"></param>
            <param name="slices"></param>
            <param name="stacks"></param>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="indices"></param>
            <param name="vertexCount"></param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GenerateCircleTable(System.Single[]@,System.Single[]@,System.Int32,System.Boolean)">
            <summary>
            Utility method for <see cref="M:OpenGL.Objects.VertexArrays.GenerateSphere(System.Single,System.Int32,System.Int32,OpenGL.Vertex3f[]@,OpenGL.Vertex3f[]@,System.UInt16[]@,System.Int32@)"/>.
            </summary>
            <param name="sint"></param>
            <param name="cost"></param>
            <param name="n"></param>
            <param name="halfCircle"></param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.CreatePlane(System.Single,System.Single,System.Single,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.ThisObjectClass">
            <summary>
            Vertex array object class.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.ObjectClass">
            <summary>
            Vertex array object class.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Exists(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this BufferObject really exists for a specific context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> that would have created (or a sharing one) the object. This context shall be current to
            the calling thread.
            </param>
            <returns>
            It returns a boolean value indicating whether this BufferObject exists in the object space of <paramref name="ctx"/>.
            </returns>
            <remarks>
            <para>
            The object existence is done by checking a valid object by its name <see cref="P:OpenGL.Objects.IGraphicsResource.ObjectName"/>. This routine will test whether
            <paramref name="ctx"/> has created this BufferObject (or is sharing with the creator).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current to the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.RequiresName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Determine whether this object requires a name bound to a context or not.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this object name.
            </param>
            <returns>
            It returns always false. Names are managed manually
            </returns>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.CreateName(OpenGL.Objects.GraphicsContext)">
            <summary>
            Create a BufferObject name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for creating this buffer object name.
            </param>
            <returns>
            It returns a valid object name for this BufferObject.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.DeleteName(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Delete a BufferObject name.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for deleting this buffer object name.
            </param>
            <param name="name">
            A <see cref="T:System.UInt32"/> that specify the object name to delete.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject does not exist.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.CreateObject(OpenGL.Objects.GraphicsContext)">
            <summary>
            Actually create this BufferObject resources.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="ctx"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is not current on the calling thread.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject has not client memory allocated and the hint is different from
            <see cref="!:BufferHint.StaticCpuDraw"/> or <see cref="!:BufferHint.DynamicCpuDraw"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if this BufferObject is currently mapped.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:OpenGL.Boolean"/> indicating whether this method is called by <see cref="!:Dispose()"/>. If it is false,
            this method is called by the finalizer.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.OpenGL#Objects#IBindingResource#GetBindingTarget(OpenGL.Objects.GraphicsContext)">
            <summary>
            Get the identifier of the binding point.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.OpenGL#Objects#IBindingResource#Bind(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this IBindingResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.OpenGL#Objects#IBindingResource#Unbind(OpenGL.Objects.GraphicsContext)">
            <summary>
            Bind this IBindingResource.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for binding.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.OpenGL#Objects#IBindingResource#IsBound(OpenGL.Objects.GraphicsContext)">
            <summary>
            Check whether this IBindingResource is currently bound on the specified graphics context.
            </summary>
            <param name="ctx">
            A <see cref="T:OpenGL.Objects.GraphicsContext"/> used for querying the current binding state.
            </param>
            <returns>
            It returns a boolean value indicating whether this IBindingResource is currently bound on <paramref name="ctx"/>.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.IElement">
            <summary>
            Vertex array element interface.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.Element">
            <summary>
            Abstract vertex array element.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.#ctor(OpenGL.Objects.VertexArrays,OpenGL.PrimitiveType)">
            <summary>
            Specify which elements shall be drawn by indexing them, specifying an offset and the number of elements.
            </summary>
            <param name="vao">
            The <see cref="T:OpenGL.Objects.VertexArrays"/> to which this element belongs to.
            </param>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that indicates how elements are interpreted.
            </param>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.Element._VertexArrayObject">
            <summary>
            The <see cref="T:OpenGL.Objects.VertexArrays"/> to which this element belongs to.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.Element.ElementsMode">
            <summary>
            The primitive used for interpreting the sequence of the array elements.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.AsPoint">
            <summary>
            Create a copy of this element, but <see cref="F:OpenGL.Objects.VertexArrays.Element.ElementsMode"/> is forced to be <see cref="F:OpenGL.PrimitiveType.Points"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Ensure that all required resources are created.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.Draw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Draw the element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.Draw(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32)">
            <summary>
            Draw the element, applying an offset and a count.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specifies the offset of the first element to draw.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies the number of items to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.DrawInstanced(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Draw the elements instances
            </summary>
             <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="instances">
            A <see cref="T:System.UInt32"/> that specify the number of instances to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.GenerateNormals(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrays)">
            <summary>
            Generate normals for this Element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for accessing information.
            </param>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays"/>
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.GenerateTexCoord(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrays,OpenGL.Objects.VertexArrayTexGenDelegate)">
            <summary>
            Generate texture coordinates for this Element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for accessing information.
            </param>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays"/>
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.GenerateTangents(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrays)">
            <summary>
            Generate tangents for this Element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for accessing information.
            </param>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays"/>
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.GenerateBitangents(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrays)">
            <summary>
            Generate bitangents for this Element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for accessing information.
            </param>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays"/>
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.Element.Dispose">
            <summary>
            Dispose this Element.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.ArrayElement">
            <summary>
            Vertex array element drawing vertices directly (<see cref="M:OpenGL.Gl.DrawArrays(OpenGL.PrimitiveType,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.ArrayElement.#ctor(OpenGL.Objects.VertexArrays,OpenGL.PrimitiveType,System.UInt32,System.UInt32)">
            <summary>
            Specify which elements shall be drawn, specifying an offset and the number of elements.
            </summary>
            <param name="vao">
            The <see cref="T:OpenGL.Objects.VertexArrays"/> to which this element belongs to.
            </param>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that indicates how array elements are interpreted.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specify the offset applied to the drawn array elements.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specify the number of array elements drawn.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.ArrayElement.#ctor(OpenGL.Objects.VertexArrays,OpenGL.PrimitiveType)">
            <summary>
            Specify which elements shall be drawn.
            </summary>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that indicates how array elements are interpreted.
            </param>
            <remarks>
            The array elements count is implictly defined as the vertex array length at <see cref="M:OpenGL.Objects.VertexArrays.ArrayElement.Draw(OpenGL.Objects.GraphicsContext)"/>
            execution time.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.ArrayElement.ElementOffset">
            <summary>
            The offset for sending element for drawing.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.ArrayElement.ElementCount">
            <summary>
            The number of array elements to draw.
            </summary>
            <remarks>
            In the case this field equals to 0, it means that all array elements defined in the vertex array shall be drawn.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.ArrayElement.AsPoint">
            <summary>
            Create a copy of this element, but <see cref="!:ElementsMode"/> is forced to be <see cref="F:OpenGL.PrimitiveType.Points"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.ArrayElement.Draw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Draw the elements.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.ArrayElement.Draw(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32)">
            <summary>
            Draw the element, applying an offset and a count.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specifies the offset of the first element to draw.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies the number of items to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.ArrayElement.DrawInstanced(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Draw the elements instances
            </summary>
             <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="instances">
            A <see cref="T:System.UInt32"/> that specify the number of instances to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.ArrayElement.GenerateNormals(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrays)">
            <summary>
            Generate normals for this Element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for accessing information.
            </param>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays"/>
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.ArrayElement.GenerateTangents(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrays)">
            <summary>
            Generate tangents for this Element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for accessing information.
            </param>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays"/>
            </param>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.MultiArrayElement">
            <summary>
            Vertex array element drawing vertices directly (<see cref="M:OpenGL.Gl.MultiDrawArrays(OpenGL.PrimitiveType,System.Int32[],System.Int32[],System.Int32)"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.MultiArrayElement.#ctor(OpenGL.Objects.VertexArrays,OpenGL.PrimitiveType,System.Int32[],System.Int32[])">
            <summary>
            Specify which elements shall be drawn, specifying an offset and the number of elements.
            </summary>
            <param name="vao">
            The <see cref="T:OpenGL.Objects.VertexArrays"/> to which this element belongs to.
            </param>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that indicates how array elements are interpreted.
            </param>
            <param name="offsets">
            A <see cref="T:Int32[]"/> that specify the offset applied to the drawn array elements.
            </param>
            <param name="counts">
            A <see cref="T:Int32[]"/> that specify the number of array elements drawn.
            </param>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.MultiArrayElement.ArrayOffsets">
            <summary>
            The offset for sending element for drawing.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.MultiArrayElement.ArrayCounts">
            <summary>
            The number of array elements to draw.
            </summary>
            <remarks>
            In the case this field equals to 0, it means that all array elements defined in the vertex array shall be drawn.
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.MultiArrayElement.AsPoint">
            <summary>
            Create a copy of this element, but <see cref="!:ElementsMode"/> is forced to be <see cref="F:OpenGL.PrimitiveType.Points"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.MultiArrayElement.Draw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Draw the elements.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.MultiArrayElement.Draw(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32)">
            <summary>
            Draw the element, applying an offset and a count.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specifies the offset of the first element to draw.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies the number of items to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.MultiArrayElement.DrawInstanced(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Draw the elements instances
            </summary>
             <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="instances">
            A <see cref="T:System.UInt32"/> that specify the number of instances to draw.
            </param>
        </member>
        <member name="T:OpenGL.Objects.VertexArrays.IndexedElement">
            <summary>
            A collection of indices reference input arrays (<see cref="M:OpenGL.Gl.DrawElements(OpenGL.PrimitiveType,System.Int32,OpenGL.DrawElementsType,System.IntPtr)"/>).
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.#ctor(OpenGL.Objects.VertexArrays,OpenGL.PrimitiveType,OpenGL.Objects.ElementBuffer,System.UInt32,System.UInt32)">
            <summary>
            Specify which elements shall be drawn by indexing them, specifying an offset and the number of element indices.
            </summary>
            <param name="vao">
            The <see cref="T:OpenGL.Objects.VertexArrays"/> to which this element belongs to.
            </param>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that indicates how array elements are interpreted.
            </param>
            <param name="indices">
            A <see cref="T:OpenGL.Objects.ElementBuffer"/> containing the indices of the drawn vertices.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specify the offset applied to the drawn elements indices.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specify the number of element indices drawn.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="indices"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.#ctor(OpenGL.Objects.VertexArrays,OpenGL.PrimitiveType,OpenGL.Objects.ElementBuffer)">
            <summary>
            Specify which elements shall be drawn by indexing them, specifying an offset and the number of element indices.
            </summary>
            <param name="vao">
            The <see cref="T:OpenGL.Objects.VertexArrays"/> to which this element belongs to.
            </param>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that indicates how array elements are interpreted.
            </param>
            <param name="indices">
            A <see cref="T:OpenGL.Objects.ElementBuffer"/> containing the indices of the drawn vertices.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="indices"/> is null.
            </exception>
            <remarks>
            The element indices count is implictly defined by <paramref name="indices"/> at <see cref="M:OpenGL.Objects.VertexArrays.IndexedElement.Draw(OpenGL.Objects.GraphicsContext)"/>
            execution time.
            </remarks>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays.IndexedElement.ArrayIndices">
            <summary>
            An integral buffer that specify vertices by they index.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.AsPoint">
            <summary>
            Create a copy of this element, but <see cref="!:ElementsMode"/> is forced to be <see cref="F:OpenGL.PrimitiveType.Points"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.Create(OpenGL.Objects.GraphicsContext)">
            <summary>
            Ensure that all required resources are created.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.Draw(OpenGL.Objects.GraphicsContext)">
            <summary>
            Draw the elements.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.Draw(OpenGL.Objects.GraphicsContext,System.UInt32,System.UInt32)">
            <summary>
            Draw the element, applying an offset and a count.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for allocating resources.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specifies the offset of the first element to draw.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies the number of items to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.DrawInstanced(OpenGL.Objects.GraphicsContext,System.UInt32)">
            <summary>
            Draw the elements instances
            </summary>
             <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
            <param name="instances">
            A <see cref="T:System.UInt32"/> that specify the number of instances to draw.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.DrawElements(OpenGL.Objects.GraphicsContext,System.IntPtr)">
            <summary>
            Draw the elements indices.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.DrawElementsInstanced(OpenGL.Objects.GraphicsContext,System.IntPtr,System.UInt32)">
            <summary>
            Draw the elements indices.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for drawing.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.GenerateTexCoord(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrays,OpenGL.Objects.VertexArrayTexGenDelegate)">
            <summary>
            Generate texture coordinates for this Element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for accessing information.
            </param>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays"/>
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.GenerateTangents(OpenGL.Objects.GraphicsContext,OpenGL.Objects.VertexArrays)">
            <summary>
            Generate tangents for this Element.
            </summary>
            <param name="ctx">
            The <see cref="T:OpenGL.Objects.GraphicsContext"/> used for accessing information.
            </param>
            <param name="vertexArray">
            The <see cref="T:OpenGL.Objects.VertexArrays"/>
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.IndexedElement.Dispose">
            <summary>
            Dispose this VertexArray.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetElementArray(OpenGL.PrimitiveType)">
            <summary>
            Specify the entire array to be drawn sequentially.
            </summary>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that specify how arrays elements are interpreted.
            </param>
            <returns>
            It returns the index of the element set.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetElementArray(OpenGL.PrimitiveType,System.UInt32,System.UInt32)">
            <summary>
            Specify the entire array to be drawn sequentially.
            </summary>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that specify how arrays elements are interpreted.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specify the offset applied to the drawn array elements.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specify the number of array elements drawn.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetElementArray(OpenGL.PrimitiveType,OpenGL.Objects.ElementBuffer)">
            <summary>
            Set a buffer object which specify the element arrays.
            </summary>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that specify how arrays elements are interpreted.
            </param>
            <param name="bufferObject">
            A <see cref="T:OpenGL.Objects.ElementBuffer"/> that specify a sequence of indices that defines the
            array element sequence.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.SetElementArray(OpenGL.PrimitiveType,OpenGL.Objects.ElementBuffer,System.UInt32,System.UInt32)">
            <summary>
            Set a buffer object which specify the element arrays.
            </summary>
            <param name="mode">
            A <see cref="T:OpenGL.PrimitiveType"/> that specify how arrays elements are interpreted.
            </param>
            <param name="bufferObject">
            A <see cref="T:OpenGL.Objects.ElementBuffer"/> that specify a sequence of indices that defines the
            array element sequence.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32"/> that specify the offset applied to the drawn elements indices.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specify the number of element indices drawn.
            </param>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.GetElementArray(System.Int32)">
            <summary>
            Get the vertex array element by its index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.VertexArrays.CombineArrayElements(System.Collections.Generic.IEnumerable{OpenGL.Objects.VertexArrays.IElement})">
            <summary>
            Combine a set of array elements to form a multi-draw compatible element.
            </summary>
            <param name="multiElements">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that specifies all elements to be drawn using multi-draw
            primitive.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.VertexArrays.IElement"/> that allow drawing <paramref name="multiElements"/> at once
            using the multi-draw primitive.
            </returns>
        </member>
        <member name="P:OpenGL.Objects.VertexArrays.DrawElements">
            <summary>
            Determine the actual <see cref="T:OpenGL.Objects.VertexArrays.Element"/> instances used for drawing.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrays._Elements">
            <summary>
            Collection of elements for drawing arrays.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.VertexArraySemantic">
            <summary>
            Commonly used semantic for program vertex inputs.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArraySemantic.GetLocation(System.String)">
            <summary>
            Get the default location for known attribute semantic.
            </summary>
            <param name="semantic"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.Objects.VertexArraySemantic.Position">
            <summary>
            Vertices position.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArraySemantic.PositionSegment">
            <summary>
            Vertices position segment.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArraySemantic.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArraySemantic.Normal">
            <summary>
            Normal vector.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArraySemantic.Tangent">
            <summary>
            Tangent vector.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArraySemantic.Bitangent">
            <summary>
            Bitangent vector.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArraySemantic.TexCoord">
            <summary>
            Texture coordinate.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.VertexArrayTexGenDelegate">
            <summary>
            Delegate used for generating texture coordinates on <see cref="T:OpenGL.Objects.VertexArrays"/>.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.IVertexArrayTexGen">
            <summary>
            Interface used for generating texture coordinates on <see cref="T:OpenGL.Objects.VertexArrays"/>.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IVertexArrayTexGen.Initialize(OpenGL.Objects.VertexArrays)">
            <summary>
            Initialize the IVertexArrayTexGen instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.IVertexArrayTexGen.Generate(OpenGL.Vertex3f)">
            <summary>
            Generate the texture coordinate for the specified vertex.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.VertexArrayTexGen">
            <summary>
            Collection of common texture generators.
            </summary>
        </member>
        <member name="P:OpenGL.Objects.VertexArrayTexGen.TexGenBase.Repeat">
            <summary>
            Get or set the texture coordinate repeat multipliers.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexArrayTexGen.TexGenBase._Repeat">
            <summary>
            Repeat multipliers.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrayTexGen.TexGenBase.Initialize(OpenGL.Objects.VertexArrays)">
            <summary>
            Initialize the IVertexArrayTexGen instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrayTexGen.TexGenBase.Generate(OpenGL.Vertex3f)">
            <summary>
            Generate the texture coordinate for the specified vertex.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.VertexArrayTexGen.SphereMap(OpenGL.Vertex3f)">
            <summary>
            A <see cref="T:OpenGL.Objects.VertexArrayTexGenDelegate"/> mapping a sphere.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Objects.VertexArrayTexGen.Sphere.Initialize(OpenGL.Objects.VertexArrays)">
            <summary>
            Initialize the IVertexArrayTexGen instance.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexArrayTexGen.Sphere.Generate(OpenGL.Vertex3f)">
            <summary>
            Generate the texture coordinate for the specified vertex.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:OpenGL.Objects.VertexBaseType">
            <summary>
            Base type of vertex components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.Byte">
            <summary>
            Signed byte components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.UByte">
            <summary>
            Unsigned byte components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.Short">
            <summary>
            Signed short components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.UShort">
            <summary>
            Unsigned short components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.Int">
            <summary>
            Signed integer components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.UInt">
            <summary>
            Unsigned integer components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.Float">
            <summary>
            Single-precision floating-point components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.Double">
            <summary>
            Double-precision floating-point components.
            </summary>
        </member>
        <member name="F:OpenGL.Objects.VertexBaseType.Half">
            <summary>
            Half-precision floating-point components.
            </summary>
        </member>
        <member name="T:OpenGL.Objects.VertexBaseTypeExtensions">
            <summary>
            Extension methods for <see cref="T:OpenGL.Objects.VertexBaseType"/> enumeration.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexBaseTypeExtensions.IsFloatBaseType(OpenGL.Objects.VertexBaseType)">
            <summary>
            Determine whether a base type is a floating-point value.
            </summary>
        </member>
        <member name="M:OpenGL.Objects.VertexBaseTypeExtensions.GetArrayBufferType(OpenGL.Objects.VertexBaseType,System.UInt32)">
            <summary>
            Get the corresponding <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> from a set of parameters.
            </summary>
            <param name="baseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating the type of the components of the vertex array buffer item.
            </param>
            <param name="length">
            A <see cref="T:System.UInt32"/> indicating the length of the vertex array buffer item.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> having a base type equals to <paramref name="baseType"/>, a
            length equals to <paramref name="length"/> and a rank equals to 1 (implicit).
            </returns>
        </member>
        <member name="M:OpenGL.Objects.VertexBaseTypeExtensions.GetArrayBufferType(OpenGL.Objects.VertexBaseType,System.UInt32,System.UInt32)">
            <summary>
            Get the corresponding <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> from a set of parameters.
            </summary>
            <param name="baseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> indicating the type of the components of the vertex array buffer item.
            </param>
            <param name="length">
            A <see cref="T:System.UInt32"/> indicating the length of the vertex array buffer item.
            </param>
            <param name="rank">
            A <see cref="T:System.UInt32"/> indicating the rank of the vertex array buffer item.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Objects.ArrayBufferItemType"/> having a base type equals to <paramref name="baseType"/>, a
            length equals to <paramref name="length"/> and a rank equals to <paramref name="rank"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Objects.VertexBaseTypeExtensions.GetSize(OpenGL.Objects.VertexBaseType)">
            <summary>
            Get the size of a vertex array buffer item.
            </summary>
            <param name="vertexBaseType">
            A <see cref="T:OpenGL.Objects.VertexBaseType"/> that describe the vertex array buffer item.
            </param>
            <returns>
            It returns the size of the vertex array buffer type having the type <paramref name="vertexBaseType"/>, in bytes.
            </returns>
        </member>
        <member name="T:OpenGL.Objects.Vincenty">
            <summary>
            Vincenty projection implementation.
            </summary>
            <remarks>
            Implementation base on 
            </remarks>
        </member>
        <member name="M:OpenGL.Objects.Vincenty.Direct(OpenGL.Vertex2d,System.Double,System.Double,OpenGL.Vertex2d@)">
            <summary>
            Direct solution: compute distance and bearing from two points.
            </summary>
            <param name="v1"></param>
            <param name="rng"></param>
            <param name="brg"></param>
            <param name="v2"></param>
        </member>
        <member name="M:OpenGL.Objects.Vincenty.Inverse(OpenGL.Vertex2d,OpenGL.Vertex2d,System.Double@,System.Double@)">
            <summary>
            Inverse solution: compute the point given distance and bearing from a point.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="rng"></param>
            <param name="brg"></param>
        </member>
        <member name="M:OpenGL.Objects.Vincenty.GetDistance(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Get the distance between two points.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
    </members>
</doc>
